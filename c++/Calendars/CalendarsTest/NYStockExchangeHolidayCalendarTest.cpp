/**
 * \file NYStockExchangeHolidayCalendarTest.cpp
 * \brief NYStockExchangeHolidayCalendar unit test header file
 *
 */





/*
 * This file is part of OndALear  collection of open source components.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Copyright (C) 2008 Amnon Janiv <amnon.janiv@ondalear.com>
 *
 * Initial version: 2011-11-11
 * Author: Amnon Janiv <amnon.janiv@ondalear.com>
 */

/*
 * $Id:  $
 */
#include "NYStockExchangeHolidayCalendarTest.hpp"

#include "datetime/Stream.hpp"


namespace ondalear {
namespace test {
namespace calendar {


 
//public member functions
NYStockExchangeHolidayCalendarTest::NYStockExchangeHolidayCalendarTest()
	:
	HolidayCalendarTest("us_nyexchg_calendar_test_data.xml")
{
	loadCalendarData(getCalendarDataGrammarFileName(),
		"../../../xml/calendar/us_nyse_holiday_calendar_specs.xml");
}

void
NYStockExchangeHolidayCalendarTest::test_special_post_2000()
{
	NYStockExchangeHolidayCalendar cal;
	cal.configure();

	CPPUNIT_ASSERT(false == cal.isBusinessDay(Date(20040611))); //reagan
	CPPUNIT_ASSERT(false == cal.isBusinessDay(Date(20070102))); //ford

	Date september11(20010911);
	for (int index = 0; index < 4; ++index)
		CPPUNIT_ASSERT(false == cal.isBusinessDay(september11 + index));
}

void
NYStockExchangeHolidayCalendarTest::test_2010()
{

	NYStockExchangeHolidayCalendar cal;

	//Load the rules
	cal.configure();

	//Compare data generated by the rules to test data loaded from xml test data file
	runCalendaTest(cal, Year(2010));
	
	CPPUNIT_ASSERT(false == cal.isBusinessDay(Date (20100101)));
	CPPUNIT_ASSERT(true == cal.isBusinessDay(Date (20101231)));

	

}

void
NYStockExchangeHolidayCalendarTest::test_2011()
{
	 

	NYStockExchangeHolidayCalendar cal;
	
	//Load the rules
	cal.configure();

	//Compare data generated by the rules to test data loaded from xml test data file
	runCalendaTest(cal, Year(2011));
	
	

}

void
NYStockExchangeHolidayCalendarTest::test_2012()
{


	NYStockExchangeHolidayCalendar cal;
	
	//Load the rules
	cal.configure();

	//Compare data generated by the rules to test data loaded from xml test data file
	runCalendaTest(cal, Year(2012));

	CPPUNIT_ASSERT(false == cal.isBusinessDay(Date(20120101)));
}



void
NYStockExchangeHolidayCalendarTest::test_special_post_2000_data_driven()
{
	CalendarSharedPtr calA = getCalendar ("NYSE Holiday Calendar");
	BusinessCalendarSharedPtr busCalA = 
		CHECKED_SHARED_POINTER_CAST(BusinessCalendar,Calendar,calA);

	CPPUNIT_ASSERT(false == busCalA->isBusinessDay(Date(20040611))); //reagan
	CPPUNIT_ASSERT(false == busCalA->isBusinessDay(Date(20070102))); //ford

	Date september11(20010911);
	for (int index = 0; index < 4; ++index)
		CPPUNIT_ASSERT(false == busCalA->isBusinessDay(september11 + index));
}

void 
NYStockExchangeHolidayCalendarTest::test_2010_data_driven()
{

	CalendarSharedPtr calA = getCalendar ("NYSE Holiday Calendar");
	BusinessCalendarSharedPtr busCalA = 
		CHECKED_SHARED_POINTER_CAST(BusinessCalendar,Calendar,calA);

	runCalendaTest(*busCalA, Year(2010));


}

void
NYStockExchangeHolidayCalendarTest::test_2011_data_driven()
{
	CalendarSharedPtr calA = getCalendar ("NYSE Holiday Calendar");
	BusinessCalendarSharedPtr busCalA = 
		CHECKED_SHARED_POINTER_CAST(BusinessCalendar,Calendar,calA);

	runCalendaTest(*busCalA, Year(2011));
}

void
NYStockExchangeHolidayCalendarTest::test_2012_data_driven()
{
	CalendarSharedPtr calA = getCalendar ("NYSE Holiday Calendar");
	BusinessCalendarSharedPtr busCalA = 
		CHECKED_SHARED_POINTER_CAST(BusinessCalendar,Calendar,calA);

	runCalendaTest(*busCalA, Year(2012));
}

} //namespace calendar
} //namespace test
} //namespace ondalear

