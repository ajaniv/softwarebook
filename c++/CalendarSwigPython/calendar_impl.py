# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_calendar_impl', [dirname(__file__)])
        except ImportError:
            import _calendar_impl
            return _calendar_impl
        if fp is not None:
            try:
                _mod = imp.load_module('_calendar_impl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _calendar_impl = swig_import_helper()
    del swig_import_helper
else:
    import _calendar_impl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _calendar_impl.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _calendar_impl.SwigPyIterator_value(self)
    def incr(self, n = 1): return _calendar_impl.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _calendar_impl.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _calendar_impl.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _calendar_impl.SwigPyIterator_equal(self, *args)
    def copy(self): return _calendar_impl.SwigPyIterator_copy(self)
    def next(self): return _calendar_impl.SwigPyIterator_next(self)
    def __next__(self): return _calendar_impl.SwigPyIterator___next__(self)
    def previous(self): return _calendar_impl.SwigPyIterator_previous(self)
    def advance(self, *args): return _calendar_impl.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _calendar_impl.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _calendar_impl.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _calendar_impl.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _calendar_impl.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _calendar_impl.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _calendar_impl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _calendar_impl.SHARED_PTR_DISOWN
class Enum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Enum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Enum, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _calendar_impl.delete_Enum
    __del__ = lambda self : None;
    def size(self): return _calendar_impl.Enum_size(self)
    def sizeInt(self): return _calendar_impl.Enum_sizeInt(self)
    def sizeString(self): return _calendar_impl.Enum_sizeString(self)
    def intToString(self, *args): return _calendar_impl.Enum_intToString(self, *args)
    def stringToInt(self, *args): return _calendar_impl.Enum_stringToInt(self, *args)
    def getIntegerValues(self): return _calendar_impl.Enum_getIntegerValues(self)
    def getStringValues(self): return _calendar_impl.Enum_getStringValues(self)
    def __init__(self): 
        this = _calendar_impl.new_Enum()
        try: self.this.append(this)
        except: self.this = this
Enum_swigregister = _calendar_impl.Enum_swigregister
Enum_swigregister(Enum)

class ConstrainedIntegerImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstrainedIntegerImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstrainedIntegerImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _calendar_impl.delete_ConstrainedIntegerImpl
    __del__ = lambda self : None;
ConstrainedIntegerImpl_swigregister = _calendar_impl.ConstrainedIntegerImpl_swigregister
ConstrainedIntegerImpl_swigregister(ConstrainedIntegerImpl)

class HolidayDurationImpl(ConstrainedIntegerImpl):
    __swig_setmethods__ = {}
    for _s in [ConstrainedIntegerImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HolidayDurationImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstrainedIntegerImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HolidayDurationImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_HolidayDurationImpl()
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args): return _calendar_impl.HolidayDurationImpl_setValue(self, *args)
    def getValue(self): return _calendar_impl.HolidayDurationImpl_getValue(self)
    __swig_destroy__ = _calendar_impl.delete_HolidayDurationImpl
    __del__ = lambda self : None;
HolidayDurationImpl_swigregister = _calendar_impl.HolidayDurationImpl_swigregister
HolidayDurationImpl_swigregister(HolidayDurationImpl)

class DatePartImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatePartImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatePartImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _calendar_impl.delete_DatePartImpl
    __del__ = lambda self : None;
    def __eq__(self, *args): return _calendar_impl.DatePartImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.DatePartImpl___ne__(self, *args)
    def __lt__(self, *args): return _calendar_impl.DatePartImpl___lt__(self, *args)
    def __le__(self, *args): return _calendar_impl.DatePartImpl___le__(self, *args)
    def __gt__(self, *args): return _calendar_impl.DatePartImpl___gt__(self, *args)
    def __ge__(self, *args): return _calendar_impl.DatePartImpl___ge__(self, *args)
    def asInteger(self): return _calendar_impl.DatePartImpl_asInteger(self)
    def add(self, *args): return _calendar_impl.DatePartImpl_add(self, *args)
    def substract(self, *args): return _calendar_impl.DatePartImpl_substract(self, *args)
    def setValue(self, *args): return _calendar_impl.DatePartImpl_setValue(self, *args)
    def getValue(self): return _calendar_impl.DatePartImpl_getValue(self)
DatePartImpl_swigregister = _calendar_impl.DatePartImpl_swigregister
DatePartImpl_swigregister(DatePartImpl)

class WeekDayImpl(Enum):
    __swig_setmethods__ = {}
    for _s in [Enum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeekDayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Enum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeekDayImpl, name)
    __repr__ = _swig_repr
    Sunday = _calendar_impl.WeekDayImpl_Sunday
    Monday = _calendar_impl.WeekDayImpl_Monday
    Tuesday = _calendar_impl.WeekDayImpl_Tuesday
    Wednesday = _calendar_impl.WeekDayImpl_Wednesday
    Thursday = _calendar_impl.WeekDayImpl_Thursday
    Friday = _calendar_impl.WeekDayImpl_Friday
    Saturday = _calendar_impl.WeekDayImpl_Saturday
    def __init__(self): 
        this = _calendar_impl.new_WeekDayImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _calendar_impl.WeekDayImpl_instance
    if _newclass:instance = staticmethod(_calendar_impl.WeekDayImpl_instance)
    def toString(self, *args): return _calendar_impl.WeekDayImpl_toString(self, *args)
    def fromString(self, *args): return _calendar_impl.WeekDayImpl_fromString(self, *args)
    def fromPartialString(self, *args): return _calendar_impl.WeekDayImpl_fromPartialString(self, *args)
    __swig_destroy__ = _calendar_impl.delete_WeekDayImpl
    __del__ = lambda self : None;
WeekDayImpl_swigregister = _calendar_impl.WeekDayImpl_swigregister
WeekDayImpl_swigregister(WeekDayImpl)

def WeekDayImpl_instance():
  return _calendar_impl.WeekDayImpl_instance()
WeekDayImpl_instance = _calendar_impl.WeekDayImpl_instance

class MonthWeekImpl(Enum):
    __swig_setmethods__ = {}
    for _s in [Enum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonthWeekImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Enum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonthWeekImpl, name)
    __repr__ = _swig_repr
    First = _calendar_impl.MonthWeekImpl_First
    Second = _calendar_impl.MonthWeekImpl_Second
    Third = _calendar_impl.MonthWeekImpl_Third
    Fourth = _calendar_impl.MonthWeekImpl_Fourth
    Fifth = _calendar_impl.MonthWeekImpl_Fifth
    def __init__(self): 
        this = _calendar_impl.new_MonthWeekImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _calendar_impl.MonthWeekImpl_instance
    if _newclass:instance = staticmethod(_calendar_impl.MonthWeekImpl_instance)
    def toString(self, *args): return _calendar_impl.MonthWeekImpl_toString(self, *args)
    def fromString(self, *args): return _calendar_impl.MonthWeekImpl_fromString(self, *args)
    def fromPartialString(self, *args): return _calendar_impl.MonthWeekImpl_fromPartialString(self, *args)
    __swig_destroy__ = _calendar_impl.delete_MonthWeekImpl
    __del__ = lambda self : None;
MonthWeekImpl_swigregister = _calendar_impl.MonthWeekImpl_swigregister
MonthWeekImpl_swigregister(MonthWeekImpl)

def MonthWeekImpl_instance():
  return _calendar_impl.MonthWeekImpl_instance()
MonthWeekImpl_instance = _calendar_impl.MonthWeekImpl_instance

class DayImpl(DatePartImpl):
    __swig_setmethods__ = {}
    for _s in [DatePartImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DatePartImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DayImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def daysBetween(self, *args): return _calendar_impl.DayImpl_daysBetween(self, *args)
    __swig_destroy__ = _calendar_impl.delete_DayImpl
    __del__ = lambda self : None;
DayImpl_swigregister = _calendar_impl.DayImpl_swigregister
DayImpl_swigregister(DayImpl)

class DayOfMonthImpl(DayImpl):
    __swig_setmethods__ = {}
    for _s in [DayImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayOfMonthImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DayImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DayOfMonthImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_DayOfMonthImpl()
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return _calendar_impl.DayOfMonthImpl___iadd__(self, *args)
    def __isub__(self, *args): return _calendar_impl.DayOfMonthImpl___isub__(self, *args)
    __swig_getmethods__["dayOfMonthMax"] = lambda x: _calendar_impl.DayOfMonthImpl_dayOfMonthMax
    if _newclass:dayOfMonthMax = staticmethod(_calendar_impl.DayOfMonthImpl_dayOfMonthMax)
    __swig_getmethods__["dayOfMonthMin"] = lambda x: _calendar_impl.DayOfMonthImpl_dayOfMonthMin
    if _newclass:dayOfMonthMin = staticmethod(_calendar_impl.DayOfMonthImpl_dayOfMonthMin)
    __swig_destroy__ = _calendar_impl.delete_DayOfMonthImpl
    __del__ = lambda self : None;
DayOfMonthImpl_swigregister = _calendar_impl.DayOfMonthImpl_swigregister
DayOfMonthImpl_swigregister(DayOfMonthImpl)

def DayOfMonthImpl_dayOfMonthMax():
  return _calendar_impl.DayOfMonthImpl_dayOfMonthMax()
DayOfMonthImpl_dayOfMonthMax = _calendar_impl.DayOfMonthImpl_dayOfMonthMax

def DayOfMonthImpl_dayOfMonthMin():
  return _calendar_impl.DayOfMonthImpl_dayOfMonthMin()
DayOfMonthImpl_dayOfMonthMin = _calendar_impl.DayOfMonthImpl_dayOfMonthMin

class MonthImpl(DatePartImpl):
    __swig_setmethods__ = {}
    for _s in [DatePartImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonthImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DatePartImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonthImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_MonthImpl()
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return _calendar_impl.MonthImpl___iadd__(self, *args)
    def __isub__(self, *args): return _calendar_impl.MonthImpl___isub__(self, *args)
    def monthsBetween(self, *args): return _calendar_impl.MonthImpl_monthsBetween(self, *args)
    __swig_getmethods__["monthMax"] = lambda x: _calendar_impl.MonthImpl_monthMax
    if _newclass:monthMax = staticmethod(_calendar_impl.MonthImpl_monthMax)
    __swig_getmethods__["monthMin"] = lambda x: _calendar_impl.MonthImpl_monthMin
    if _newclass:monthMin = staticmethod(_calendar_impl.MonthImpl_monthMin)
    __swig_destroy__ = _calendar_impl.delete_MonthImpl
    __del__ = lambda self : None;
MonthImpl_swigregister = _calendar_impl.MonthImpl_swigregister
MonthImpl_swigregister(MonthImpl)

def MonthImpl_monthMax():
  return _calendar_impl.MonthImpl_monthMax()
MonthImpl_monthMax = _calendar_impl.MonthImpl_monthMax

def MonthImpl_monthMin():
  return _calendar_impl.MonthImpl_monthMin()
MonthImpl_monthMin = _calendar_impl.MonthImpl_monthMin

class YearImpl(DatePartImpl):
    __swig_setmethods__ = {}
    for _s in [DatePartImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YearImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DatePartImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, YearImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_YearImpl()
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return _calendar_impl.YearImpl___iadd__(self, *args)
    def __isub__(self, *args): return _calendar_impl.YearImpl___isub__(self, *args)
    def isLeapYear(self): return _calendar_impl.YearImpl_isLeapYear(self)
    def yearsBetween(self, *args): return _calendar_impl.YearImpl_yearsBetween(self, *args)
    __swig_getmethods__["yearMax"] = lambda x: _calendar_impl.YearImpl_yearMax
    if _newclass:yearMax = staticmethod(_calendar_impl.YearImpl_yearMax)
    __swig_getmethods__["yearMin"] = lambda x: _calendar_impl.YearImpl_yearMin
    if _newclass:yearMin = staticmethod(_calendar_impl.YearImpl_yearMin)
    __swig_destroy__ = _calendar_impl.delete_YearImpl
    __del__ = lambda self : None;
YearImpl_swigregister = _calendar_impl.YearImpl_swigregister
YearImpl_swigregister(YearImpl)

def YearImpl_yearMax():
  return _calendar_impl.YearImpl_yearMax()
YearImpl_yearMax = _calendar_impl.YearImpl_yearMax

def YearImpl_yearMin():
  return _calendar_impl.YearImpl_yearMin()
YearImpl_yearMin = _calendar_impl.YearImpl_yearMin

class DaysImpl(DayImpl):
    __swig_setmethods__ = {}
    for _s in [DayImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DaysImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DayImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DaysImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_DaysImpl()
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return _calendar_impl.DaysImpl___iadd__(self, *args)
    def __isub__(self, *args): return _calendar_impl.DaysImpl___isub__(self, *args)
    __swig_getmethods__["daysMax"] = lambda x: _calendar_impl.DaysImpl_daysMax
    if _newclass:daysMax = staticmethod(_calendar_impl.DaysImpl_daysMax)
    __swig_getmethods__["daysMin"] = lambda x: _calendar_impl.DaysImpl_daysMin
    if _newclass:daysMin = staticmethod(_calendar_impl.DaysImpl_daysMin)
    __swig_destroy__ = _calendar_impl.delete_DaysImpl
    __del__ = lambda self : None;
DaysImpl_swigregister = _calendar_impl.DaysImpl_swigregister
DaysImpl_swigregister(DaysImpl)

def DaysImpl_daysMax():
  return _calendar_impl.DaysImpl_daysMax()
DaysImpl_daysMax = _calendar_impl.DaysImpl_daysMax

def DaysImpl_daysMin():
  return _calendar_impl.DaysImpl_daysMin()
DaysImpl_daysMin = _calendar_impl.DaysImpl_daysMin

class DateImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _calendar_impl.new_DateImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _calendar_impl.delete_DateImpl
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _calendar_impl.DateImpl_copyFrom(self, *args)
    def daysBetween(self, *args): return _calendar_impl.DateImpl_daysBetween(self, *args)
    def asInteger(self): return _calendar_impl.DateImpl_asInteger(self)
    def yearAsInteger(self): return _calendar_impl.DateImpl_yearAsInteger(self)
    def isLeapYear(self): return _calendar_impl.DateImpl_isLeapYear(self)
    def monthAsInteger(self): return _calendar_impl.DateImpl_monthAsInteger(self)
    def dayOfMonthAsInteger(self): return _calendar_impl.DateImpl_dayOfMonthAsInteger(self)
    def weekDayAsString(self): return _calendar_impl.DateImpl_weekDayAsString(self)
    def weekNumber(self): return _calendar_impl.DateImpl_weekNumber(self)
    def modJulianDay(self): return _calendar_impl.DateImpl_modJulianDay(self)
    def julianDay(self): return _calendar_impl.DateImpl_julianDay(self)
    def __eq__(self, *args): return _calendar_impl.DateImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.DateImpl___ne__(self, *args)
    def __lt__(self, *args): return _calendar_impl.DateImpl___lt__(self, *args)
    def __le__(self, *args): return _calendar_impl.DateImpl___le__(self, *args)
    def __gt__(self, *args): return _calendar_impl.DateImpl___gt__(self, *args)
    def __ge__(self, *args): return _calendar_impl.DateImpl___ge__(self, *args)
    def __iadd__(self, *args): return _calendar_impl.DateImpl___iadd__(self, *args)
    def addDay(self, *args): return _calendar_impl.DateImpl_addDay(self, *args)
    def addWeek(self, *args): return _calendar_impl.DateImpl_addWeek(self, *args)
    def addMonth(self, *args): return _calendar_impl.DateImpl_addMonth(self, *args)
    def addYear(self, *args): return _calendar_impl.DateImpl_addYear(self, *args)
    def __isub__(self, *args): return _calendar_impl.DateImpl___isub__(self, *args)
    def subtractDay(self, *args): return _calendar_impl.DateImpl_subtractDay(self, *args)
    def subtractWeek(self, *args): return _calendar_impl.DateImpl_subtractWeek(self, *args)
    def subtractMonth(self, *args): return _calendar_impl.DateImpl_subtractMonth(self, *args)
    def subtractYear(self, *args): return _calendar_impl.DateImpl_subtractYear(self, *args)
    __swig_getmethods__["maxDate"] = lambda x: _calendar_impl.DateImpl_maxDate
    if _newclass:maxDate = staticmethod(_calendar_impl.DateImpl_maxDate)
    __swig_getmethods__["minDate"] = lambda x: _calendar_impl.DateImpl_minDate
    if _newclass:minDate = staticmethod(_calendar_impl.DateImpl_minDate)
DateImpl_swigregister = _calendar_impl.DateImpl_swigregister
DateImpl_swigregister(DateImpl)

def DateImpl_maxDate():
  return _calendar_impl.DateImpl_maxDate()
DateImpl_maxDate = _calendar_impl.DateImpl_maxDate

def DateImpl_minDate():
  return _calendar_impl.DateImpl_minDate()
DateImpl_minDate = _calendar_impl.DateImpl_minDate

class CalendarRuleImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalendarRuleImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalendarRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_CalendarRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _calendar_impl.delete_CalendarRuleImpl
    __del__ = lambda self : None;
    __swig_getmethods__["createCalendarRuleSmartPtr"] = lambda x: _calendar_impl.CalendarRuleImpl_createCalendarRuleSmartPtr
    if _newclass:createCalendarRuleSmartPtr = staticmethod(_calendar_impl.CalendarRuleImpl_createCalendarRuleSmartPtr)
    def copyFrom(self, *args): return _calendar_impl.CalendarRuleImpl_copyFrom(self, *args)
    def className(self): return _calendar_impl.CalendarRuleImpl_className(self)
    def __eq__(self, *args): return _calendar_impl.CalendarRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.CalendarRuleImpl___ne__(self, *args)
    def setRuleName(self, *args): return _calendar_impl.CalendarRuleImpl_setRuleName(self, *args)
    def setHolidayName(self, *args): return _calendar_impl.CalendarRuleImpl_setHolidayName(self, *args)
    def setEnabledFlag(self, *args): return _calendar_impl.CalendarRuleImpl_setEnabledFlag(self, *args)
    def setStartEffectiveDate(self, *args): return _calendar_impl.CalendarRuleImpl_setStartEffectiveDate(self, *args)
    def setEndEffectiveDate(self, *args): return _calendar_impl.CalendarRuleImpl_setEndEffectiveDate(self, *args)
    def getRuleName(self): return _calendar_impl.CalendarRuleImpl_getRuleName(self)
    def getHolidayName(self): return _calendar_impl.CalendarRuleImpl_getHolidayName(self)
    def isEnabled(self): return _calendar_impl.CalendarRuleImpl_isEnabled(self)
    def getCanCalcWeekendFlag(self): return _calendar_impl.CalendarRuleImpl_getCanCalcWeekendFlag(self)
    def getCanCalcDateFlag(self): return _calendar_impl.CalendarRuleImpl_getCanCalcDateFlag(self)
    def getStartEffectiveDate(self): return _calendar_impl.CalendarRuleImpl_getStartEffectiveDate(self)
    def getEndEffectiveDate(self): return _calendar_impl.CalendarRuleImpl_getEndEffectiveDate(self)
    def getEnabledFlag(self): return _calendar_impl.CalendarRuleImpl_getEnabledFlag(self)
CalendarRuleImpl_swigregister = _calendar_impl.CalendarRuleImpl_swigregister
CalendarRuleImpl_swigregister(CalendarRuleImpl)

def CalendarRuleImpl_createCalendarRuleSmartPtr():
  return _calendar_impl.CalendarRuleImpl_createCalendarRuleSmartPtr()
CalendarRuleImpl_createCalendarRuleSmartPtr = _calendar_impl.CalendarRuleImpl_createCalendarRuleSmartPtr

class WeekendRuleImpl(CalendarRuleImpl):
    __swig_setmethods__ = {}
    for _s in [CalendarRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeekendRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [CalendarRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeekendRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_WeekendRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.WeekendRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.WeekendRuleImpl___ne__(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.WeekendRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.WeekendRuleImpl_downCast)
    def weekendDaysAsStringSet(self): return _calendar_impl.WeekendRuleImpl_weekendDaysAsStringSet(self)
    def addDay(self, *args): return _calendar_impl.WeekendRuleImpl_addDay(self, *args)
    def removeDay(self, *args): return _calendar_impl.WeekendRuleImpl_removeDay(self, *args)
    def weekendsForYear(self, *args): return _calendar_impl.WeekendRuleImpl_weekendsForYear(self, *args)
    def isWeekend(self, *args): return _calendar_impl.WeekendRuleImpl_isWeekend(self, *args)
    def isWeekendForYear(self, *args): return _calendar_impl.WeekendRuleImpl_isWeekendForYear(self, *args)
    def size(self): return _calendar_impl.WeekendRuleImpl_size(self)
    def isEmpty(self): return _calendar_impl.WeekendRuleImpl_isEmpty(self)
    def clone(self): return _calendar_impl.WeekendRuleImpl_clone(self)
    def copyFrom(self, *args): return _calendar_impl.WeekendRuleImpl_copyFrom(self, *args)
    __swig_destroy__ = _calendar_impl.delete_WeekendRuleImpl
    __del__ = lambda self : None;
WeekendRuleImpl_swigregister = _calendar_impl.WeekendRuleImpl_swigregister
WeekendRuleImpl_swigregister(WeekendRuleImpl)

def WeekendRuleImpl_downCast(*args):
  return _calendar_impl.WeekendRuleImpl_downCast(*args)
WeekendRuleImpl_downCast = _calendar_impl.WeekendRuleImpl_downCast

class DateRuleImpl(CalendarRuleImpl):
    __swig_setmethods__ = {}
    for _s in [CalendarRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [CalendarRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DateRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_DateRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.DateRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.DateRuleImpl___ne__(self, *args)
    def setWeekendRule(self, *args): return _calendar_impl.DateRuleImpl_setWeekendRule(self, *args)
    def setHolidayDuration(self, *args): return _calendar_impl.DateRuleImpl_setHolidayDuration(self, *args)
    def setIgnoreFridayMonthEndFlag(self, *args): return _calendar_impl.DateRuleImpl_setIgnoreFridayMonthEndFlag(self, *args)
    def setAddNextYearFlag(self, *args): return _calendar_impl.DateRuleImpl_setAddNextYearFlag(self, *args)
    def setAddPriorYearFlag(self, *args): return _calendar_impl.DateRuleImpl_setAddPriorYearFlag(self, *args)
    def setWeekendAdjustment(self, *args): return _calendar_impl.DateRuleImpl_setWeekendAdjustment(self, *args)
    def getWeekendAdjustment(self): return _calendar_impl.DateRuleImpl_getWeekendAdjustment(self)
    def weekendDaysAsStringSet(self): return _calendar_impl.DateRuleImpl_weekendDaysAsStringSet(self)
    def getWeekendRule(self): return _calendar_impl.DateRuleImpl_getWeekendRule(self)
    def getHolidayDuration(self): return _calendar_impl.DateRuleImpl_getHolidayDuration(self)
    def getIgnoreFridayMonthEndFlag(self): return _calendar_impl.DateRuleImpl_getIgnoreFridayMonthEndFlag(self)
    def getAddNextYearFlag(self): return _calendar_impl.DateRuleImpl_getAddNextYearFlag(self)
    def getAddPriorYearFlag(self): return _calendar_impl.DateRuleImpl_getAddPriorYearFlag(self)
    def calcDate(self, *args): return _calendar_impl.DateRuleImpl_calcDate(self, *args)
    def skipDate(self, *args): return _calendar_impl.DateRuleImpl_skipDate(self, *args)
    def setExceptionsForYear(self, *args): return _calendar_impl.DateRuleImpl_setExceptionsForYear(self, *args)
    def getExceptionsForYear(self, *args): return _calendar_impl.DateRuleImpl_getExceptionsForYear(self, *args)
    def copyFrom(self, *args): return _calendar_impl.DateRuleImpl_copyFrom(self, *args)
    __swig_destroy__ = _calendar_impl.delete_DateRuleImpl
    __del__ = lambda self : None;
DateRuleImpl_swigregister = _calendar_impl.DateRuleImpl_swigregister
DateRuleImpl_swigregister(DateRuleImpl)

class SpecificDateRuleImpl(DateRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DateRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecificDateRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DateRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecificDateRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_SpecificDateRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.SpecificDateRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.SpecificDateRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.SpecificDateRuleImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.SpecificDateRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.SpecificDateRuleImpl_downCast)
    def setSpecifiedDate(self, *args): return _calendar_impl.SpecificDateRuleImpl_setSpecifiedDate(self, *args)
    def getSpecifiedDate(self): return _calendar_impl.SpecificDateRuleImpl_getSpecifiedDate(self)
    def calcDate(self, *args): return _calendar_impl.SpecificDateRuleImpl_calcDate(self, *args)
    __swig_destroy__ = _calendar_impl.delete_SpecificDateRuleImpl
    __del__ = lambda self : None;
SpecificDateRuleImpl_swigregister = _calendar_impl.SpecificDateRuleImpl_swigregister
SpecificDateRuleImpl_swigregister(SpecificDateRuleImpl)

def SpecificDateRuleImpl_downCast(*args):
  return _calendar_impl.SpecificDateRuleImpl_downCast(*args)
SpecificDateRuleImpl_downCast = _calendar_impl.SpecificDateRuleImpl_downCast

class MonthDayRuleImpl(DateRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DateRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonthDayRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DateRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonthDayRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_MonthDayRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.MonthDayRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.MonthDayRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.MonthDayRuleImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.MonthDayRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.MonthDayRuleImpl_downCast)
    def setMonth(self, *args): return _calendar_impl.MonthDayRuleImpl_setMonth(self, *args)
    def getMonth(self): return _calendar_impl.MonthDayRuleImpl_getMonth(self)
    def setDayOfMonth(self, *args): return _calendar_impl.MonthDayRuleImpl_setDayOfMonth(self, *args)
    def getDayOfMonth(self): return _calendar_impl.MonthDayRuleImpl_getDayOfMonth(self)
    def calcDate(self, *args): return _calendar_impl.MonthDayRuleImpl_calcDate(self, *args)
    __swig_destroy__ = _calendar_impl.delete_MonthDayRuleImpl
    __del__ = lambda self : None;
MonthDayRuleImpl_swigregister = _calendar_impl.MonthDayRuleImpl_swigregister
MonthDayRuleImpl_swigregister(MonthDayRuleImpl)

def MonthDayRuleImpl_downCast(*args):
  return _calendar_impl.MonthDayRuleImpl_downCast(*args)
MonthDayRuleImpl_downCast = _calendar_impl.MonthDayRuleImpl_downCast

class MonthWeekDayRuleImpl(DateRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DateRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonthWeekDayRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DateRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonthWeekDayRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_MonthWeekDayRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.MonthWeekDayRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.MonthWeekDayRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.MonthWeekDayRuleImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.MonthWeekDayRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.MonthWeekDayRuleImpl_downCast)
    def setMonth(self, *args): return _calendar_impl.MonthWeekDayRuleImpl_setMonth(self, *args)
    def getMonth(self): return _calendar_impl.MonthWeekDayRuleImpl_getMonth(self)
    def setMonthWeek(self, *args): return _calendar_impl.MonthWeekDayRuleImpl_setMonthWeek(self, *args)
    def getMonthWeek(self): return _calendar_impl.MonthWeekDayRuleImpl_getMonthWeek(self)
    def setWeekDay(self, *args): return _calendar_impl.MonthWeekDayRuleImpl_setWeekDay(self, *args)
    def getWeekDay(self): return _calendar_impl.MonthWeekDayRuleImpl_getWeekDay(self)
    def calcDate(self, *args): return _calendar_impl.MonthWeekDayRuleImpl_calcDate(self, *args)
    __swig_destroy__ = _calendar_impl.delete_MonthWeekDayRuleImpl
    __del__ = lambda self : None;
MonthWeekDayRuleImpl_swigregister = _calendar_impl.MonthWeekDayRuleImpl_swigregister
MonthWeekDayRuleImpl_swigregister(MonthWeekDayRuleImpl)

def MonthWeekDayRuleImpl_downCast(*args):
  return _calendar_impl.MonthWeekDayRuleImpl_downCast(*args)
MonthWeekDayRuleImpl_downCast = _calendar_impl.MonthWeekDayRuleImpl_downCast

class LastDayMonthRuleImpl(DateRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DateRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastDayMonthRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DateRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastDayMonthRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_LastDayMonthRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.LastDayMonthRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.LastDayMonthRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.LastDayMonthRuleImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.LastDayMonthRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.LastDayMonthRuleImpl_downCast)
    def setMonth(self, *args): return _calendar_impl.LastDayMonthRuleImpl_setMonth(self, *args)
    def getMonth(self): return _calendar_impl.LastDayMonthRuleImpl_getMonth(self)
    def setWeekDay(self, *args): return _calendar_impl.LastDayMonthRuleImpl_setWeekDay(self, *args)
    def getWeekDay(self): return _calendar_impl.LastDayMonthRuleImpl_getWeekDay(self)
    def calcDate(self, *args): return _calendar_impl.LastDayMonthRuleImpl_calcDate(self, *args)
    __swig_destroy__ = _calendar_impl.delete_LastDayMonthRuleImpl
    __del__ = lambda self : None;
LastDayMonthRuleImpl_swigregister = _calendar_impl.LastDayMonthRuleImpl_swigregister
LastDayMonthRuleImpl_swigregister(LastDayMonthRuleImpl)

def LastDayMonthRuleImpl_downCast(*args):
  return _calendar_impl.LastDayMonthRuleImpl_downCast(*args)
LastDayMonthRuleImpl_downCast = _calendar_impl.LastDayMonthRuleImpl_downCast

class FirstDayMonthRuleImpl(DateRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DateRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirstDayMonthRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DateRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirstDayMonthRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_FirstDayMonthRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.FirstDayMonthRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.FirstDayMonthRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.FirstDayMonthRuleImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.FirstDayMonthRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.FirstDayMonthRuleImpl_downCast)
    def setMonth(self, *args): return _calendar_impl.FirstDayMonthRuleImpl_setMonth(self, *args)
    def getMonth(self): return _calendar_impl.FirstDayMonthRuleImpl_getMonth(self)
    def setWeekDay(self, *args): return _calendar_impl.FirstDayMonthRuleImpl_setWeekDay(self, *args)
    def getWeekDay(self): return _calendar_impl.FirstDayMonthRuleImpl_getWeekDay(self)
    def calcDate(self, *args): return _calendar_impl.FirstDayMonthRuleImpl_calcDate(self, *args)
    __swig_destroy__ = _calendar_impl.delete_FirstDayMonthRuleImpl
    __del__ = lambda self : None;
FirstDayMonthRuleImpl_swigregister = _calendar_impl.FirstDayMonthRuleImpl_swigregister
FirstDayMonthRuleImpl_swigregister(FirstDayMonthRuleImpl)

def FirstDayMonthRuleImpl_downCast(*args):
  return _calendar_impl.FirstDayMonthRuleImpl_downCast(*args)
FirstDayMonthRuleImpl_downCast = _calendar_impl.FirstDayMonthRuleImpl_downCast

class DerivedRuleImpl(DateRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DateRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DateRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_DerivedRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.DerivedRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.DerivedRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.DerivedRuleImpl_copyFrom(self, *args)
    def setUnderlying(self, *args): return _calendar_impl.DerivedRuleImpl_setUnderlying(self, *args)
    def getUnderlying(self): return _calendar_impl.DerivedRuleImpl_getUnderlying(self)
    __swig_destroy__ = _calendar_impl.delete_DerivedRuleImpl
    __del__ = lambda self : None;
DerivedRuleImpl_swigregister = _calendar_impl.DerivedRuleImpl_swigregister
DerivedRuleImpl_swigregister(DerivedRuleImpl)

class DaysOffsetRuleImpl(DerivedRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DerivedRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DaysOffsetRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DerivedRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DaysOffsetRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_DaysOffsetRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.DaysOffsetRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.DaysOffsetRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.DaysOffsetRuleImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.DaysOffsetRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.DaysOffsetRuleImpl_downCast)
    def setOffset(self, *args): return _calendar_impl.DaysOffsetRuleImpl_setOffset(self, *args)
    def getOffset(self): return _calendar_impl.DaysOffsetRuleImpl_getOffset(self)
    def calcDate(self, *args): return _calendar_impl.DaysOffsetRuleImpl_calcDate(self, *args)
    __swig_destroy__ = _calendar_impl.delete_DaysOffsetRuleImpl
    __del__ = lambda self : None;
DaysOffsetRuleImpl_swigregister = _calendar_impl.DaysOffsetRuleImpl_swigregister
DaysOffsetRuleImpl_swigregister(DaysOffsetRuleImpl)

def DaysOffsetRuleImpl_downCast(*args):
  return _calendar_impl.DaysOffsetRuleImpl_downCast(*args)
DaysOffsetRuleImpl_downCast = _calendar_impl.DaysOffsetRuleImpl_downCast

class FirstDayAtOrBeforeRuleImpl(DerivedRuleImpl):
    __swig_setmethods__ = {}
    for _s in [DerivedRuleImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirstDayAtOrBeforeRuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DerivedRuleImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirstDayAtOrBeforeRuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_FirstDayAtOrBeforeRuleImpl()
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _calendar_impl.FirstDayAtOrBeforeRuleImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.FirstDayAtOrBeforeRuleImpl___ne__(self, *args)
    def copyFrom(self, *args): return _calendar_impl.FirstDayAtOrBeforeRuleImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.FirstDayAtOrBeforeRuleImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.FirstDayAtOrBeforeRuleImpl_downCast)
    def setWeekDay(self, *args): return _calendar_impl.FirstDayAtOrBeforeRuleImpl_setWeekDay(self, *args)
    def getWeekDay(self): return _calendar_impl.FirstDayAtOrBeforeRuleImpl_getWeekDay(self)
    def setStartAtFlag(self, *args): return _calendar_impl.FirstDayAtOrBeforeRuleImpl_setStartAtFlag(self, *args)
    def getStartAtFlag(self): return _calendar_impl.FirstDayAtOrBeforeRuleImpl_getStartAtFlag(self)
    def calcDate(self, *args): return _calendar_impl.FirstDayAtOrBeforeRuleImpl_calcDate(self, *args)
    __swig_destroy__ = _calendar_impl.delete_FirstDayAtOrBeforeRuleImpl
    __del__ = lambda self : None;
FirstDayAtOrBeforeRuleImpl_swigregister = _calendar_impl.FirstDayAtOrBeforeRuleImpl_swigregister
FirstDayAtOrBeforeRuleImpl_swigregister(FirstDayAtOrBeforeRuleImpl)

def FirstDayAtOrBeforeRuleImpl_downCast(*args):
  return _calendar_impl.FirstDayAtOrBeforeRuleImpl_downCast(*args)
FirstDayAtOrBeforeRuleImpl_downCast = _calendar_impl.FirstDayAtOrBeforeRuleImpl_downCast

class CalendarImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalendarImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalendarImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_CalendarImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _calendar_impl.delete_CalendarImpl
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _calendar_impl.CalendarImpl_copyFrom(self, *args)
    def className(self): return _calendar_impl.CalendarImpl_className(self)
    def __eq__(self, *args): return _calendar_impl.CalendarImpl___eq__(self, *args)
    def __ne__(self, *args): return _calendar_impl.CalendarImpl___ne__(self, *args)
    def getCalendarName(self): return _calendar_impl.CalendarImpl_getCalendarName(self)
    def setCalendarName(self, *args): return _calendar_impl.CalendarImpl_setCalendarName(self, *args)
    def addRule(self, *args): return _calendar_impl.CalendarImpl_addRule(self, *args)
    def removeRule(self, *args): return _calendar_impl.CalendarImpl_removeRule(self, *args)
    def findRule(self, *args): return _calendar_impl.CalendarImpl_findRule(self, *args)
    def rules(self): return _calendar_impl.CalendarImpl_rules(self)
    def isEmpty(self): return _calendar_impl.CalendarImpl_isEmpty(self)
    def size(self): return _calendar_impl.CalendarImpl_size(self)
    def ruleExists(self, *args): return _calendar_impl.CalendarImpl_ruleExists(self, *args)
CalendarImpl_swigregister = _calendar_impl.CalendarImpl_swigregister
CalendarImpl_swigregister(CalendarImpl)

class BusinessCalendarImpl(CalendarImpl):
    __swig_setmethods__ = {}
    for _s in [CalendarImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BusinessCalendarImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [CalendarImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BusinessCalendarImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_BusinessCalendarImpl()
        try: self.this.append(this)
        except: self.this = this
    def copyFrom(self, *args): return _calendar_impl.BusinessCalendarImpl_copyFrom(self, *args)
    __swig_getmethods__["downCast"] = lambda x: _calendar_impl.BusinessCalendarImpl_downCast
    if _newclass:downCast = staticmethod(_calendar_impl.BusinessCalendarImpl_downCast)
    def isBusinessDay(self, *args): return _calendar_impl.BusinessCalendarImpl_isBusinessDay(self, *args)
    def isHoliday(self, *args): return _calendar_impl.BusinessCalendarImpl_isHoliday(self, *args)
    def isEndOfMonth(self, *args): return _calendar_impl.BusinessCalendarImpl_isEndOfMonth(self, *args)
    def endOfMonth(self, *args): return _calendar_impl.BusinessCalendarImpl_endOfMonth(self, *args)
    def isWeekend(self, *args): return _calendar_impl.BusinessCalendarImpl_isWeekend(self, *args)
    def isWeekendForYear(self, *args): return _calendar_impl.BusinessCalendarImpl_isWeekendForYear(self, *args)
    def isWeekendForDate(self, *args): return _calendar_impl.BusinessCalendarImpl_isWeekendForDate(self, *args)
    def addRule(self, *args): return _calendar_impl.BusinessCalendarImpl_addRule(self, *args)
    def removeRule(self, *args): return _calendar_impl.BusinessCalendarImpl_removeRule(self, *args)
    def add(self, *args): return _calendar_impl.BusinessCalendarImpl_add(self, *args)
    def clone(self): return _calendar_impl.BusinessCalendarImpl_clone(self)
    def businessDays(self, *args): return _calendar_impl.BusinessCalendarImpl_businessDays(self, *args)
    def holidays(self, *args): return _calendar_impl.BusinessCalendarImpl_holidays(self, *args)
    def weekends(self, *args): return _calendar_impl.BusinessCalendarImpl_weekends(self, *args)
    def holidaysAndWeekends(self, *args): return _calendar_impl.BusinessCalendarImpl_holidaysAndWeekends(self, *args)
    def holidaysForYear(self, *args): return _calendar_impl.BusinessCalendarImpl_holidaysForYear(self, *args)
    def weekendsForYear(self, *args): return _calendar_impl.BusinessCalendarImpl_weekendsForYear(self, *args)
    __swig_destroy__ = _calendar_impl.delete_BusinessCalendarImpl
    __del__ = lambda self : None;
BusinessCalendarImpl_swigregister = _calendar_impl.BusinessCalendarImpl_swigregister
BusinessCalendarImpl_swigregister(BusinessCalendarImpl)

def BusinessCalendarImpl_downCast(*args):
  return _calendar_impl.BusinessCalendarImpl_downCast(*args)
BusinessCalendarImpl_downCast = _calendar_impl.BusinessCalendarImpl_downCast

class CalendarCacheImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalendarCacheImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalendarCacheImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _calendar_impl.new_CalendarCacheImpl()
        try: self.this.append(this)
        except: self.this = this
    def getCacheName(self): return _calendar_impl.CalendarCacheImpl_getCacheName(self)
    def setCacheName(self, *args): return _calendar_impl.CalendarCacheImpl_setCacheName(self, *args)
    def add(self, *args): return _calendar_impl.CalendarCacheImpl_add(self, *args)
    def remove(self, *args): return _calendar_impl.CalendarCacheImpl_remove(self, *args)
    def find(self, *args): return _calendar_impl.CalendarCacheImpl_find(self, *args)
    def isEmpty(self): return _calendar_impl.CalendarCacheImpl_isEmpty(self)
    def size(self): return _calendar_impl.CalendarCacheImpl_size(self)
    def calendarExists(self, *args): return _calendar_impl.CalendarCacheImpl_calendarExists(self, *args)
    def merge(self, *args): return _calendar_impl.CalendarCacheImpl_merge(self, *args)
    def begin(self): return _calendar_impl.CalendarCacheImpl_begin(self)
    def end(self): return _calendar_impl.CalendarCacheImpl_end(self)
    def calendarNames(self): return _calendar_impl.CalendarCacheImpl_calendarNames(self)
    __swig_destroy__ = _calendar_impl.delete_CalendarCacheImpl
    __del__ = lambda self : None;
CalendarCacheImpl_swigregister = _calendar_impl.CalendarCacheImpl_swigregister
CalendarCacheImpl_swigregister(CalendarCacheImpl)

class DataLoaderImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataLoaderImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataLoaderImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["loadFromXmlFile"] = lambda x: _calendar_impl.DataLoaderImpl_loadFromXmlFile
    if _newclass:loadFromXmlFile = staticmethod(_calendar_impl.DataLoaderImpl_loadFromXmlFile)
    __swig_destroy__ = _calendar_impl.delete_DataLoaderImpl
    __del__ = lambda self : None;
DataLoaderImpl_swigregister = _calendar_impl.DataLoaderImpl_swigregister
DataLoaderImpl_swigregister(DataLoaderImpl)

def DataLoaderImpl_loadFromXmlFile(*args):
  return _calendar_impl.DataLoaderImpl_loadFromXmlFile(*args)
DataLoaderImpl_loadFromXmlFile = _calendar_impl.DataLoaderImpl_loadFromXmlFile

class VectorDateImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDateImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDateImpl, name)
    __repr__ = _swig_repr
    def iterator(self): return _calendar_impl.VectorDateImpl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _calendar_impl.VectorDateImpl___nonzero__(self)
    def __bool__(self): return _calendar_impl.VectorDateImpl___bool__(self)
    def __len__(self): return _calendar_impl.VectorDateImpl___len__(self)
    def pop(self): return _calendar_impl.VectorDateImpl_pop(self)
    def __getslice__(self, *args): return _calendar_impl.VectorDateImpl___getslice__(self, *args)
    def __setslice__(self, *args): return _calendar_impl.VectorDateImpl___setslice__(self, *args)
    def __delslice__(self, *args): return _calendar_impl.VectorDateImpl___delslice__(self, *args)
    def __delitem__(self, *args): return _calendar_impl.VectorDateImpl___delitem__(self, *args)
    def __getitem__(self, *args): return _calendar_impl.VectorDateImpl___getitem__(self, *args)
    def __setitem__(self, *args): return _calendar_impl.VectorDateImpl___setitem__(self, *args)
    def append(self, *args): return _calendar_impl.VectorDateImpl_append(self, *args)
    def empty(self): return _calendar_impl.VectorDateImpl_empty(self)
    def size(self): return _calendar_impl.VectorDateImpl_size(self)
    def clear(self): return _calendar_impl.VectorDateImpl_clear(self)
    def swap(self, *args): return _calendar_impl.VectorDateImpl_swap(self, *args)
    def get_allocator(self): return _calendar_impl.VectorDateImpl_get_allocator(self)
    def begin(self): return _calendar_impl.VectorDateImpl_begin(self)
    def end(self): return _calendar_impl.VectorDateImpl_end(self)
    def rbegin(self): return _calendar_impl.VectorDateImpl_rbegin(self)
    def rend(self): return _calendar_impl.VectorDateImpl_rend(self)
    def pop_back(self): return _calendar_impl.VectorDateImpl_pop_back(self)
    def erase(self, *args): return _calendar_impl.VectorDateImpl_erase(self, *args)
    def __init__(self, *args): 
        this = _calendar_impl.new_VectorDateImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _calendar_impl.VectorDateImpl_push_back(self, *args)
    def front(self): return _calendar_impl.VectorDateImpl_front(self)
    def back(self): return _calendar_impl.VectorDateImpl_back(self)
    def assign(self, *args): return _calendar_impl.VectorDateImpl_assign(self, *args)
    def resize(self, *args): return _calendar_impl.VectorDateImpl_resize(self, *args)
    def insert(self, *args): return _calendar_impl.VectorDateImpl_insert(self, *args)
    def reserve(self, *args): return _calendar_impl.VectorDateImpl_reserve(self, *args)
    def capacity(self): return _calendar_impl.VectorDateImpl_capacity(self)
    __swig_destroy__ = _calendar_impl.delete_VectorDateImpl
    __del__ = lambda self : None;
VectorDateImpl_swigregister = _calendar_impl.VectorDateImpl_swigregister
VectorDateImpl_swigregister(VectorDateImpl)

class SetDateImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetDateImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetDateImpl, name)
    __repr__ = _swig_repr
    def iterator(self): return _calendar_impl.SetDateImpl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _calendar_impl.SetDateImpl___nonzero__(self)
    def __bool__(self): return _calendar_impl.SetDateImpl___bool__(self)
    def __len__(self): return _calendar_impl.SetDateImpl___len__(self)
    def append(self, *args): return _calendar_impl.SetDateImpl_append(self, *args)
    def __contains__(self, *args): return _calendar_impl.SetDateImpl___contains__(self, *args)
    def __getitem__(self, *args): return _calendar_impl.SetDateImpl___getitem__(self, *args)
    def __init__(self, *args): 
        this = _calendar_impl.new_SetDateImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _calendar_impl.SetDateImpl_empty(self)
    def size(self): return _calendar_impl.SetDateImpl_size(self)
    def clear(self): return _calendar_impl.SetDateImpl_clear(self)
    def swap(self, *args): return _calendar_impl.SetDateImpl_swap(self, *args)
    def count(self, *args): return _calendar_impl.SetDateImpl_count(self, *args)
    def begin(self): return _calendar_impl.SetDateImpl_begin(self)
    def end(self): return _calendar_impl.SetDateImpl_end(self)
    def rbegin(self): return _calendar_impl.SetDateImpl_rbegin(self)
    def rend(self): return _calendar_impl.SetDateImpl_rend(self)
    def erase(self, *args): return _calendar_impl.SetDateImpl_erase(self, *args)
    def find(self, *args): return _calendar_impl.SetDateImpl_find(self, *args)
    def lower_bound(self, *args): return _calendar_impl.SetDateImpl_lower_bound(self, *args)
    def upper_bound(self, *args): return _calendar_impl.SetDateImpl_upper_bound(self, *args)
    def equal_range(self, *args): return _calendar_impl.SetDateImpl_equal_range(self, *args)
    def insert(self, *args): return _calendar_impl.SetDateImpl_insert(self, *args)
    __swig_destroy__ = _calendar_impl.delete_SetDateImpl
    __del__ = lambda self : None;
SetDateImpl_swigregister = _calendar_impl.SetDateImpl_swigregister
SetDateImpl_swigregister(SetDateImpl)

class SetWeekDayImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetWeekDayImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetWeekDayImpl, name)
    __repr__ = _swig_repr
    def iterator(self): return _calendar_impl.SetWeekDayImpl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _calendar_impl.SetWeekDayImpl___nonzero__(self)
    def __bool__(self): return _calendar_impl.SetWeekDayImpl___bool__(self)
    def __len__(self): return _calendar_impl.SetWeekDayImpl___len__(self)
    def append(self, *args): return _calendar_impl.SetWeekDayImpl_append(self, *args)
    def __contains__(self, *args): return _calendar_impl.SetWeekDayImpl___contains__(self, *args)
    def __getitem__(self, *args): return _calendar_impl.SetWeekDayImpl___getitem__(self, *args)
    def __init__(self, *args): 
        this = _calendar_impl.new_SetWeekDayImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _calendar_impl.SetWeekDayImpl_empty(self)
    def size(self): return _calendar_impl.SetWeekDayImpl_size(self)
    def clear(self): return _calendar_impl.SetWeekDayImpl_clear(self)
    def swap(self, *args): return _calendar_impl.SetWeekDayImpl_swap(self, *args)
    def count(self, *args): return _calendar_impl.SetWeekDayImpl_count(self, *args)
    def begin(self): return _calendar_impl.SetWeekDayImpl_begin(self)
    def end(self): return _calendar_impl.SetWeekDayImpl_end(self)
    def rbegin(self): return _calendar_impl.SetWeekDayImpl_rbegin(self)
    def rend(self): return _calendar_impl.SetWeekDayImpl_rend(self)
    def erase(self, *args): return _calendar_impl.SetWeekDayImpl_erase(self, *args)
    def find(self, *args): return _calendar_impl.SetWeekDayImpl_find(self, *args)
    def lower_bound(self, *args): return _calendar_impl.SetWeekDayImpl_lower_bound(self, *args)
    def upper_bound(self, *args): return _calendar_impl.SetWeekDayImpl_upper_bound(self, *args)
    def equal_range(self, *args): return _calendar_impl.SetWeekDayImpl_equal_range(self, *args)
    def insert(self, *args): return _calendar_impl.SetWeekDayImpl_insert(self, *args)
    __swig_destroy__ = _calendar_impl.delete_SetWeekDayImpl
    __del__ = lambda self : None;
SetWeekDayImpl_swigregister = _calendar_impl.SetWeekDayImpl_swigregister
SetWeekDayImpl_swigregister(SetWeekDayImpl)

class SetStringImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetStringImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetStringImpl, name)
    __repr__ = _swig_repr
    def iterator(self): return _calendar_impl.SetStringImpl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _calendar_impl.SetStringImpl___nonzero__(self)
    def __bool__(self): return _calendar_impl.SetStringImpl___bool__(self)
    def __len__(self): return _calendar_impl.SetStringImpl___len__(self)
    def append(self, *args): return _calendar_impl.SetStringImpl_append(self, *args)
    def __contains__(self, *args): return _calendar_impl.SetStringImpl___contains__(self, *args)
    def __getitem__(self, *args): return _calendar_impl.SetStringImpl___getitem__(self, *args)
    def __init__(self, *args): 
        this = _calendar_impl.new_SetStringImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _calendar_impl.SetStringImpl_empty(self)
    def size(self): return _calendar_impl.SetStringImpl_size(self)
    def clear(self): return _calendar_impl.SetStringImpl_clear(self)
    def swap(self, *args): return _calendar_impl.SetStringImpl_swap(self, *args)
    def count(self, *args): return _calendar_impl.SetStringImpl_count(self, *args)
    def begin(self): return _calendar_impl.SetStringImpl_begin(self)
    def end(self): return _calendar_impl.SetStringImpl_end(self)
    def rbegin(self): return _calendar_impl.SetStringImpl_rbegin(self)
    def rend(self): return _calendar_impl.SetStringImpl_rend(self)
    def erase(self, *args): return _calendar_impl.SetStringImpl_erase(self, *args)
    def find(self, *args): return _calendar_impl.SetStringImpl_find(self, *args)
    def lower_bound(self, *args): return _calendar_impl.SetStringImpl_lower_bound(self, *args)
    def upper_bound(self, *args): return _calendar_impl.SetStringImpl_upper_bound(self, *args)
    def equal_range(self, *args): return _calendar_impl.SetStringImpl_equal_range(self, *args)
    def insert(self, *args): return _calendar_impl.SetStringImpl_insert(self, *args)
    __swig_destroy__ = _calendar_impl.delete_SetStringImpl
    __del__ = lambda self : None;
SetStringImpl_swigregister = _calendar_impl.SetStringImpl_swigregister
SetStringImpl_swigregister(SetStringImpl)

class CalendarRulesImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalendarRulesImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalendarRulesImpl, name)
    __repr__ = _swig_repr
    def iterator(self): return _calendar_impl.CalendarRulesImpl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _calendar_impl.CalendarRulesImpl___nonzero__(self)
    def __bool__(self): return _calendar_impl.CalendarRulesImpl___bool__(self)
    def __len__(self): return _calendar_impl.CalendarRulesImpl___len__(self)
    def append(self, *args): return _calendar_impl.CalendarRulesImpl_append(self, *args)
    def __contains__(self, *args): return _calendar_impl.CalendarRulesImpl___contains__(self, *args)
    def __getitem__(self, *args): return _calendar_impl.CalendarRulesImpl___getitem__(self, *args)
    def __init__(self, *args): 
        this = _calendar_impl.new_CalendarRulesImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _calendar_impl.CalendarRulesImpl_empty(self)
    def size(self): return _calendar_impl.CalendarRulesImpl_size(self)
    def clear(self): return _calendar_impl.CalendarRulesImpl_clear(self)
    def swap(self, *args): return _calendar_impl.CalendarRulesImpl_swap(self, *args)
    def count(self, *args): return _calendar_impl.CalendarRulesImpl_count(self, *args)
    def begin(self): return _calendar_impl.CalendarRulesImpl_begin(self)
    def end(self): return _calendar_impl.CalendarRulesImpl_end(self)
    def rbegin(self): return _calendar_impl.CalendarRulesImpl_rbegin(self)
    def rend(self): return _calendar_impl.CalendarRulesImpl_rend(self)
    def erase(self, *args): return _calendar_impl.CalendarRulesImpl_erase(self, *args)
    def find(self, *args): return _calendar_impl.CalendarRulesImpl_find(self, *args)
    def lower_bound(self, *args): return _calendar_impl.CalendarRulesImpl_lower_bound(self, *args)
    def upper_bound(self, *args): return _calendar_impl.CalendarRulesImpl_upper_bound(self, *args)
    def equal_range(self, *args): return _calendar_impl.CalendarRulesImpl_equal_range(self, *args)
    def insert(self, *args): return _calendar_impl.CalendarRulesImpl_insert(self, *args)
    __swig_destroy__ = _calendar_impl.delete_CalendarRulesImpl
    __del__ = lambda self : None;
CalendarRulesImpl_swigregister = _calendar_impl.CalendarRulesImpl_swigregister
CalendarRulesImpl_swigregister(CalendarRulesImpl)

# This file is compatible with both classic and new-style classes.


