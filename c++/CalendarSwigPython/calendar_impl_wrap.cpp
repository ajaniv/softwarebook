/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

#ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
#else
  if (!PyString_Check(name))
#endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BusinessCalendar swig_types[0]
#define SWIGTYPE_p_Calendar swig_types[1]
#define SWIGTYPE_p_CalendarCache swig_types[2]
#define SWIGTYPE_p_CalendarMap__const_iterator swig_types[3]
#define SWIGTYPE_p_CalendarRule swig_types[4]
#define SWIGTYPE_p_CalendarRuleSharedPtrLessThan swig_types[5]
#define SWIGTYPE_p_ConstrainedInteger swig_types[6]
#define SWIGTYPE_p_DataLoader swig_types[7]
#define SWIGTYPE_p_Date swig_types[8]
#define SWIGTYPE_p_DatePart swig_types[9]
#define SWIGTYPE_p_DateRule swig_types[10]
#define SWIGTYPE_p_Day swig_types[11]
#define SWIGTYPE_p_DayOfMonth swig_types[12]
#define SWIGTYPE_p_Days swig_types[13]
#define SWIGTYPE_p_DaysOffsetRule swig_types[14]
#define SWIGTYPE_p_DerivedRule swig_types[15]
#define SWIGTYPE_p_Enum swig_types[16]
#define SWIGTYPE_p_FirstDayAtOrBeforeRule swig_types[17]
#define SWIGTYPE_p_FirstDayMonthRule swig_types[18]
#define SWIGTYPE_p_HolidayDuration swig_types[19]
#define SWIGTYPE_p_LastDayMonthRule swig_types[20]
#define SWIGTYPE_p_Month swig_types[21]
#define SWIGTYPE_p_MonthDayRule swig_types[22]
#define SWIGTYPE_p_MonthWeek swig_types[23]
#define SWIGTYPE_p_MonthWeekDayRule swig_types[24]
#define SWIGTYPE_p_MonthWeek__eMonthWeek swig_types[25]
#define SWIGTYPE_p_SpecificDateRule swig_types[26]
#define SWIGTYPE_p_VectorInteger swig_types[27]
#define SWIGTYPE_p_VectorString swig_types[28]
#define SWIGTYPE_p_WeekDay swig_types[29]
#define SWIGTYPE_p_WeekendRule swig_types[30]
#define SWIGTYPE_p_Year swig_types[31]
#define SWIGTYPE_p_allocator_type swig_types[32]
#define SWIGTYPE_p_bool swig_types[33]
#define SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t swig_types[34]
#define SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t swig_types[35]
#define SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t swig_types[36]
#define SWIGTYPE_p_boost__shared_ptrT_Calendar_t swig_types[37]
#define SWIGTYPE_p_boost__shared_ptrT_DateRule_t swig_types[38]
#define SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t swig_types[39]
#define SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t swig_types[40]
#define SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t swig_types[41]
#define SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t swig_types[42]
#define SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t swig_types[43]
#define SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t swig_types[44]
#define SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t swig_types[45]
#define SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t swig_types[46]
#define SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t swig_types[47]
#define SWIGTYPE_p_char swig_types[48]
#define SWIGTYPE_p_difference_type swig_types[49]
#define SWIGTYPE_p_eWeekDay swig_types[50]
#define SWIGTYPE_p_eWeekOfMonth swig_types[51]
#define SWIGTYPE_p_int swig_types[52]
#define SWIGTYPE_p_key_type swig_types[53]
#define SWIGTYPE_p_long swig_types[54]
#define SWIGTYPE_p_p_PyObject swig_types[55]
#define SWIGTYPE_p_size_t swig_types[56]
#define SWIGTYPE_p_size_type swig_types[57]
#define SWIGTYPE_p_std__allocatorT_Date_t swig_types[58]
#define SWIGTYPE_p_std__invalid_argument swig_types[59]
#define SWIGTYPE_p_std__lessT_Date_t swig_types[60]
#define SWIGTYPE_p_std__lessT_WeekDay__eWeekDay_t swig_types[61]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[62]
#define SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t swig_types[63]
#define SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t swig_types[64]
#define SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t swig_types[65]
#define SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t swig_types[66]
#define SWIGTYPE_p_std__string swig_types[67]
#define SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t swig_types[68]
#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[69]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[70]
#define SWIGTYPE_p_value_type swig_types[71]
static swig_type_info *swig_types[73];
static swig_module_info swig_module = {swig_types, 72, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _calendar_impl.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__calendar_impl

#else
#  define SWIG_init    init_calendar_impl

#endif
#define SWIG_name    "_calendar_impl"

#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <utility>


#include <set>


#include <vector>


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <vector>
#include <set>
#include <string>


//Logically core module, must be included
#include "core/Enum.hpp"
#include "core/BaseException.hpp"
#include "core/MemUtil.hpp"
#include "logging/Log4cppComponentManager.hpp"
#include "xml/XercesComponentManager.hpp"
#include "xml/XMLConfigurator.hpp"
#include "logging/LoggingConfigurator.hpp"
#include "logging/LoggingConfig.hpp"


/*
class CalendarException : public std::exception{
public:
	CalendarException(const String& msg) : msg(msg) {}
public:
	String msg;
};

*/



SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


 
//Business Classes
#include "datetime/DateTimeConstants.hpp"
#include "datetime/Day.hpp"
#include "datetime/DayOfMonth.hpp"
#include "datetime/Year.hpp"
#include "datetime/Month.hpp"
#include "datetime/Days.hpp"
#include "datetime/Date.hpp"
#include "datetime/DateUtil.hpp"
#include "datetime/WeekDay.hpp"
#include "datetime/MonthWeek.hpp"
#include "datetime/HolidayDuration.hpp"


SWIGINTERN void HolidayDuration_setValue(HolidayDuration *self,Integer const value){
			self->setValue(value);
		}
SWIGINTERN Integer HolidayDuration_getValue(HolidayDuration const *self){
			return self->getValue();
		}
SWIGINTERN Integer const DayOfMonth_dayOfMonthMax(){
			return DateTimeConstants::dayOfMonthMax();
		}
SWIGINTERN Integer const DayOfMonth_dayOfMonthMin(){
			return DateTimeConstants::dayOfMonthMin();
		}
SWIGINTERN Integer const Month_monthMax(){
		return DateTimeConstants::monthMax();
	}
SWIGINTERN Integer const Month_monthMin(){
		return DateTimeConstants::monthMin();
	}
SWIGINTERN Integer const Year_yearMax(){
		return DateTimeConstants::yearMax();
	}
SWIGINTERN Integer const Year_yearMin(){
		return DateTimeConstants::yearMin();
	}
SWIGINTERN Integer const Days_daysMax(){
			return DateTimeConstants::daysMax();
		}
SWIGINTERN Integer const Days_daysMin(){
			return DateTimeConstants::daysMin();
		}
SWIGINTERN Date &Date_copyFrom(Date *self,Date const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN String Date_weekDayAsString(Date *self){
			WeekDay::eWeekDay day = self->weekDay();
			return WeekDay::instance().toString(day);
		}
SWIGINTERN Date const &Date_maxDate(){
		return DateUtil::maxDate();
	}
SWIGINTERN Date const &Date_minDate(){
		return DateUtil::minDate();
	}


//Business Classes
#include "calendar/CalendarRule.hpp"
#include "calendar/WeekendRule.hpp"
#include "calendar/DateRule.hpp"
#include "calendar/SpecificDateRule.hpp"
#include "calendar/MonthDayRule.hpp"
#include "calendar/MonthWeekDayRule.hpp"
#include "calendar/LastDayMonthRule.hpp"
#include "calendar/FirstDayMonthRule.hpp"
#include "calendar/DerivedRule.hpp"
#include "calendar/DaysOffsetRule.hpp"
#include "calendar/FirstDayAtOrBeforeRule.hpp"

#include "calendar/RuleContainerTypes.hpp"
#include "calendar/BusinessCalendar.hpp"
#include "calendar/data/DataLoader.hpp"
#include "calendar/CalendarCache.hpp"


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#define SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT

SWIGINTERN CalendarRuleSharedPtr CalendarRule_createCalendarRuleSmartPtr(){
			CalendarRuleSharedPtr rulePtr (new CalendarRule());
			return rulePtr;
		}
SWIGINTERN CalendarRule &CalendarRule_copyFrom(CalendarRule *self,CalendarRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN String const CalendarRule_className(CalendarRule const *self){
			String typeName = self->className();
			return typeName + "Impl";
		}

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN Bool CalendarRule_getEnabledFlag(CalendarRule const *self){
			 
			return self->isEnabled();
		}
SWIGINTERN WeekendRuleSharedPtr WeekendRule_downCast(CalendarRuleSharedPtr const &rule){
			WeekendRuleSharedPtr downCastRule = 
				boost::dynamic_pointer_cast<WeekendRule> (rule);
			return downCastRule;
		}
SWIGINTERN SetString WeekendRule_weekendDaysAsStringSet(WeekendRule *self){
			const SetWeekDay& weekDays = self->getWeekendDays();
			SetString days;
			for (SetWeekDay::const_iterator iter = weekDays.begin();
				iter != weekDays.end(); ++iter) {
					days.insert(WeekDay::instance().toString(*iter));
			}
			 
			return days;
		}
SWIGINTERN void WeekendRule_addDay(WeekendRule *self,String const &dayName){
			self->addDay(WeekDay::instance().fromPartialString(dayName));
			 
		}
SWIGINTERN void WeekendRule_removeDay(WeekendRule *self,String const &dayName){
			self->removeDay(WeekDay::instance().fromPartialString(dayName));
			 
		}
SWIGINTERN Bool WeekendRule_isWeekend(WeekendRule const *self,String const &dayName){
			return self->isWeekend(WeekDay::instance().fromPartialString(dayName));
			 
		}
SWIGINTERN Bool WeekendRule_isWeekendForYear(WeekendRule const *self,Year const &year,String const &dayName){
			return self->isWeekend(year, WeekDay::instance().fromPartialString(dayName));
		}
SWIGINTERN WeekendRule &WeekendRule_copyFrom(WeekendRule *self,WeekendRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN void DateRule_setWeekendAdjustment(DateRule *self,String const &adjustmentName){
			self->setWeekendAdjustment(WeekendAdjustment::instance().fromPartialString(adjustmentName));
			 
		}
SWIGINTERN String DateRule_getWeekendAdjustment(DateRule const *self){
			WeekendAdjustment::eWeekendAdjustment adjustment = self->getWeekendAdjustment();
			return WeekendAdjustment::instance().toString(adjustment);
			 
		}
SWIGINTERN SetString DateRule_weekendDaysAsStringSet(DateRule *self){
			const SetWeekDay weekDays = self->weekendDays();
			SetString days;
			for (SetWeekDay::const_iterator iter = weekDays.begin();
				iter != weekDays.end(); ++iter) {
					days.insert(WeekDay::instance().toString(*iter));
			}
			 
			return days;
		}
SWIGINTERN DateRule &DateRule_copyFrom(DateRule *self,DateRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN SpecificDateRule &SpecificDateRule_copyFrom(SpecificDateRule *self,SpecificDateRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN SpecificDateRuleSharedPtr SpecificDateRule_downCast(CalendarRuleSharedPtr const &rule){
			SpecificDateRuleSharedPtr downCastRule = boost::dynamic_pointer_cast<SpecificDateRule> (rule);
			return downCastRule;
		}
SWIGINTERN MonthDayRule &MonthDayRule_copyFrom(MonthDayRule *self,MonthDayRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN MonthDayRuleSharedPtr MonthDayRule_downCast(CalendarRuleSharedPtr const &rule){
			MonthDayRuleSharedPtr downCastRule = boost::dynamic_pointer_cast<MonthDayRule> (rule);
			return downCastRule;
		}
SWIGINTERN MonthWeekDayRule &MonthWeekDayRule_copyFrom(MonthWeekDayRule *self,MonthWeekDayRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN MonthWeekDayRuleSharedPtr MonthWeekDayRule_downCast(CalendarRuleSharedPtr const &rule){
			MonthWeekDayRuleSharedPtr downCastRule = boost::dynamic_pointer_cast<MonthWeekDayRule> (rule);
			return downCastRule;
		}
SWIGINTERN void MonthWeekDayRule_setMonthWeek(MonthWeekDayRule *self,String const &weekName){
			self->setMonthWeek(MonthWeek::instance().fromPartialString(weekName));
		}
SWIGINTERN String MonthWeekDayRule_getMonthWeek(MonthWeekDayRule const *self){
			return MonthWeek::instance().toString(self->getMonthWeek());
		}
SWIGINTERN void MonthWeekDayRule_setWeekDay(MonthWeekDayRule *self,String const &dayName){
			self->setWeekDay(WeekDay::instance().fromPartialString(dayName));
		}
SWIGINTERN String MonthWeekDayRule_getWeekDay(MonthWeekDayRule const *self){
			return WeekDay::instance().toString(self->getWeekDay());
		}
SWIGINTERN LastDayMonthRule &LastDayMonthRule_copyFrom(LastDayMonthRule *self,LastDayMonthRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN LastDayMonthRuleSharedPtr LastDayMonthRule_downCast(CalendarRuleSharedPtr const &rule){
			LastDayMonthRuleSharedPtr downCastRule = boost::dynamic_pointer_cast<LastDayMonthRule> (rule);
			return downCastRule;
		}
SWIGINTERN void LastDayMonthRule_setWeekDay(LastDayMonthRule *self,String const &dayName){
			self->setWeekDay(WeekDay::instance().fromPartialString(dayName));
		}
SWIGINTERN String LastDayMonthRule_getWeekDay(LastDayMonthRule const *self){
			return WeekDay::instance().toString(self->getWeekDay());
		}
SWIGINTERN FirstDayMonthRule &FirstDayMonthRule_copyFrom(FirstDayMonthRule *self,FirstDayMonthRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN FirstDayMonthRuleSharedPtr FirstDayMonthRule_downCast(CalendarRuleSharedPtr const &rule){
			FirstDayMonthRuleSharedPtr downCastRule = boost::dynamic_pointer_cast<FirstDayMonthRule> (rule);
			return downCastRule;
		}
SWIGINTERN void FirstDayMonthRule_setWeekDay(FirstDayMonthRule *self,String const &dayName){
			self->setWeekDay(WeekDay::instance().fromPartialString(dayName));
		}
SWIGINTERN String FirstDayMonthRule_getWeekDay(FirstDayMonthRule const *self){
			return WeekDay::instance().toString(self->getWeekDay());
		}
SWIGINTERN DerivedRule &DerivedRule_copyFrom(DerivedRule *self,DerivedRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN DaysOffsetRule &DaysOffsetRule_copyFrom(DaysOffsetRule *self,DaysOffsetRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN DaysOffsetRuleSharedPtr DaysOffsetRule_downCast(CalendarRuleSharedPtr const &rule){
			DaysOffsetRuleSharedPtr downCastRule = boost::dynamic_pointer_cast<DaysOffsetRule> (rule);
			return downCastRule;
		}
SWIGINTERN FirstDayAtOrBeforeRule &FirstDayAtOrBeforeRule_copyFrom(FirstDayAtOrBeforeRule *self,FirstDayAtOrBeforeRule const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN FirstDayAtOrBeforeRuleSharedPtr FirstDayAtOrBeforeRule_downCast(CalendarRuleSharedPtr const &rule){
			FirstDayAtOrBeforeRuleSharedPtr downCastRule = boost::dynamic_pointer_cast<FirstDayAtOrBeforeRule> (rule);
			return downCastRule;
		}
SWIGINTERN void FirstDayAtOrBeforeRule_setWeekDay(FirstDayAtOrBeforeRule *self,String const &dayName){
			self->setWeekDay(WeekDay::instance().fromPartialString(dayName));
		}
SWIGINTERN String FirstDayAtOrBeforeRule_getWeekDay(FirstDayAtOrBeforeRule const *self){
			return WeekDay::instance().toString(self->getWeekDay());
		}
SWIGINTERN Calendar &Calendar_copyFrom(Calendar *self,Calendar const &rhs){
			self->operator=(rhs);
			return *self;
		}
SWIGINTERN String const Calendar_className(Calendar const *self){
			String typeName = self->className();
			return typeName + "Impl";
		}
SWIGINTERN CalendarRules Calendar_rules(Calendar *self){
			CalendarRules rules;
			for (CalendarRules::const_iterator iter = self->beginRules();
				iter != self->endRules(); ++iter) {
					rules.insert(*iter);
			}
			return rules;
		}
SWIGINTERN BusinessCalendar &BusinessCalendar_copyFrom(BusinessCalendar *self,BusinessCalendar const &rhs){
			self->operator=(rhs);
			return *self;
		
		}
SWIGINTERN BusinessCalendarSharedPtr BusinessCalendar_downCast(CalendarSharedPtr const cal){
			BusinessCalendarSharedPtr busCal = boost::dynamic_pointer_cast<BusinessCalendar> (cal);;
			return busCal;
		}
SWIGINTERN Bool BusinessCalendar_isWeekend(BusinessCalendar const *self,String const &dayName){
			return self->isWeekend(WeekDay::instance().fromPartialString(dayName));
			 
		}
SWIGINTERN Bool BusinessCalendar_isWeekendForYear(BusinessCalendar const *self,Date const &refDate,String const &dayName){
			return self->isWeekend(refDate, WeekDay::instance().fromPartialString(dayName));
		}
SWIGINTERN Bool BusinessCalendar_isWeekendForDate(BusinessCalendar const *self,Date const &date){
			return self->isWeekend(date);
		}
SWIGINTERN SetDate BusinessCalendar_weekendsForYear(BusinessCalendar const *self,Year const &year){
			return self->weekends(year);
			 
		}
SWIGINTERN SetString CalendarCache_calendarNames(CalendarCache *self){
			CalendarMap::const_iterator iter;
			SetString names;
			for (iter = self->begin(); iter != self->end(); ++iter){
				names.insert(iter->first);
			}
			return names;
		}




//Initialization classes

#include "constrained/BoostConstrainingTypeComponentManager.hpp"
#include "datetime/BoostDateTimeComponentManager.hpp"




namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v = InputSeq()) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<Date > {
      typedef pointer_category category;
      static const char* type_name() { return"Date"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Date, std::allocator< Date > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Date" "," "std::allocator< Date >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_Date_Sg__iterator(std::vector< Date > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Date_Sg____nonzero__(std::vector< Date > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_Date_Sg____bool__(std::vector< Date > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Date >::size_type std_vector_Sl_Date_Sg____len__(std::vector< Date > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Date >::value_type std_vector_Sl_Date_Sg__pop(std::vector< Date > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Date,std::allocator< Date > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Date,std::allocator< Date > > *std_vector_Sl_Date_Sg____getslice__(std::vector< Date > *self,std::vector< Date >::difference_type i,std::vector< Date >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Date_Sg____setslice____SWIG_0(std::vector< Date > *self,std::vector< Date >::difference_type i,std::vector< Date >::difference_type j,std::vector< Date,std::allocator< Date > > const &v=std::vector< Date,std::allocator< Date > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Date_Sg____delslice__(std::vector< Date > *self,std::vector< Date >::difference_type i,std::vector< Date >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Date_Sg____delitem____SWIG_0(std::vector< Date > *self,std::vector< Date >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Date,std::allocator< Date > > *std_vector_Sl_Date_Sg____getitem____SWIG_0(std::vector< Date > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Date_Sg____setitem____SWIG_0(std::vector< Date > *self,PySliceObject *slice,std::vector< Date,std::allocator< Date > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Date_Sg____setitem____SWIG_1(std::vector< Date > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_Date_Sg____delitem____SWIG_1(std::vector< Date > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< Date >::value_type const &std_vector_Sl_Date_Sg____getitem____SWIG_1(std::vector< Date > const *self,std::vector< Date >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Date_Sg____setitem____SWIG_2(std::vector< Date > *self,std::vector< Date >::difference_type i,std::vector< Date >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Date_Sg__append(std::vector< Date > *self,std::vector< Date >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <class SwigPySeq, class T> 
    inline void 
    assign(const SwigPySeq& swigpyseq, std::set<T>* seq) {
      // seq->insert(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
      typedef typename SwigPySeq::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
    }

    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set<Date, std::less< Date >, std::allocator< Date > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "Date" "," "std::less< Date >" "," "std::allocator< Date >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_Date_Sg__iterator(std::set< Date > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_Date_Sg____nonzero__(std::set< Date > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_Date_Sg____bool__(std::set< Date > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< Date >::size_type std_set_Sl_Date_Sg____len__(std::set< Date > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_Date_Sg__append(std::set< Date > *self,std::set< Date >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_Date_Sg____contains__(std::set< Date > *self,std::set< Date >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< Date >::value_type std_set_Sl_Date_Sg____getitem__(std::set< Date > const *self,std::set< Date >::difference_type i){
       return *(swig::cgetpos(self, i));
     }


  namespace swig {
    template <>  struct traits<WeekDay::eWeekDay > {
      typedef pointer_category category;
      static const char* type_name() { return"WeekDay::eWeekDay"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::set<WeekDay::eWeekDay, std::less< WeekDay::eWeekDay >, std::allocator< WeekDay::eWeekDay > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "WeekDay::eWeekDay" "," "std::less< WeekDay::eWeekDay >" "," "std::allocator< WeekDay::eWeekDay >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_WeekDay_eWeekDay_Sg__iterator(std::set< WeekDay::eWeekDay > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_WeekDay_eWeekDay_Sg____nonzero__(std::set< WeekDay::eWeekDay > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_WeekDay_eWeekDay_Sg____bool__(std::set< WeekDay::eWeekDay > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< enum WeekDay::eWeekDay >::size_type std_set_Sl_WeekDay_eWeekDay_Sg____len__(std::set< WeekDay::eWeekDay > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_WeekDay_eWeekDay_Sg__append(std::set< WeekDay::eWeekDay > *self,std::set< enum WeekDay::eWeekDay >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_WeekDay_eWeekDay_Sg____contains__(std::set< WeekDay::eWeekDay > *self,std::set< enum WeekDay::eWeekDay >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< enum WeekDay::eWeekDay >::value_type std_set_Sl_WeekDay_eWeekDay_Sg____getitem__(std::set< WeekDay::eWeekDay > const *self,std::set< enum WeekDay::eWeekDay >::difference_type i){
       return *(swig::cgetpos(self, i));
     }

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::set<std::string, std::less< std::string >, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "std::string" "," "std::less< std::string >" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_String_Sg__iterator(std::set< String > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_String_Sg____nonzero__(std::set< String > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_String_Sg____bool__(std::set< String > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< std::string >::size_type std_set_Sl_String_Sg____len__(std::set< String > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_String_Sg__append(std::set< String > *self,std::set< std::string >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_String_Sg____contains__(std::set< String > *self,std::set< std::string >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< std::string >::value_type std_set_Sl_String_Sg____getitem__(std::set< String > const *self,std::set< std::string >::difference_type i){
       return *(swig::cgetpos(self, i));
     }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< CalendarRule > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< CalendarRule >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::set<boost::shared_ptr< CalendarRule >, CalendarRuleSharedPtrLessThan, std::allocator< boost::shared_ptr< CalendarRule > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "boost::shared_ptr< CalendarRule >" "," "CalendarRuleSharedPtrLessThan" "," "std::allocator< boost::shared_ptr< CalendarRule > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg__iterator(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____nonzero__(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____bool__(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::size_type std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____len__(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg__append(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *self,std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____contains__(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *self,std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____getitem__(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *self,std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Enum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Enum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Enum" "', argument " "1"" of type '" "Enum *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enum_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Enum_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enum_size" "', argument " "1"" of type '" "Enum const *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  result = ((Enum const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enum_sizeInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Enum_sizeInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enum_sizeInt" "', argument " "1"" of type '" "Enum const *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  result = ((Enum const *)arg1)->sizeInt();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enum_sizeString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Enum_sizeString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enum_sizeString" "', argument " "1"" of type '" "Enum const *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  result = ((Enum const *)arg1)->sizeString();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enum_intToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Enum_intToString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enum_intToString" "', argument " "1"" of type '" "Enum const *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enum_intToString" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  result = ((Enum const *)arg1)->intToString(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enum_stringToInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Enum_stringToInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enum_stringToInt" "', argument " "1"" of type '" "Enum const *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Enum_stringToInt" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Enum_stringToInt" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Integer)((Enum const *)arg1)->stringToInt((String const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enum_getIntegerValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  VectorInteger result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Enum_getIntegerValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enum_getIntegerValues" "', argument " "1"" of type '" "Enum const *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  result = ((Enum const *)arg1)->getIntegerValues();
  resultobj = SWIG_NewPointerObj((new VectorInteger(static_cast< const VectorInteger& >(result))), SWIGTYPE_p_VectorInteger, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enum_getStringValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *arg1 = (Enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  VectorString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Enum_getStringValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enum_getStringValues" "', argument " "1"" of type '" "Enum const *""'"); 
  }
  arg1 = reinterpret_cast< Enum * >(argp1);
  result = ((Enum const *)arg1)->getStringValues();
  resultobj = SWIG_NewPointerObj((new VectorString(static_cast< const VectorString& >(result))), SWIGTYPE_p_VectorString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Enum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Enum")) SWIG_fail;
  result = (Enum *)new Enum();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Enum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Enum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Enum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ConstrainedIntegerImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstrainedInteger *arg1 = (ConstrainedInteger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ConstrainedIntegerImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstrainedInteger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstrainedIntegerImpl" "', argument " "1"" of type '" "ConstrainedInteger *""'"); 
  }
  arg1 = reinterpret_cast< ConstrainedInteger * >(argp1);
  {
    try {
      delete arg1;
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing delete arg1;  in ConstrainedInteger::ConstrainedInteger(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConstrainedIntegerImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ConstrainedInteger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HolidayDurationImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HolidayDuration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HolidayDurationImpl")) SWIG_fail;
  {
    try {
      result = (HolidayDuration *)new HolidayDuration();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (HolidayDuration *)new HolidayDuration();  in HolidayDuration::HolidayDuration(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HolidayDuration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HolidayDurationImpl_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HolidayDuration *arg1 = (HolidayDuration *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HolidayDurationImpl_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HolidayDuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HolidayDurationImpl_setValue" "', argument " "1"" of type '" "HolidayDuration *""'"); 
  }
  arg1 = reinterpret_cast< HolidayDuration * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HolidayDurationImpl_setValue" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      HolidayDuration_setValue(arg1,arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing HolidayDuration_setValue(arg1,arg2);  in HolidayDuration::setValue(Integer const); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HolidayDurationImpl_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HolidayDuration *arg1 = (HolidayDuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HolidayDurationImpl_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HolidayDuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HolidayDurationImpl_getValue" "', argument " "1"" of type '" "HolidayDuration const *""'"); 
  }
  arg1 = reinterpret_cast< HolidayDuration * >(argp1);
  {
    try {
      result = (Integer)HolidayDuration_getValue((HolidayDuration const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)HolidayDuration_getValue((HolidayDuration const *)arg1);  in HolidayDuration::getValue() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HolidayDurationImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HolidayDuration *arg1 = (HolidayDuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HolidayDurationImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HolidayDuration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HolidayDurationImpl" "', argument " "1"" of type '" "HolidayDuration *""'"); 
  }
  arg1 = reinterpret_cast< HolidayDuration * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HolidayDurationImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HolidayDuration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_DatePartImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DatePartImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DatePartImpl" "', argument " "1"" of type '" "DatePart *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  {
    try {
      delete arg1;
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing delete arg1;  in DatePart::DatePart(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  DatePart *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl___eq__" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatePart,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DatePartImpl___eq__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DatePartImpl___eq__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  arg2 = reinterpret_cast< DatePart * >(argp2);
  {
    try {
      result = (Bool)((DatePart const *)arg1)->operator ==((DatePart const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DatePart const *)arg1)->operator ==((DatePart const &)*arg2);  in DatePart::operator ==(DatePart const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  DatePart *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl___ne__" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatePart,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DatePartImpl___ne__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DatePartImpl___ne__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  arg2 = reinterpret_cast< DatePart * >(argp2);
  {
    try {
      result = (Bool)((DatePart const *)arg1)->operator !=((DatePart const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DatePart const *)arg1)->operator !=((DatePart const &)*arg2);  in DatePart::operator !=(DatePart const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  DatePart *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl___lt__" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatePart,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DatePartImpl___lt__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DatePartImpl___lt__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  arg2 = reinterpret_cast< DatePart * >(argp2);
  {
    try {
      result = (Bool)((DatePart const *)arg1)->operator <((DatePart const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DatePart const *)arg1)->operator <((DatePart const &)*arg2);  in DatePart::operator <(DatePart const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  DatePart *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl___le__" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatePart,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DatePartImpl___le__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DatePartImpl___le__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  arg2 = reinterpret_cast< DatePart * >(argp2);
  {
    try {
      result = (Bool)((DatePart const *)arg1)->operator <=((DatePart const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DatePart const *)arg1)->operator <=((DatePart const &)*arg2);  in DatePart::operator <=(DatePart const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  DatePart *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl___gt__" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatePart,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DatePartImpl___gt__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DatePartImpl___gt__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  arg2 = reinterpret_cast< DatePart * >(argp2);
  {
    try {
      result = (Bool)((DatePart const *)arg1)->operator >((DatePart const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DatePart const *)arg1)->operator >((DatePart const &)*arg2);  in DatePart::operator >(DatePart const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  DatePart *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl___ge__" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatePart,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DatePartImpl___ge__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DatePartImpl___ge__" "', argument " "2"" of type '" "DatePart const &""'"); 
  }
  arg2 = reinterpret_cast< DatePart * >(argp2);
  {
    try {
      result = (Bool)((DatePart const *)arg1)->operator >=((DatePart const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DatePart const *)arg1)->operator >=((DatePart const &)*arg2);  in DatePart::operator >=(DatePart const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl_asInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DatePartImpl_asInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl_asInteger" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  {
    try {
      result = (Integer)((DatePart const *)arg1)->asInteger();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((DatePart const *)arg1)->asInteger();  in DatePart::asInteger() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl_add" "', argument " "1"" of type '" "DatePart *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DatePartImpl_add" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      (arg1)->add(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->add(arg2);  in DatePart::add(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl_substract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl_substract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl_substract" "', argument " "1"" of type '" "DatePart *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DatePartImpl_substract" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      (arg1)->substract(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->substract(arg2);  in DatePart::substract(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatePartImpl_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl_setValue" "', argument " "1"" of type '" "DatePart *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DatePartImpl_setValue" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      (arg1)->setValue(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setValue(arg2);  in DatePart::setValue(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatePartImpl_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DatePart *arg1 = (DatePart *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DatePartImpl_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DatePart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DatePartImpl_getValue" "', argument " "1"" of type '" "DatePart const *""'"); 
  }
  arg1 = reinterpret_cast< DatePart * >(argp1);
  {
    try {
      result = (Integer)((DatePart const *)arg1)->getValue();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((DatePart const *)arg1)->getValue();  in DatePart::getValue() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DatePartImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DatePart, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WeekDayImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekDay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WeekDayImpl")) SWIG_fail;
  {
    try {
      result = (WeekDay *)new WeekDay();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (WeekDay *)new WeekDay();  in WeekDay::WeekDay(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WeekDay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekDayImpl_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekDay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":WeekDayImpl_instance")) SWIG_fail;
  {
    try {
      result = (WeekDay *) &WeekDay::instance();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (WeekDay *) &WeekDay::instance();  in WeekDay::instance(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WeekDay, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekDayImpl_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekDay *arg1 = (WeekDay *) 0 ;
  WeekDay::eWeekDay arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekDayImpl_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WeekDay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekDayImpl_toString" "', argument " "1"" of type '" "WeekDay const *""'"); 
  }
  arg1 = reinterpret_cast< WeekDay * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeekDayImpl_toString" "', argument " "2"" of type '" "WeekDay::eWeekDay""'");
  } 
  arg2 = static_cast< WeekDay::eWeekDay >(val2);
  {
    try {
      result = ((WeekDay const *)arg1)->toString(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((WeekDay const *)arg1)->toString(arg2);  in WeekDay::toString(WeekDay::eWeekDay) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekDayImpl_fromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekDay *arg1 = (WeekDay *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  WeekDay::eWeekDay result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekDayImpl_fromString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WeekDay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekDayImpl_fromString" "', argument " "1"" of type '" "WeekDay const *""'"); 
  }
  arg1 = reinterpret_cast< WeekDay * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekDayImpl_fromString" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekDayImpl_fromString" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (WeekDay::eWeekDay)((WeekDay const *)arg1)->fromString((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (WeekDay::eWeekDay)((WeekDay const *)arg1)->fromString((String const &)*arg2);  in WeekDay::fromString(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekDayImpl_fromPartialString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekDay *arg1 = (WeekDay *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  WeekDay::eWeekDay result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekDayImpl_fromPartialString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WeekDay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekDayImpl_fromPartialString" "', argument " "1"" of type '" "WeekDay const *""'"); 
  }
  arg1 = reinterpret_cast< WeekDay * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekDayImpl_fromPartialString" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekDayImpl_fromPartialString" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (WeekDay::eWeekDay)((WeekDay const *)arg1)->fromPartialString((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (WeekDay::eWeekDay)((WeekDay const *)arg1)->fromPartialString((String const &)*arg2);  in WeekDay::fromPartialString(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WeekDayImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekDay *arg1 = (WeekDay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WeekDayImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WeekDay, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WeekDayImpl" "', argument " "1"" of type '" "WeekDay *""'"); 
  }
  arg1 = reinterpret_cast< WeekDay * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WeekDayImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_WeekDay, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonthWeekImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeek *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MonthWeekImpl")) SWIG_fail;
  {
    try {
      result = (MonthWeek *)new MonthWeek();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (MonthWeek *)new MonthWeek();  in MonthWeek::MonthWeek(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MonthWeek, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekImpl_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeek *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":MonthWeekImpl_instance")) SWIG_fail;
  {
    try {
      result = (MonthWeek *) &MonthWeek::instance();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (MonthWeek *) &MonthWeek::instance();  in MonthWeek::instance(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MonthWeek, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekImpl_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeek *arg1 = (MonthWeek *) 0 ;
  MonthWeek::eMonthWeek arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekImpl_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MonthWeek, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekImpl_toString" "', argument " "1"" of type '" "MonthWeek const *""'"); 
  }
  arg1 = reinterpret_cast< MonthWeek * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MonthWeek__eMonthWeek,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekImpl_toString" "', argument " "2"" of type '" "MonthWeek::eMonthWeek""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekImpl_toString" "', argument " "2"" of type '" "MonthWeek::eMonthWeek""'");
    } else {
      MonthWeek::eMonthWeek * temp = reinterpret_cast< MonthWeek::eMonthWeek * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((MonthWeek const *)arg1)->toString(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((MonthWeek const *)arg1)->toString(arg2);  in MonthWeek::toString(MonthWeek::eMonthWeek) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekImpl_fromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeek *arg1 = (MonthWeek *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MonthWeek::eMonthWeek result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekImpl_fromString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MonthWeek, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekImpl_fromString" "', argument " "1"" of type '" "MonthWeek const *""'"); 
  }
  arg1 = reinterpret_cast< MonthWeek * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekImpl_fromString" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekImpl_fromString" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((MonthWeek const *)arg1)->fromString((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((MonthWeek const *)arg1)->fromString((String const &)*arg2);  in MonthWeek::fromString(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new MonthWeek::eMonthWeek(static_cast< const MonthWeek::eMonthWeek& >(result))), SWIGTYPE_p_MonthWeek__eMonthWeek, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekImpl_fromPartialString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeek *arg1 = (MonthWeek *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MonthWeek::eMonthWeek result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekImpl_fromPartialString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MonthWeek, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekImpl_fromPartialString" "', argument " "1"" of type '" "MonthWeek const *""'"); 
  }
  arg1 = reinterpret_cast< MonthWeek * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekImpl_fromPartialString" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekImpl_fromPartialString" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((MonthWeek const *)arg1)->fromPartialString((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((MonthWeek const *)arg1)->fromPartialString((String const &)*arg2);  in MonthWeek::fromPartialString(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new MonthWeek::eMonthWeek(static_cast< const MonthWeek::eMonthWeek& >(result))), SWIGTYPE_p_MonthWeek__eMonthWeek, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonthWeekImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeek *arg1 = (MonthWeek *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonthWeekImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MonthWeek, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonthWeekImpl" "', argument " "1"" of type '" "MonthWeek *""'"); 
  }
  arg1 = reinterpret_cast< MonthWeek * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonthWeekImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MonthWeek, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DayImpl_daysBetween(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Day *arg1 = (Day *) 0 ;
  Day *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DayImpl_daysBetween",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Day, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DayImpl_daysBetween" "', argument " "1"" of type '" "Day const *""'"); 
  }
  arg1 = reinterpret_cast< Day * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Day,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DayImpl_daysBetween" "', argument " "2"" of type '" "Day const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DayImpl_daysBetween" "', argument " "2"" of type '" "Day const &""'"); 
  }
  arg2 = reinterpret_cast< Day * >(argp2);
  {
    try {
      result = (Integer)((Day const *)arg1)->daysBetween((Day const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Day const *)arg1)->daysBetween((Day const &)*arg2);  in Day::daysBetween(Day const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DayImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Day *arg1 = (Day *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DayImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Day, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DayImpl" "', argument " "1"" of type '" "Day *""'"); 
  }
  arg1 = reinterpret_cast< Day * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DayImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Day, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DayOfMonthImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DayOfMonth *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DayOfMonthImpl")) SWIG_fail;
  {
    try {
      result = (DayOfMonth *)new DayOfMonth();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DayOfMonth *)new DayOfMonth();  in DayOfMonth::DayOfMonth(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DayOfMonth, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DayOfMonthImpl___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DayOfMonth *arg1 = (DayOfMonth *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DayOfMonth *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DayOfMonthImpl___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DayOfMonth, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DayOfMonthImpl___iadd__" "', argument " "1"" of type '" "DayOfMonth *""'"); 
  }
  arg1 = reinterpret_cast< DayOfMonth * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DayOfMonthImpl___iadd__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (DayOfMonth *) &(arg1)->operator +=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DayOfMonth *) &(arg1)->operator +=(arg2);  in DayOfMonth::operator +=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DayOfMonth, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DayOfMonthImpl___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DayOfMonth *arg1 = (DayOfMonth *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DayOfMonth *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DayOfMonthImpl___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DayOfMonth, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DayOfMonthImpl___isub__" "', argument " "1"" of type '" "DayOfMonth *""'"); 
  }
  arg1 = reinterpret_cast< DayOfMonth * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DayOfMonthImpl___isub__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (DayOfMonth *) &(arg1)->operator -=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DayOfMonth *) &(arg1)->operator -=(arg2);  in DayOfMonth::operator -=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DayOfMonth, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DayOfMonthImpl_dayOfMonthMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":DayOfMonthImpl_dayOfMonthMax")) SWIG_fail;
  {
    try {
      result = (Integer)DayOfMonth_dayOfMonthMax();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)DayOfMonth_dayOfMonthMax();  in DayOfMonth::DayOfMonth_dayOfMonthMax(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DayOfMonthImpl_dayOfMonthMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":DayOfMonthImpl_dayOfMonthMin")) SWIG_fail;
  {
    try {
      result = (Integer)DayOfMonth_dayOfMonthMin();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)DayOfMonth_dayOfMonthMin();  in DayOfMonth::DayOfMonth_dayOfMonthMin(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DayOfMonthImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DayOfMonth *arg1 = (DayOfMonth *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DayOfMonthImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DayOfMonth, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DayOfMonthImpl" "', argument " "1"" of type '" "DayOfMonth *""'"); 
  }
  arg1 = reinterpret_cast< DayOfMonth * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DayOfMonthImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DayOfMonth, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonthImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Month *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MonthImpl")) SWIG_fail;
  {
    try {
      result = (Month *)new Month();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Month *)new Month();  in Month::Month(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Month, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthImpl___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Month *arg1 = (Month *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Month *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthImpl___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Month, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthImpl___iadd__" "', argument " "1"" of type '" "Month *""'"); 
  }
  arg1 = reinterpret_cast< Month * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonthImpl___iadd__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (Month *) &(arg1)->operator +=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Month *) &(arg1)->operator +=(arg2);  in Month::operator +=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Month, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthImpl___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Month *arg1 = (Month *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Month *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthImpl___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Month, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthImpl___isub__" "', argument " "1"" of type '" "Month *""'"); 
  }
  arg1 = reinterpret_cast< Month * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonthImpl___isub__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (Month *) &(arg1)->operator -=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Month *) &(arg1)->operator -=(arg2);  in Month::operator -=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Month, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthImpl_monthsBetween(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Month *arg1 = (Month *) 0 ;
  Month *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthImpl_monthsBetween",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Month, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthImpl_monthsBetween" "', argument " "1"" of type '" "Month const *""'"); 
  }
  arg1 = reinterpret_cast< Month * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Month,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthImpl_monthsBetween" "', argument " "2"" of type '" "Month const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthImpl_monthsBetween" "', argument " "2"" of type '" "Month const &""'"); 
  }
  arg2 = reinterpret_cast< Month * >(argp2);
  {
    try {
      result = (Integer)((Month const *)arg1)->monthsBetween((Month const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Month const *)arg1)->monthsBetween((Month const &)*arg2);  in Month::monthsBetween(Month const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthImpl_monthMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":MonthImpl_monthMax")) SWIG_fail;
  {
    try {
      result = (Integer)Month_monthMax();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)Month_monthMax();  in Month::Month_monthMax(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthImpl_monthMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":MonthImpl_monthMin")) SWIG_fail;
  {
    try {
      result = (Integer)Month_monthMin();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)Month_monthMin();  in Month::Month_monthMin(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonthImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Month *arg1 = (Month *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonthImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Month, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonthImpl" "', argument " "1"" of type '" "Month *""'"); 
  }
  arg1 = reinterpret_cast< Month * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonthImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Month, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_YearImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Year *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_YearImpl")) SWIG_fail;
  {
    try {
      result = (Year *)new Year();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Year *)new Year();  in Year::Year(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Year, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YearImpl___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Year *arg1 = (Year *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Year *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YearImpl___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Year, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YearImpl___iadd__" "', argument " "1"" of type '" "Year *""'"); 
  }
  arg1 = reinterpret_cast< Year * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "YearImpl___iadd__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (Year *) &(arg1)->operator +=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Year *) &(arg1)->operator +=(arg2);  in Year::operator +=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Year, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YearImpl___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Year *arg1 = (Year *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Year *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YearImpl___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Year, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YearImpl___isub__" "', argument " "1"" of type '" "Year *""'"); 
  }
  arg1 = reinterpret_cast< Year * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "YearImpl___isub__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (Year *) &(arg1)->operator -=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Year *) &(arg1)->operator -=(arg2);  in Year::operator -=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Year, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YearImpl_isLeapYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Year *arg1 = (Year *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YearImpl_isLeapYear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Year, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YearImpl_isLeapYear" "', argument " "1"" of type '" "Year const *""'"); 
  }
  arg1 = reinterpret_cast< Year * >(argp1);
  {
    try {
      result = (Bool)((Year const *)arg1)->isLeapYear();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Year const *)arg1)->isLeapYear();  in Year::isLeapYear() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YearImpl_yearsBetween(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Year *arg1 = (Year *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YearImpl_yearsBetween",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Year, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YearImpl_yearsBetween" "', argument " "1"" of type '" "Year const *""'"); 
  }
  arg1 = reinterpret_cast< Year * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YearImpl_yearsBetween" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "YearImpl_yearsBetween" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = (Integer)((Year const *)arg1)->yearsBetween((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Year const *)arg1)->yearsBetween((Year const &)*arg2);  in Year::yearsBetween(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YearImpl_yearMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":YearImpl_yearMax")) SWIG_fail;
  {
    try {
      result = (Integer)Year_yearMax();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)Year_yearMax();  in Year::Year_yearMax(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YearImpl_yearMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":YearImpl_yearMin")) SWIG_fail;
  {
    try {
      result = (Integer)Year_yearMin();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)Year_yearMin();  in Year::Year_yearMin(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_YearImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Year *arg1 = (Year *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_YearImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Year, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_YearImpl" "', argument " "1"" of type '" "Year *""'"); 
  }
  arg1 = reinterpret_cast< Year * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *YearImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Year, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DaysImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Days *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DaysImpl")) SWIG_fail;
  {
    try {
      result = (Days *)new Days();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Days *)new Days();  in Days::Days(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Days, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysImpl___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Days *arg1 = (Days *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Days *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DaysImpl___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Days, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysImpl___iadd__" "', argument " "1"" of type '" "Days *""'"); 
  }
  arg1 = reinterpret_cast< Days * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DaysImpl___iadd__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (Days *) &(arg1)->operator +=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Days *) &(arg1)->operator +=(arg2);  in Days::operator +=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Days, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysImpl___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Days *arg1 = (Days *) 0 ;
  Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Days *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DaysImpl___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Days, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysImpl___isub__" "', argument " "1"" of type '" "Days *""'"); 
  }
  arg1 = reinterpret_cast< Days * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DaysImpl___isub__" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  {
    try {
      result = (Days *) &(arg1)->operator -=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Days *) &(arg1)->operator -=(arg2);  in Days::operator -=(Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Days, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysImpl_daysMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":DaysImpl_daysMax")) SWIG_fail;
  {
    try {
      result = (Integer)Days_daysMax();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)Days_daysMax();  in Days::Days_daysMax(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysImpl_daysMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)":DaysImpl_daysMin")) SWIG_fail;
  {
    try {
      result = (Integer)Days_daysMin();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)Days_daysMin();  in Days::Days_daysMin(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DaysImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Days *arg1 = (Days *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DaysImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Days, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DaysImpl" "', argument " "1"" of type '" "Days *""'"); 
  }
  arg1 = reinterpret_cast< Days * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DaysImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Days, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DateImpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DateImpl")) SWIG_fail;
  {
    try {
      result = (Date *)new Date();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *)new Date();  in Date::Date(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DateImpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  String *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DateImpl",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DateImpl" "', argument " "1"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DateImpl" "', argument " "1"" of type '" "String const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Date *)new Date((String const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *)new Date((String const &)*arg1);  in Date::Date(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DateImpl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BigInteger arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DateImpl",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateImpl" "', argument " "1"" of type '" "BigInteger""'");
  } 
  arg1 = static_cast< BigInteger >(val1);
  {
    try {
      result = (Date *)new Date(arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *)new Date(arg1);  in Date::Date(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DateImpl__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Year *arg1 = 0 ;
  Month *arg2 = 0 ;
  DayOfMonth *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DateImpl",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DateImpl" "', argument " "1"" of type '" "Year const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DateImpl" "', argument " "1"" of type '" "Year const &""'"); 
  }
  arg1 = reinterpret_cast< Year * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Month,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DateImpl" "', argument " "2"" of type '" "Month const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DateImpl" "', argument " "2"" of type '" "Month const &""'"); 
  }
  arg2 = reinterpret_cast< Month * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DayOfMonth,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DateImpl" "', argument " "3"" of type '" "DayOfMonth const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DateImpl" "', argument " "3"" of type '" "DayOfMonth const &""'"); 
  }
  arg3 = reinterpret_cast< DayOfMonth * >(argp3);
  {
    try {
      result = (Date *)new Date((Year const &)*arg1,(Month const &)*arg2,(DayOfMonth const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *)new Date((Year const &)*arg1,(Month const &)*arg2,(DayOfMonth const &)*arg3);  in Date::Date(Year const &,Month const &,DayOfMonth const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DateImpl__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Integer arg1 ;
  Integer arg2 ;
  Integer arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DateImpl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateImpl" "', argument " "1"" of type '" "Integer""'");
  } 
  arg1 = static_cast< Integer >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DateImpl" "', argument " "2"" of type '" "Integer""'");
  } 
  arg2 = static_cast< Integer >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DateImpl" "', argument " "3"" of type '" "Integer""'");
  } 
  arg3 = static_cast< Integer >(val3);
  {
    try {
      result = (Date *)new Date(arg1,arg2,arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *)new Date(arg1,arg2,arg3);  in Date::Date(Integer,Integer,Integer); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DateImpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DateImpl__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DateImpl__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DateImpl__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Year, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Month, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_DayOfMonth, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_DateImpl__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DateImpl__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DateImpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Date::Date()\n"
    "    Date::Date(String const &)\n"
    "    Date::Date(BigInteger)\n"
    "    Date::Date(Year const &,Month const &,DayOfMonth const &)\n"
    "    Date::Date(Integer,Integer,Integer)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DateImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DateImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DateImpl" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      delete arg1;
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing delete arg1;  in Date::Date(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_copyFrom" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl_copyFrom" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl_copyFrom" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Date *) &Date_copyFrom(arg1,(Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &Date_copyFrom(arg1,(Date const &)*arg2);  in Date::copyFrom(Date const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_daysBetween(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_daysBetween",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_daysBetween" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl_daysBetween" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl_daysBetween" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Integer)((Date const *)arg1)->daysBetween((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Date const *)arg1)->daysBetween((Date const &)*arg2);  in Date::daysBetween(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_asInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BigInteger result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_asInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_asInteger" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (BigInteger)((Date const *)arg1)->asInteger();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (BigInteger)((Date const *)arg1)->asInteger();  in Date::asInteger() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_yearAsInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_yearAsInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_yearAsInteger" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (Integer)((Date const *)arg1)->yearAsInteger();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Date const *)arg1)->yearAsInteger();  in Date::yearAsInteger() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_isLeapYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_isLeapYear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_isLeapYear" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (Bool)((Date const *)arg1)->isLeapYear();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Date const *)arg1)->isLeapYear();  in Date::isLeapYear() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_monthAsInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_monthAsInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_monthAsInteger" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (Integer)((Date const *)arg1)->monthAsInteger();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Date const *)arg1)->monthAsInteger();  in Date::monthAsInteger() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_dayOfMonthAsInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_dayOfMonthAsInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_dayOfMonthAsInteger" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (Integer)((Date const *)arg1)->dayOfMonthAsInteger();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Date const *)arg1)->dayOfMonthAsInteger();  in Date::dayOfMonthAsInteger() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_weekDayAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_weekDayAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_weekDayAsString" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = Date_weekDayAsString(arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = Date_weekDayAsString(arg1);  in Date::weekDayAsString(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_weekNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Integer result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_weekNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_weekNumber" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (Integer)((Date const *)arg1)->weekNumber();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Integer)((Date const *)arg1)->weekNumber();  in Date::weekNumber() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_modJulianDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BigInteger result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_modJulianDay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_modJulianDay" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (BigInteger)((Date const *)arg1)->modJulianDay();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (BigInteger)((Date const *)arg1)->modJulianDay();  in Date::modJulianDay() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_julianDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BigInteger result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateImpl_julianDay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_julianDay" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (BigInteger)((Date const *)arg1)->julianDay();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (BigInteger)((Date const *)arg1)->julianDay();  in Date::julianDay() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___eq__" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl___eq__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl___eq__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((Date const *)arg1)->operator ==((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Date const *)arg1)->operator ==((Date const &)*arg2);  in Date::operator ==(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___ne__" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl___ne__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl___ne__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((Date const *)arg1)->operator !=((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Date const *)arg1)->operator !=((Date const &)*arg2);  in Date::operator !=(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___lt__" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl___lt__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl___lt__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((Date const *)arg1)->operator <((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Date const *)arg1)->operator <((Date const &)*arg2);  in Date::operator <(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___le__" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl___le__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl___le__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((Date const *)arg1)->operator <=((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Date const *)arg1)->operator <=((Date const &)*arg2);  in Date::operator <=(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___gt__" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl___gt__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl___gt__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((Date const *)arg1)->operator >((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Date const *)arg1)->operator >((Date const &)*arg2);  in Date::operator >(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___ge__" "', argument " "1"" of type '" "Date const *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateImpl___ge__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateImpl___ge__" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((Date const *)arg1)->operator >=((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Date const *)arg1)->operator >=((Date const &)*arg2);  in Date::operator >=(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___iadd__" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl___iadd__" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      result = (Date *) &(arg1)->operator +=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &(arg1)->operator +=(arg2);  in Date::operator +=(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_addDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_addDay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_addDay" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_addDay" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->addDay(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->addDay(arg2);  in Date::addDay(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_addWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_addWeek",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_addWeek" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_addWeek" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->addWeek(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->addWeek(arg2);  in Date::addWeek(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_addMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_addMonth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_addMonth" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_addMonth" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->addMonth(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->addMonth(arg2);  in Date::addMonth(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_addYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_addYear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_addYear" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_addYear" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->addYear(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->addYear(arg2);  in Date::addYear(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl___isub__" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl___isub__" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      result = (Date *) &(arg1)->operator -=(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &(arg1)->operator -=(arg2);  in Date::operator -=(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_subtractDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_subtractDay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_subtractDay" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_subtractDay" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->subtractDay(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->subtractDay(arg2);  in Date::subtractDay(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_subtractWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_subtractWeek",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_subtractWeek" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_subtractWeek" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->subtractWeek(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->subtractWeek(arg2);  in Date::subtractWeek(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_subtractMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_subtractMonth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_subtractMonth" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_subtractMonth" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->subtractMonth(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->subtractMonth(arg2);  in Date::subtractMonth(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_subtractYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *arg1 = (Date *) 0 ;
  BigInteger arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateImpl_subtractYear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateImpl_subtractYear" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateImpl_subtractYear" "', argument " "2"" of type '" "BigInteger""'");
  } 
  arg2 = static_cast< BigInteger >(val2);
  {
    try {
      (arg1)->subtractYear(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->subtractYear(arg2);  in Date::subtractYear(BigInteger); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_maxDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":DateImpl_maxDate")) SWIG_fail;
  {
    try {
      result = (Date *) &Date_maxDate();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &Date_maxDate();  in Date::Date_maxDate(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateImpl_minDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":DateImpl_minDate")) SWIG_fail;
  {
    try {
      result = (Date *) &Date_minDate();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &Date_minDate();  in Date::Date_minDate(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DateImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Date, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalendarRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CalendarRuleImpl")) SWIG_fail;
  {
    try {
      result = (CalendarRule *)new CalendarRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (CalendarRule *)new CalendarRule();  in CalendarRule::CalendarRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  CalendarRule > *smartresult = result ? new boost::shared_ptr<  CalendarRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalendarRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalendarRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalendarRuleImpl" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (void)arg1; delete smartarg1;  in CalendarRule::CalendarRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_createCalendarRuleSmartPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)":CalendarRuleImpl_createCalendarRuleSmartPtr")) SWIG_fail;
  {
    try {
      result = CalendarRule_createCalendarRuleSmartPtr();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = CalendarRule_createCalendarRuleSmartPtr();  in CalendarRule::CalendarRule_createCalendarRuleSmartPtr(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  CalendarRule > *smartresult = result ? new boost::shared_ptr<  CalendarRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  CalendarRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CalendarRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_copyFrom" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRuleImpl_copyFrom" "', argument " "2"" of type '" "CalendarRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRuleImpl_copyFrom" "', argument " "2"" of type '" "CalendarRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2);
      arg2 = const_cast< CalendarRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< CalendarRule * >(reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (CalendarRule *) &CalendarRule_copyFrom(arg1,(CalendarRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (CalendarRule *) &CalendarRule_copyFrom(arg1,(CalendarRule const &)*arg2);  in CalendarRule::copyFrom(CalendarRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  CalendarRule > *smartresult = new boost::shared_ptr<  CalendarRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_className",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_className" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = CalendarRule_className((CalendarRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = CalendarRule_className((CalendarRule const *)arg1);  in CalendarRule::className() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  CalendarRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl___eq__" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRuleImpl___eq__" "', argument " "2"" of type '" "CalendarRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRuleImpl___eq__" "', argument " "2"" of type '" "CalendarRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2);
      arg2 = const_cast< CalendarRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< CalendarRule * >(reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((CalendarRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((CalendarRule const &)*arg2);  in CalendarRule::operator ==(CalendarRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  CalendarRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl___ne__" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRuleImpl___ne__" "', argument " "2"" of type '" "CalendarRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRuleImpl___ne__" "', argument " "2"" of type '" "CalendarRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2);
      arg2 = const_cast< CalendarRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< CalendarRule * >(reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((CalendarRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((CalendarRule const &)*arg2);  in CalendarRule::operator !=(CalendarRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_setRuleName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl_setRuleName",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_setRuleName" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRuleImpl_setRuleName" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRuleImpl_setRuleName" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setRuleName((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setRuleName((String const &)*arg2);  in CalendarRule::setRuleName(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_setHolidayName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl_setHolidayName",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_setHolidayName" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRuleImpl_setHolidayName" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRuleImpl_setHolidayName" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setHolidayName((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setHolidayName((String const &)*arg2);  in CalendarRule::setHolidayName(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_setEnabledFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  Bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl_setEnabledFlag",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_setEnabledFlag" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CalendarRuleImpl_setEnabledFlag" "', argument " "2"" of type '" "Bool""'");
  } 
  arg2 = static_cast< Bool >(val2);
  {
    try {
      (arg1)->setEnabledFlag(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setEnabledFlag(arg2);  in CalendarRule::setEnabledFlag(Bool); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_setStartEffectiveDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl_setStartEffectiveDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_setStartEffectiveDate" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRuleImpl_setStartEffectiveDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRuleImpl_setStartEffectiveDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      (arg1)->setStartEffectiveDate((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setStartEffectiveDate((Date const &)*arg2);  in CalendarRule::setStartEffectiveDate(Date const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_setEndEffectiveDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule > tempshared1 ;
  boost::shared_ptr< CalendarRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRuleImpl_setEndEffectiveDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_setEndEffectiveDate" "', argument " "1"" of type '" "CalendarRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRuleImpl_setEndEffectiveDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRuleImpl_setEndEffectiveDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      (arg1)->setEndEffectiveDate((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setEndEffectiveDate((Date const &)*arg2);  in CalendarRule::setEndEffectiveDate(Date const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_getRuleName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_getRuleName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_getRuleName" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (String *) &((CalendarRule const *)arg1)->getRuleName();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (String *) &((CalendarRule const *)arg1)->getRuleName();  in CalendarRule::getRuleName() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_getHolidayName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_getHolidayName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_getHolidayName" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (String *) &((CalendarRule const *)arg1)->getHolidayName();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (String *) &((CalendarRule const *)arg1)->getHolidayName();  in CalendarRule::getHolidayName() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_isEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_isEnabled",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_isEnabled" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((CalendarRule const *)arg1)->isEnabled();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((CalendarRule const *)arg1)->isEnabled();  in CalendarRule::isEnabled() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_getCanCalcWeekendFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_getCanCalcWeekendFlag",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_getCanCalcWeekendFlag" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((CalendarRule const *)arg1)->getCanCalcWeekendFlag();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((CalendarRule const *)arg1)->getCanCalcWeekendFlag();  in CalendarRule::getCanCalcWeekendFlag() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_getCanCalcDateFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_getCanCalcDateFlag",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_getCanCalcDateFlag" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((CalendarRule const *)arg1)->getCanCalcDateFlag();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((CalendarRule const *)arg1)->getCanCalcDateFlag();  in CalendarRule::getCanCalcDateFlag() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_getStartEffectiveDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_getStartEffectiveDate",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_getStartEffectiveDate" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Date *) &((CalendarRule const *)arg1)->getStartEffectiveDate();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &((CalendarRule const *)arg1)->getStartEffectiveDate();  in CalendarRule::getStartEffectiveDate() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_getEndEffectiveDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_getEndEffectiveDate",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_getEndEffectiveDate" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Date *) &((CalendarRule const *)arg1)->getEndEffectiveDate();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &((CalendarRule const *)arg1)->getEndEffectiveDate();  in CalendarRule::getEndEffectiveDate() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRuleImpl_getEnabledFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRule *arg1 = (CalendarRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarRule const > tempshared1 ;
  boost::shared_ptr< CalendarRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRuleImpl_getEnabledFlag",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRuleImpl_getEnabledFlag" "', argument " "1"" of type '" "CalendarRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarRule > * >(argp1);
      arg1 = const_cast< CalendarRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)CalendarRule_getEnabledFlag((CalendarRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)CalendarRule_getEnabledFlag((CalendarRule const *)arg1);  in CalendarRule::getEnabledFlag() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalendarRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WeekendRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WeekendRuleImpl")) SWIG_fail;
  {
    try {
      result = (WeekendRule *)new WeekendRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (WeekendRule *)new WeekendRule();  in WeekendRule::WeekendRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  WeekendRule > *smartresult = result ? new boost::shared_ptr<  WeekendRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  WeekendRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule > tempshared1 ;
  boost::shared_ptr< WeekendRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekendRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl___eq__" "', argument " "1"" of type '" "WeekendRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl___eq__" "', argument " "2"" of type '" "WeekendRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl___eq__" "', argument " "2"" of type '" "WeekendRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2);
      arg2 = const_cast< WeekendRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< WeekendRule * >(reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((WeekendRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((WeekendRule const &)*arg2);  in WeekendRule::operator ==(WeekendRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  WeekendRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule > tempshared1 ;
  boost::shared_ptr< WeekendRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekendRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl___ne__" "', argument " "1"" of type '" "WeekendRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl___ne__" "', argument " "2"" of type '" "WeekendRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl___ne__" "', argument " "2"" of type '" "WeekendRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2);
      arg2 = const_cast< WeekendRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< WeekendRule * >(reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((WeekendRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((WeekendRule const &)*arg2);  in WeekendRule::operator !=(WeekendRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  WeekendRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeekendRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = WeekendRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = WeekendRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in WeekendRule::WeekendRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  WeekendRule > *smartresult = result ? new boost::shared_ptr<  WeekendRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_weekendDaysAsStringSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule > tempshared1 ;
  boost::shared_ptr< WeekendRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SetString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeekendRuleImpl_weekendDaysAsStringSet",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_weekendDaysAsStringSet" "', argument " "1"" of type '" "WeekendRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = WeekendRule_weekendDaysAsStringSet(arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = WeekendRule_weekendDaysAsStringSet(arg1);  in WeekendRule::weekendDaysAsStringSet(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetString(static_cast< const SetString& >(result))), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_addDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule > tempshared1 ;
  boost::shared_ptr< WeekendRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekendRuleImpl_addDay",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_addDay" "', argument " "1"" of type '" "WeekendRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl_addDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl_addDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      WeekendRule_addDay(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing WeekendRule_addDay(arg1,(std::string const &)*arg2);  in WeekendRule::addDay(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_removeDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule > tempshared1 ;
  boost::shared_ptr< WeekendRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekendRuleImpl_removeDay",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_removeDay" "', argument " "1"" of type '" "WeekendRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl_removeDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl_removeDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      WeekendRule_removeDay(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing WeekendRule_removeDay(arg1,(std::string const &)*arg2);  in WeekendRule::removeDay(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_weekendsForYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared1 ;
  boost::shared_ptr< WeekendRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekendRuleImpl_weekendsForYear",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_weekendsForYear" "', argument " "1"" of type '" "WeekendRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl_weekendsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl_weekendsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((WeekendRule const *)arg1)->weekendsForYear((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((WeekendRule const *)arg1)->weekendsForYear((Year const &)*arg2);  in WeekendRule::weekendsForYear(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_isWeekend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared1 ;
  boost::shared_ptr< WeekendRule const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekendRuleImpl_isWeekend",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_isWeekend" "', argument " "1"" of type '" "WeekendRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl_isWeekend" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl_isWeekend" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Bool)WeekendRule_isWeekend((WeekendRule const *)arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)WeekendRule_isWeekend((WeekendRule const *)arg1,(std::string const &)*arg2);  in WeekendRule::isWeekend(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_isWeekendForYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  Year *arg2 = 0 ;
  String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared1 ;
  boost::shared_ptr< WeekendRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeekendRuleImpl_isWeekendForYear",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_isWeekendForYear" "', argument " "1"" of type '" "WeekendRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl_isWeekendForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl_isWeekendForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeekendRuleImpl_isWeekendForYear" "', argument " "3"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl_isWeekendForYear" "', argument " "3"" of type '" "String const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (Bool)WeekendRule_isWeekendForYear((WeekendRule const *)arg1,(Year const &)*arg2,(std::string const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)WeekendRule_isWeekendForYear((WeekendRule const *)arg1,(Year const &)*arg2,(std::string const &)*arg3);  in WeekendRule::isWeekendForYear(Year const &,String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared1 ;
  boost::shared_ptr< WeekendRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeekendRuleImpl_size",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_size" "', argument " "1"" of type '" "WeekendRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((WeekendRule const *)arg1)->size();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((WeekendRule const *)arg1)->size();  in WeekendRule::size() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_isEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared1 ;
  boost::shared_ptr< WeekendRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeekendRuleImpl_isEmpty",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_isEmpty" "', argument " "1"" of type '" "WeekendRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((WeekendRule const *)arg1)->isEmpty();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((WeekendRule const *)arg1)->isEmpty();  in WeekendRule::isEmpty() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared1 ;
  boost::shared_ptr< WeekendRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  CalendarRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeekendRuleImpl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_clone" "', argument " "1"" of type '" "WeekendRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (CalendarRule *)((WeekendRule const *)arg1)->clone();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (CalendarRule *)((WeekendRule const *)arg1)->clone();  in WeekendRule::clone() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  CalendarRule > *smartresult = result ? new boost::shared_ptr<  CalendarRule >(result SWIG_NO_NULL_DELETER_0) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0 | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeekendRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  WeekendRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule > tempshared1 ;
  boost::shared_ptr< WeekendRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< WeekendRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  WeekendRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeekendRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeekendRuleImpl_copyFrom" "', argument " "1"" of type '" "WeekendRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeekendRuleImpl_copyFrom" "', argument " "2"" of type '" "WeekendRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeekendRuleImpl_copyFrom" "', argument " "2"" of type '" "WeekendRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2);
      arg2 = const_cast< WeekendRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< WeekendRule * >(reinterpret_cast< boost::shared_ptr< const WeekendRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (WeekendRule *) &WeekendRule_copyFrom(arg1,(WeekendRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (WeekendRule *) &WeekendRule_copyFrom(arg1,(WeekendRule const &)*arg2);  in WeekendRule::copyFrom(WeekendRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  WeekendRule > *smartresult = new boost::shared_ptr<  WeekendRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WeekendRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WeekendRule *arg1 = (WeekendRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< WeekendRule > tempshared1 ;
  boost::shared_ptr< WeekendRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WeekendRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WeekendRuleImpl" "', argument " "1"" of type '" "WeekendRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  WeekendRule > * >(argp1);
      arg1 = const_cast< WeekendRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WeekendRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DateRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DateRuleImpl")) SWIG_fail;
  {
    try {
      result = (DateRule *)new DateRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DateRule *)new DateRule();  in DateRule::DateRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DateRule > *smartresult = result ? new boost::shared_ptr<  DateRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DateRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  DateRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DateRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl___eq__" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DateRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl___eq__" "', argument " "2"" of type '" "DateRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl___eq__" "', argument " "2"" of type '" "DateRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2);
      arg2 = const_cast< DateRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DateRule * >(reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((DateRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((DateRule const &)*arg2);  in DateRule::operator ==(DateRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  DateRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DateRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl___ne__" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DateRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl___ne__" "', argument " "2"" of type '" "DateRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl___ne__" "', argument " "2"" of type '" "DateRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2);
      arg2 = const_cast< DateRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DateRule * >(reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((DateRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((DateRule const &)*arg2);  in DateRule::operator !=(DateRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_setWeekendRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  WeekendRuleSharedPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  WeekendRuleSharedPtr tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_setWeekendRule",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_setWeekendRule" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_setWeekendRule" "', argument " "2"" of type '" "WeekendRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< WeekendRuleSharedPtr * >(argp2);
      delete reinterpret_cast< WeekendRuleSharedPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< WeekendRuleSharedPtr * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->setWeekendRule((WeekendRuleSharedPtr const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setWeekendRule((WeekendRuleSharedPtr const &)*arg2);  in DateRule::setWeekendRule(WeekendRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_setHolidayDuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  HolidayDuration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_setHolidayDuration",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_setHolidayDuration" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HolidayDuration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_setHolidayDuration" "', argument " "2"" of type '" "HolidayDuration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_setHolidayDuration" "', argument " "2"" of type '" "HolidayDuration const &""'"); 
  }
  arg2 = reinterpret_cast< HolidayDuration * >(argp2);
  {
    try {
      (arg1)->setHolidayDuration((HolidayDuration const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setHolidayDuration((HolidayDuration const &)*arg2);  in DateRule::setHolidayDuration(HolidayDuration const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_setIgnoreFridayMonthEndFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  Bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_setIgnoreFridayMonthEndFlag",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_setIgnoreFridayMonthEndFlag" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateRuleImpl_setIgnoreFridayMonthEndFlag" "', argument " "2"" of type '" "Bool""'");
  } 
  arg2 = static_cast< Bool >(val2);
  {
    try {
      (arg1)->setIgnoreFridayMonthEndFlag(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setIgnoreFridayMonthEndFlag(arg2);  in DateRule::setIgnoreFridayMonthEndFlag(Bool); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_setAddNextYearFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  Bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_setAddNextYearFlag",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_setAddNextYearFlag" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateRuleImpl_setAddNextYearFlag" "', argument " "2"" of type '" "Bool""'");
  } 
  arg2 = static_cast< Bool >(val2);
  {
    try {
      (arg1)->setAddNextYearFlag(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setAddNextYearFlag(arg2);  in DateRule::setAddNextYearFlag(Bool); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_setAddPriorYearFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  Bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_setAddPriorYearFlag",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_setAddPriorYearFlag" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateRuleImpl_setAddPriorYearFlag" "', argument " "2"" of type '" "Bool""'");
  } 
  arg2 = static_cast< Bool >(val2);
  {
    try {
      (arg1)->setAddPriorYearFlag(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setAddPriorYearFlag(arg2);  in DateRule::setAddPriorYearFlag(Bool); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_setWeekendAdjustment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_setWeekendAdjustment",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_setWeekendAdjustment" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_setWeekendAdjustment" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_setWeekendAdjustment" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      DateRule_setWeekendAdjustment(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing DateRule_setWeekendAdjustment(arg1,(std::string const &)*arg2);  in DateRule::setWeekendAdjustment(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_getWeekendAdjustment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateRuleImpl_getWeekendAdjustment",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_getWeekendAdjustment" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = DateRule_getWeekendAdjustment((DateRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = DateRule_getWeekendAdjustment((DateRule const *)arg1);  in DateRule::getWeekendAdjustment() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_weekendDaysAsStringSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SetString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateRuleImpl_weekendDaysAsStringSet",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_weekendDaysAsStringSet" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = DateRule_weekendDaysAsStringSet(arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = DateRule_weekendDaysAsStringSet(arg1);  in DateRule::weekendDaysAsStringSet(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetString(static_cast< const SetString& >(result))), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_getWeekendRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  WeekendRuleSharedPtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateRuleImpl_getWeekendRule",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_getWeekendRule" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (WeekendRuleSharedPtr *) &((DateRule const *)arg1)->getWeekendRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (WeekendRuleSharedPtr *) &((DateRule const *)arg1)->getWeekendRule();  in DateRule::getWeekendRule() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  WeekendRule > *smartresult = *result ? new boost::shared_ptr<  WeekendRule >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_WeekendRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_getHolidayDuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  HolidayDuration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateRuleImpl_getHolidayDuration",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_getHolidayDuration" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (HolidayDuration *) &((DateRule const *)arg1)->getHolidayDuration();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (HolidayDuration *) &((DateRule const *)arg1)->getHolidayDuration();  in DateRule::getHolidayDuration() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HolidayDuration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_getIgnoreFridayMonthEndFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateRuleImpl_getIgnoreFridayMonthEndFlag",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_getIgnoreFridayMonthEndFlag" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((DateRule const *)arg1)->getIgnoreFridayMonthEndFlag();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DateRule const *)arg1)->getIgnoreFridayMonthEndFlag();  in DateRule::getIgnoreFridayMonthEndFlag() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_getAddNextYearFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateRuleImpl_getAddNextYearFlag",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_getAddNextYearFlag" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((DateRule const *)arg1)->getAddNextYearFlag();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DateRule const *)arg1)->getAddNextYearFlag();  in DateRule::getAddNextYearFlag() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_getAddPriorYearFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateRuleImpl_getAddPriorYearFlag",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_getAddPriorYearFlag" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((DateRule const *)arg1)->getAddPriorYearFlag();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DateRule const *)arg1)->getAddPriorYearFlag();  in DateRule::getAddPriorYearFlag() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_calcDate" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((DateRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((DateRule const *)arg1)->calcDate((Year const &)*arg2);  in DateRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_skipDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_skipDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_skipDate" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_skipDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_skipDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((DateRule const *)arg1)->skipDate((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((DateRule const *)arg1)->skipDate((Date const &)*arg2);  in DateRule::skipDate(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_setExceptionsForYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  Year *arg2 = 0 ;
  SetDate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DateRuleImpl_setExceptionsForYear",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_setExceptionsForYear" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_setExceptionsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_setExceptionsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DateRuleImpl_setExceptionsForYear" "', argument " "3"" of type '" "SetDate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_setExceptionsForYear" "', argument " "3"" of type '" "SetDate const &""'"); 
  }
  arg3 = reinterpret_cast< SetDate * >(argp3);
  {
    try {
      (arg1)->setExceptionsForYear((Year const &)*arg2,(SetDate const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setExceptionsForYear((Year const &)*arg2,(SetDate const &)*arg3);  in DateRule::setExceptionsForYear(Year const &,SetDate const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_getExceptionsForYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule const > tempshared1 ;
  boost::shared_ptr< DateRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_getExceptionsForYear",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_getExceptionsForYear" "', argument " "1"" of type '" "DateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_getExceptionsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_getExceptionsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((DateRule const *)arg1)->getExceptionsForYear((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((DateRule const *)arg1)->getExceptionsForYear((Year const &)*arg2);  in DateRule::getExceptionsForYear(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  DateRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DateRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DateRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateRuleImpl_copyFrom" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DateRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateRuleImpl_copyFrom" "', argument " "2"" of type '" "DateRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateRuleImpl_copyFrom" "', argument " "2"" of type '" "DateRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2);
      arg2 = const_cast< DateRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DateRule * >(reinterpret_cast< boost::shared_ptr< const DateRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (DateRule *) &DateRule_copyFrom(arg1,(DateRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DateRule *) &DateRule_copyFrom(arg1,(DateRule const &)*arg2);  in DateRule::copyFrom(DateRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DateRule > *smartresult = new boost::shared_ptr<  DateRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DateRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DateRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DateRule *arg1 = (DateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DateRule > tempshared1 ;
  boost::shared_ptr< DateRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DateRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DateRuleImpl" "', argument " "1"" of type '" "DateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DateRule > * >(argp1);
      arg1 = const_cast< DateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DateRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_DateRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpecificDateRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SpecificDateRuleImpl")) SWIG_fail;
  {
    try {
      result = (SpecificDateRule *)new SpecificDateRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (SpecificDateRule *)new SpecificDateRule();  in SpecificDateRule::SpecificDateRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  SpecificDateRule > *smartresult = result ? new boost::shared_ptr<  SpecificDateRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecificDateRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *arg1 = (SpecificDateRule *) 0 ;
  SpecificDateRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< SpecificDateRule > tempshared1 ;
  boost::shared_ptr< SpecificDateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< SpecificDateRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpecificDateRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecificDateRuleImpl___eq__" "', argument " "1"" of type '" "SpecificDateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecificDateRuleImpl___eq__" "', argument " "2"" of type '" "SpecificDateRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecificDateRuleImpl___eq__" "', argument " "2"" of type '" "SpecificDateRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2);
      arg2 = const_cast< SpecificDateRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< SpecificDateRule * >(reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((SpecificDateRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((SpecificDateRule const &)*arg2);  in SpecificDateRule::operator ==(SpecificDateRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecificDateRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *arg1 = (SpecificDateRule *) 0 ;
  SpecificDateRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< SpecificDateRule > tempshared1 ;
  boost::shared_ptr< SpecificDateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< SpecificDateRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpecificDateRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecificDateRuleImpl___ne__" "', argument " "1"" of type '" "SpecificDateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecificDateRuleImpl___ne__" "', argument " "2"" of type '" "SpecificDateRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecificDateRuleImpl___ne__" "', argument " "2"" of type '" "SpecificDateRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2);
      arg2 = const_cast< SpecificDateRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< SpecificDateRule * >(reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((SpecificDateRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((SpecificDateRule const &)*arg2);  in SpecificDateRule::operator !=(SpecificDateRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecificDateRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *arg1 = (SpecificDateRule *) 0 ;
  SpecificDateRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< SpecificDateRule > tempshared1 ;
  boost::shared_ptr< SpecificDateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< SpecificDateRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SpecificDateRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpecificDateRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecificDateRuleImpl_copyFrom" "', argument " "1"" of type '" "SpecificDateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecificDateRuleImpl_copyFrom" "', argument " "2"" of type '" "SpecificDateRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecificDateRuleImpl_copyFrom" "', argument " "2"" of type '" "SpecificDateRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2);
      arg2 = const_cast< SpecificDateRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< SpecificDateRule * >(reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (SpecificDateRule *) &SpecificDateRule_copyFrom(arg1,(SpecificDateRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (SpecificDateRule *) &SpecificDateRule_copyFrom(arg1,(SpecificDateRule const &)*arg2);  in SpecificDateRule::copyFrom(SpecificDateRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  SpecificDateRule > *smartresult = new boost::shared_ptr<  SpecificDateRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecificDateRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  SpecificDateRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpecificDateRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecificDateRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = SpecificDateRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = SpecificDateRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in SpecificDateRule::SpecificDateRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  SpecificDateRule > *smartresult = result ? new boost::shared_ptr<  SpecificDateRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecificDateRuleImpl_setSpecifiedDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *arg1 = (SpecificDateRule *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< SpecificDateRule > tempshared1 ;
  boost::shared_ptr< SpecificDateRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpecificDateRuleImpl_setSpecifiedDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecificDateRuleImpl_setSpecifiedDate" "', argument " "1"" of type '" "SpecificDateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecificDateRuleImpl_setSpecifiedDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecificDateRuleImpl_setSpecifiedDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      (arg1)->setSpecifiedDate((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setSpecifiedDate((Date const &)*arg2);  in SpecificDateRule::setSpecifiedDate(Date const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecificDateRuleImpl_getSpecifiedDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *arg1 = (SpecificDateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< SpecificDateRule const > tempshared1 ;
  boost::shared_ptr< SpecificDateRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpecificDateRuleImpl_getSpecifiedDate",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecificDateRuleImpl_getSpecifiedDate" "', argument " "1"" of type '" "SpecificDateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Date *) &((SpecificDateRule const *)arg1)->getSpecifiedDate();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Date *) &((SpecificDateRule const *)arg1)->getSpecifiedDate();  in SpecificDateRule::getSpecifiedDate() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecificDateRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *arg1 = (SpecificDateRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< SpecificDateRule const > tempshared1 ;
  boost::shared_ptr< SpecificDateRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpecificDateRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecificDateRuleImpl_calcDate" "', argument " "1"" of type '" "SpecificDateRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecificDateRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecificDateRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((SpecificDateRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((SpecificDateRule const *)arg1)->calcDate((Year const &)*arg2);  in SpecificDateRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecificDateRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecificDateRule *arg1 = (SpecificDateRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< SpecificDateRule > tempshared1 ;
  boost::shared_ptr< SpecificDateRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpecificDateRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecificDateRuleImpl" "', argument " "1"" of type '" "SpecificDateRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  SpecificDateRule > * >(argp1);
      arg1 = const_cast< SpecificDateRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecificDateRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_SpecificDateRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonthDayRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MonthDayRuleImpl")) SWIG_fail;
  {
    try {
      result = (MonthDayRule *)new MonthDayRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (MonthDayRule *)new MonthDayRule();  in MonthDayRule::MonthDayRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  MonthDayRule > *smartresult = result ? new boost::shared_ptr<  MonthDayRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  MonthDayRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule > tempshared1 ;
  boost::shared_ptr< MonthDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< MonthDayRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthDayRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl___eq__" "', argument " "1"" of type '" "MonthDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthDayRuleImpl___eq__" "', argument " "2"" of type '" "MonthDayRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthDayRuleImpl___eq__" "', argument " "2"" of type '" "MonthDayRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2);
      arg2 = const_cast< MonthDayRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< MonthDayRule * >(reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((MonthDayRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((MonthDayRule const &)*arg2);  in MonthDayRule::operator ==(MonthDayRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  MonthDayRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule > tempshared1 ;
  boost::shared_ptr< MonthDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< MonthDayRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthDayRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl___ne__" "', argument " "1"" of type '" "MonthDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthDayRuleImpl___ne__" "', argument " "2"" of type '" "MonthDayRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthDayRuleImpl___ne__" "', argument " "2"" of type '" "MonthDayRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2);
      arg2 = const_cast< MonthDayRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< MonthDayRule * >(reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((MonthDayRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((MonthDayRule const &)*arg2);  in MonthDayRule::operator !=(MonthDayRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  MonthDayRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule > tempshared1 ;
  boost::shared_ptr< MonthDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< MonthDayRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MonthDayRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthDayRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl_copyFrom" "', argument " "1"" of type '" "MonthDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthDayRuleImpl_copyFrom" "', argument " "2"" of type '" "MonthDayRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthDayRuleImpl_copyFrom" "', argument " "2"" of type '" "MonthDayRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2);
      arg2 = const_cast< MonthDayRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< MonthDayRule * >(reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (MonthDayRule *) &MonthDayRule_copyFrom(arg1,(MonthDayRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (MonthDayRule *) &MonthDayRule_copyFrom(arg1,(MonthDayRule const &)*arg2);  in MonthDayRule::copyFrom(MonthDayRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  MonthDayRule > *smartresult = new boost::shared_ptr<  MonthDayRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  MonthDayRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonthDayRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = MonthDayRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = MonthDayRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in MonthDayRule::MonthDayRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  MonthDayRule > *smartresult = result ? new boost::shared_ptr<  MonthDayRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl_setMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  Month *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule > tempshared1 ;
  boost::shared_ptr< MonthDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthDayRuleImpl_setMonth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl_setMonth" "', argument " "1"" of type '" "MonthDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Month,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthDayRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthDayRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  arg2 = reinterpret_cast< Month * >(argp2);
  {
    try {
      (arg1)->setMonth((Month const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setMonth((Month const &)*arg2);  in MonthDayRule::setMonth(Month const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl_getMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule const > tempshared1 ;
  boost::shared_ptr< MonthDayRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Month *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonthDayRuleImpl_getMonth",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl_getMonth" "', argument " "1"" of type '" "MonthDayRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Month *) &((MonthDayRule const *)arg1)->getMonth();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Month *) &((MonthDayRule const *)arg1)->getMonth();  in MonthDayRule::getMonth() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Month, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl_setDayOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  DayOfMonth *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule > tempshared1 ;
  boost::shared_ptr< MonthDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthDayRuleImpl_setDayOfMonth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl_setDayOfMonth" "', argument " "1"" of type '" "MonthDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DayOfMonth,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthDayRuleImpl_setDayOfMonth" "', argument " "2"" of type '" "DayOfMonth const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthDayRuleImpl_setDayOfMonth" "', argument " "2"" of type '" "DayOfMonth const &""'"); 
  }
  arg2 = reinterpret_cast< DayOfMonth * >(argp2);
  {
    try {
      (arg1)->setDayOfMonth((DayOfMonth const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setDayOfMonth((DayOfMonth const &)*arg2);  in MonthDayRule::setDayOfMonth(DayOfMonth const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl_getDayOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule const > tempshared1 ;
  boost::shared_ptr< MonthDayRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  DayOfMonth *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonthDayRuleImpl_getDayOfMonth",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl_getDayOfMonth" "', argument " "1"" of type '" "MonthDayRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (DayOfMonth *) &((MonthDayRule const *)arg1)->getDayOfMonth();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DayOfMonth *) &((MonthDayRule const *)arg1)->getDayOfMonth();  in MonthDayRule::getDayOfMonth() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DayOfMonth, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthDayRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule const > tempshared1 ;
  boost::shared_ptr< MonthDayRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthDayRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthDayRuleImpl_calcDate" "', argument " "1"" of type '" "MonthDayRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthDayRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthDayRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((MonthDayRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((MonthDayRule const *)arg1)->calcDate((Year const &)*arg2);  in MonthDayRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonthDayRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthDayRule *arg1 = (MonthDayRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthDayRule > tempshared1 ;
  boost::shared_ptr< MonthDayRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonthDayRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonthDayRuleImpl" "', argument " "1"" of type '" "MonthDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthDayRule > * >(argp1);
      arg1 = const_cast< MonthDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonthDayRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_MonthDayRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonthWeekDayRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MonthWeekDayRuleImpl")) SWIG_fail;
  {
    try {
      result = (MonthWeekDayRule *)new MonthWeekDayRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (MonthWeekDayRule *)new MonthWeekDayRule();  in MonthWeekDayRule::MonthWeekDayRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  MonthWeekDayRule > *smartresult = result ? new boost::shared_ptr<  MonthWeekDayRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  MonthWeekDayRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< MonthWeekDayRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekDayRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl___eq__" "', argument " "1"" of type '" "MonthWeekDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekDayRuleImpl___eq__" "', argument " "2"" of type '" "MonthWeekDayRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekDayRuleImpl___eq__" "', argument " "2"" of type '" "MonthWeekDayRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2);
      arg2 = const_cast< MonthWeekDayRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< MonthWeekDayRule * >(reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((MonthWeekDayRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((MonthWeekDayRule const &)*arg2);  in MonthWeekDayRule::operator ==(MonthWeekDayRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  MonthWeekDayRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< MonthWeekDayRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekDayRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl___ne__" "', argument " "1"" of type '" "MonthWeekDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekDayRuleImpl___ne__" "', argument " "2"" of type '" "MonthWeekDayRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekDayRuleImpl___ne__" "', argument " "2"" of type '" "MonthWeekDayRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2);
      arg2 = const_cast< MonthWeekDayRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< MonthWeekDayRule * >(reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((MonthWeekDayRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((MonthWeekDayRule const &)*arg2);  in MonthWeekDayRule::operator !=(MonthWeekDayRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  MonthWeekDayRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< MonthWeekDayRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MonthWeekDayRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekDayRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_copyFrom" "', argument " "1"" of type '" "MonthWeekDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekDayRuleImpl_copyFrom" "', argument " "2"" of type '" "MonthWeekDayRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekDayRuleImpl_copyFrom" "', argument " "2"" of type '" "MonthWeekDayRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2);
      arg2 = const_cast< MonthWeekDayRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< MonthWeekDayRule * >(reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (MonthWeekDayRule *) &MonthWeekDayRule_copyFrom(arg1,(MonthWeekDayRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (MonthWeekDayRule *) &MonthWeekDayRule_copyFrom(arg1,(MonthWeekDayRule const &)*arg2);  in MonthWeekDayRule::copyFrom(MonthWeekDayRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  MonthWeekDayRule > *smartresult = new boost::shared_ptr<  MonthWeekDayRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  MonthWeekDayRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonthWeekDayRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = MonthWeekDayRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = MonthWeekDayRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in MonthWeekDayRule::MonthWeekDayRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  MonthWeekDayRule > *smartresult = result ? new boost::shared_ptr<  MonthWeekDayRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_setMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  Month *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekDayRuleImpl_setMonth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_setMonth" "', argument " "1"" of type '" "MonthWeekDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Month,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekDayRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekDayRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  arg2 = reinterpret_cast< Month * >(argp2);
  {
    try {
      (arg1)->setMonth((Month const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setMonth((Month const &)*arg2);  in MonthWeekDayRule::setMonth(Month const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_getMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule const > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Month *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonthWeekDayRuleImpl_getMonth",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_getMonth" "', argument " "1"" of type '" "MonthWeekDayRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Month *) &((MonthWeekDayRule const *)arg1)->getMonth();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Month *) &((MonthWeekDayRule const *)arg1)->getMonth();  in MonthWeekDayRule::getMonth() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Month, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_setMonthWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekDayRuleImpl_setMonthWeek",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_setMonthWeek" "', argument " "1"" of type '" "MonthWeekDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekDayRuleImpl_setMonthWeek" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekDayRuleImpl_setMonthWeek" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      MonthWeekDayRule_setMonthWeek(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing MonthWeekDayRule_setMonthWeek(arg1,(std::string const &)*arg2);  in MonthWeekDayRule::setMonthWeek(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_getMonthWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule const > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonthWeekDayRuleImpl_getMonthWeek",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_getMonthWeek" "', argument " "1"" of type '" "MonthWeekDayRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = MonthWeekDayRule_getMonthWeek((MonthWeekDayRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = MonthWeekDayRule_getMonthWeek((MonthWeekDayRule const *)arg1);  in MonthWeekDayRule::getMonthWeek() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_setWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekDayRuleImpl_setWeekDay",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_setWeekDay" "', argument " "1"" of type '" "MonthWeekDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekDayRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekDayRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      MonthWeekDayRule_setWeekDay(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing MonthWeekDayRule_setWeekDay(arg1,(std::string const &)*arg2);  in MonthWeekDayRule::setWeekDay(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_getWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule const > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonthWeekDayRuleImpl_getWeekDay",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_getWeekDay" "', argument " "1"" of type '" "MonthWeekDayRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = MonthWeekDayRule_getWeekDay((MonthWeekDayRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = MonthWeekDayRule_getWeekDay((MonthWeekDayRule const *)arg1);  in MonthWeekDayRule::getWeekDay() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonthWeekDayRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule const > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonthWeekDayRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonthWeekDayRuleImpl_calcDate" "', argument " "1"" of type '" "MonthWeekDayRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonthWeekDayRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonthWeekDayRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((MonthWeekDayRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((MonthWeekDayRule const *)arg1)->calcDate((Year const &)*arg2);  in MonthWeekDayRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonthWeekDayRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MonthWeekDayRule *arg1 = (MonthWeekDayRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< MonthWeekDayRule > tempshared1 ;
  boost::shared_ptr< MonthWeekDayRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonthWeekDayRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonthWeekDayRuleImpl" "', argument " "1"" of type '" "MonthWeekDayRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  MonthWeekDayRule > * >(argp1);
      arg1 = const_cast< MonthWeekDayRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonthWeekDayRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_MonthWeekDayRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LastDayMonthRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LastDayMonthRuleImpl")) SWIG_fail;
  {
    try {
      result = (LastDayMonthRule *)new LastDayMonthRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (LastDayMonthRule *)new LastDayMonthRule();  in LastDayMonthRule::LastDayMonthRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  LastDayMonthRule > *smartresult = result ? new boost::shared_ptr<  LastDayMonthRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  LastDayMonthRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< LastDayMonthRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LastDayMonthRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl___eq__" "', argument " "1"" of type '" "LastDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastDayMonthRuleImpl___eq__" "', argument " "2"" of type '" "LastDayMonthRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LastDayMonthRuleImpl___eq__" "', argument " "2"" of type '" "LastDayMonthRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2);
      arg2 = const_cast< LastDayMonthRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< LastDayMonthRule * >(reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((LastDayMonthRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((LastDayMonthRule const &)*arg2);  in LastDayMonthRule::operator ==(LastDayMonthRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  LastDayMonthRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< LastDayMonthRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LastDayMonthRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl___ne__" "', argument " "1"" of type '" "LastDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastDayMonthRuleImpl___ne__" "', argument " "2"" of type '" "LastDayMonthRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LastDayMonthRuleImpl___ne__" "', argument " "2"" of type '" "LastDayMonthRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2);
      arg2 = const_cast< LastDayMonthRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< LastDayMonthRule * >(reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((LastDayMonthRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((LastDayMonthRule const &)*arg2);  in LastDayMonthRule::operator !=(LastDayMonthRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  LastDayMonthRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< LastDayMonthRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LastDayMonthRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LastDayMonthRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl_copyFrom" "', argument " "1"" of type '" "LastDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastDayMonthRuleImpl_copyFrom" "', argument " "2"" of type '" "LastDayMonthRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LastDayMonthRuleImpl_copyFrom" "', argument " "2"" of type '" "LastDayMonthRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2);
      arg2 = const_cast< LastDayMonthRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< LastDayMonthRule * >(reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (LastDayMonthRule *) &LastDayMonthRule_copyFrom(arg1,(LastDayMonthRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (LastDayMonthRule *) &LastDayMonthRule_copyFrom(arg1,(LastDayMonthRule const &)*arg2);  in LastDayMonthRule::copyFrom(LastDayMonthRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  LastDayMonthRule > *smartresult = new boost::shared_ptr<  LastDayMonthRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  LastDayMonthRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LastDayMonthRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = LastDayMonthRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = LastDayMonthRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in LastDayMonthRule::LastDayMonthRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  LastDayMonthRule > *smartresult = result ? new boost::shared_ptr<  LastDayMonthRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl_setMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  Month *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LastDayMonthRuleImpl_setMonth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl_setMonth" "', argument " "1"" of type '" "LastDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Month,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastDayMonthRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LastDayMonthRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  arg2 = reinterpret_cast< Month * >(argp2);
  {
    try {
      (arg1)->setMonth((Month const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setMonth((Month const &)*arg2);  in LastDayMonthRule::setMonth(Month const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl_getMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule const > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Month *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LastDayMonthRuleImpl_getMonth",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl_getMonth" "', argument " "1"" of type '" "LastDayMonthRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Month *) &((LastDayMonthRule const *)arg1)->getMonth();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Month *) &((LastDayMonthRule const *)arg1)->getMonth();  in LastDayMonthRule::getMonth() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Month, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl_setWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LastDayMonthRuleImpl_setWeekDay",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl_setWeekDay" "', argument " "1"" of type '" "LastDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastDayMonthRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LastDayMonthRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      LastDayMonthRule_setWeekDay(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing LastDayMonthRule_setWeekDay(arg1,(std::string const &)*arg2);  in LastDayMonthRule::setWeekDay(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl_getWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule const > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LastDayMonthRuleImpl_getWeekDay",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl_getWeekDay" "', argument " "1"" of type '" "LastDayMonthRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = LastDayMonthRule_getWeekDay((LastDayMonthRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = LastDayMonthRule_getWeekDay((LastDayMonthRule const *)arg1);  in LastDayMonthRule::getWeekDay() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastDayMonthRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule const > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LastDayMonthRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastDayMonthRuleImpl_calcDate" "', argument " "1"" of type '" "LastDayMonthRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastDayMonthRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LastDayMonthRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((LastDayMonthRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((LastDayMonthRule const *)arg1)->calcDate((Year const &)*arg2);  in LastDayMonthRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LastDayMonthRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LastDayMonthRule *arg1 = (LastDayMonthRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< LastDayMonthRule > tempshared1 ;
  boost::shared_ptr< LastDayMonthRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LastDayMonthRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LastDayMonthRuleImpl" "', argument " "1"" of type '" "LastDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  LastDayMonthRule > * >(argp1);
      arg1 = const_cast< LastDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LastDayMonthRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_LastDayMonthRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FirstDayMonthRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FirstDayMonthRuleImpl")) SWIG_fail;
  {
    try {
      result = (FirstDayMonthRule *)new FirstDayMonthRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (FirstDayMonthRule *)new FirstDayMonthRule();  in FirstDayMonthRule::FirstDayMonthRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  FirstDayMonthRule > *smartresult = result ? new boost::shared_ptr<  FirstDayMonthRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  FirstDayMonthRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< FirstDayMonthRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayMonthRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl___eq__" "', argument " "1"" of type '" "FirstDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayMonthRuleImpl___eq__" "', argument " "2"" of type '" "FirstDayMonthRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayMonthRuleImpl___eq__" "', argument " "2"" of type '" "FirstDayMonthRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2);
      arg2 = const_cast< FirstDayMonthRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< FirstDayMonthRule * >(reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((FirstDayMonthRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((FirstDayMonthRule const &)*arg2);  in FirstDayMonthRule::operator ==(FirstDayMonthRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  FirstDayMonthRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< FirstDayMonthRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayMonthRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl___ne__" "', argument " "1"" of type '" "FirstDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayMonthRuleImpl___ne__" "', argument " "2"" of type '" "FirstDayMonthRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayMonthRuleImpl___ne__" "', argument " "2"" of type '" "FirstDayMonthRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2);
      arg2 = const_cast< FirstDayMonthRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< FirstDayMonthRule * >(reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((FirstDayMonthRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((FirstDayMonthRule const &)*arg2);  in FirstDayMonthRule::operator !=(FirstDayMonthRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  FirstDayMonthRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< FirstDayMonthRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FirstDayMonthRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayMonthRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl_copyFrom" "', argument " "1"" of type '" "FirstDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayMonthRuleImpl_copyFrom" "', argument " "2"" of type '" "FirstDayMonthRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayMonthRuleImpl_copyFrom" "', argument " "2"" of type '" "FirstDayMonthRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2);
      arg2 = const_cast< FirstDayMonthRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< FirstDayMonthRule * >(reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (FirstDayMonthRule *) &FirstDayMonthRule_copyFrom(arg1,(FirstDayMonthRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (FirstDayMonthRule *) &FirstDayMonthRule_copyFrom(arg1,(FirstDayMonthRule const &)*arg2);  in FirstDayMonthRule::copyFrom(FirstDayMonthRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  FirstDayMonthRule > *smartresult = new boost::shared_ptr<  FirstDayMonthRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  FirstDayMonthRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FirstDayMonthRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = FirstDayMonthRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = FirstDayMonthRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in FirstDayMonthRule::FirstDayMonthRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  FirstDayMonthRule > *smartresult = result ? new boost::shared_ptr<  FirstDayMonthRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl_setMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  Month *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayMonthRuleImpl_setMonth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl_setMonth" "', argument " "1"" of type '" "FirstDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Month,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayMonthRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayMonthRuleImpl_setMonth" "', argument " "2"" of type '" "Month const &""'"); 
  }
  arg2 = reinterpret_cast< Month * >(argp2);
  {
    try {
      (arg1)->setMonth((Month const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setMonth((Month const &)*arg2);  in FirstDayMonthRule::setMonth(Month const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl_getMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule const > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Month *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FirstDayMonthRuleImpl_getMonth",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl_getMonth" "', argument " "1"" of type '" "FirstDayMonthRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Month *) &((FirstDayMonthRule const *)arg1)->getMonth();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Month *) &((FirstDayMonthRule const *)arg1)->getMonth();  in FirstDayMonthRule::getMonth() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Month, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl_setWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayMonthRuleImpl_setWeekDay",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl_setWeekDay" "', argument " "1"" of type '" "FirstDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayMonthRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayMonthRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      FirstDayMonthRule_setWeekDay(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing FirstDayMonthRule_setWeekDay(arg1,(std::string const &)*arg2);  in FirstDayMonthRule::setWeekDay(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl_getWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule const > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FirstDayMonthRuleImpl_getWeekDay",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl_getWeekDay" "', argument " "1"" of type '" "FirstDayMonthRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = FirstDayMonthRule_getWeekDay((FirstDayMonthRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = FirstDayMonthRule_getWeekDay((FirstDayMonthRule const *)arg1);  in FirstDayMonthRule::getWeekDay() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayMonthRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule const > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayMonthRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayMonthRuleImpl_calcDate" "', argument " "1"" of type '" "FirstDayMonthRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayMonthRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayMonthRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((FirstDayMonthRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((FirstDayMonthRule const *)arg1)->calcDate((Year const &)*arg2);  in FirstDayMonthRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FirstDayMonthRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayMonthRule *arg1 = (FirstDayMonthRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayMonthRule > tempshared1 ;
  boost::shared_ptr< FirstDayMonthRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FirstDayMonthRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FirstDayMonthRuleImpl" "', argument " "1"" of type '" "FirstDayMonthRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayMonthRule > * >(argp1);
      arg1 = const_cast< FirstDayMonthRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FirstDayMonthRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_FirstDayMonthRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DerivedRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DerivedRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DerivedRuleImpl")) SWIG_fail;
  {
    try {
      result = (DerivedRule *)new DerivedRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DerivedRule *)new DerivedRule();  in DerivedRule::DerivedRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DerivedRule > *smartresult = result ? new boost::shared_ptr<  DerivedRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivedRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DerivedRule *arg1 = (DerivedRule *) 0 ;
  DerivedRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DerivedRule > tempshared1 ;
  boost::shared_ptr< DerivedRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DerivedRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DerivedRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivedRuleImpl___eq__" "', argument " "1"" of type '" "DerivedRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DerivedRuleImpl___eq__" "', argument " "2"" of type '" "DerivedRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivedRuleImpl___eq__" "', argument " "2"" of type '" "DerivedRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2);
      arg2 = const_cast< DerivedRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DerivedRule * >(reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((DerivedRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((DerivedRule const &)*arg2);  in DerivedRule::operator ==(DerivedRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivedRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DerivedRule *arg1 = (DerivedRule *) 0 ;
  DerivedRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DerivedRule > tempshared1 ;
  boost::shared_ptr< DerivedRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DerivedRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DerivedRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivedRuleImpl___ne__" "', argument " "1"" of type '" "DerivedRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DerivedRuleImpl___ne__" "', argument " "2"" of type '" "DerivedRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivedRuleImpl___ne__" "', argument " "2"" of type '" "DerivedRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2);
      arg2 = const_cast< DerivedRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DerivedRule * >(reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((DerivedRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((DerivedRule const &)*arg2);  in DerivedRule::operator !=(DerivedRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivedRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DerivedRule *arg1 = (DerivedRule *) 0 ;
  DerivedRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DerivedRule > tempshared1 ;
  boost::shared_ptr< DerivedRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DerivedRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DerivedRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DerivedRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivedRuleImpl_copyFrom" "', argument " "1"" of type '" "DerivedRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DerivedRuleImpl_copyFrom" "', argument " "2"" of type '" "DerivedRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivedRuleImpl_copyFrom" "', argument " "2"" of type '" "DerivedRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2);
      arg2 = const_cast< DerivedRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DerivedRule * >(reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (DerivedRule *) &DerivedRule_copyFrom(arg1,(DerivedRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DerivedRule *) &DerivedRule_copyFrom(arg1,(DerivedRule const &)*arg2);  in DerivedRule::copyFrom(DerivedRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DerivedRule > *smartresult = new boost::shared_ptr<  DerivedRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivedRuleImpl_setUnderlying(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DerivedRule *arg1 = (DerivedRule *) 0 ;
  DateRuleSharedPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DerivedRule > tempshared1 ;
  boost::shared_ptr< DerivedRule > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  DateRuleSharedPtr tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DerivedRuleImpl_setUnderlying",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivedRuleImpl_setUnderlying" "', argument " "1"" of type '" "DerivedRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DateRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DerivedRuleImpl_setUnderlying" "', argument " "2"" of type '" "DateRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< DateRuleSharedPtr * >(argp2);
      delete reinterpret_cast< DateRuleSharedPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< DateRuleSharedPtr * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->setUnderlying((DateRuleSharedPtr const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setUnderlying((DateRuleSharedPtr const &)*arg2);  in DerivedRule::setUnderlying(DateRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivedRuleImpl_getUnderlying(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DerivedRule *arg1 = (DerivedRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DerivedRule const > tempshared1 ;
  boost::shared_ptr< DerivedRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  DateRuleSharedPtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DerivedRuleImpl_getUnderlying",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivedRuleImpl_getUnderlying" "', argument " "1"" of type '" "DerivedRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (DateRuleSharedPtr *) &((DerivedRule const *)arg1)->getUnderlying();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DateRuleSharedPtr *) &((DerivedRule const *)arg1)->getUnderlying();  in DerivedRule::getUnderlying() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DateRule > *smartresult = *result ? new boost::shared_ptr<  DateRule >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DateRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DerivedRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DerivedRule *arg1 = (DerivedRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DerivedRule > tempshared1 ;
  boost::shared_ptr< DerivedRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DerivedRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DerivedRuleImpl" "', argument " "1"" of type '" "DerivedRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DerivedRule > * >(argp1);
      arg1 = const_cast< DerivedRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DerivedRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_DerivedRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DaysOffsetRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DaysOffsetRuleImpl")) SWIG_fail;
  {
    try {
      result = (DaysOffsetRule *)new DaysOffsetRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DaysOffsetRule *)new DaysOffsetRule();  in DaysOffsetRule::DaysOffsetRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DaysOffsetRule > *smartresult = result ? new boost::shared_ptr<  DaysOffsetRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysOffsetRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *arg1 = (DaysOffsetRule *) 0 ;
  DaysOffsetRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DaysOffsetRule > tempshared1 ;
  boost::shared_ptr< DaysOffsetRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DaysOffsetRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DaysOffsetRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysOffsetRuleImpl___eq__" "', argument " "1"" of type '" "DaysOffsetRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DaysOffsetRuleImpl___eq__" "', argument " "2"" of type '" "DaysOffsetRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DaysOffsetRuleImpl___eq__" "', argument " "2"" of type '" "DaysOffsetRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2);
      arg2 = const_cast< DaysOffsetRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DaysOffsetRule * >(reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((DaysOffsetRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((DaysOffsetRule const &)*arg2);  in DaysOffsetRule::operator ==(DaysOffsetRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysOffsetRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *arg1 = (DaysOffsetRule *) 0 ;
  DaysOffsetRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DaysOffsetRule > tempshared1 ;
  boost::shared_ptr< DaysOffsetRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DaysOffsetRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DaysOffsetRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysOffsetRuleImpl___ne__" "', argument " "1"" of type '" "DaysOffsetRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DaysOffsetRuleImpl___ne__" "', argument " "2"" of type '" "DaysOffsetRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DaysOffsetRuleImpl___ne__" "', argument " "2"" of type '" "DaysOffsetRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2);
      arg2 = const_cast< DaysOffsetRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DaysOffsetRule * >(reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((DaysOffsetRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((DaysOffsetRule const &)*arg2);  in DaysOffsetRule::operator !=(DaysOffsetRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysOffsetRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *arg1 = (DaysOffsetRule *) 0 ;
  DaysOffsetRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DaysOffsetRule > tempshared1 ;
  boost::shared_ptr< DaysOffsetRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< DaysOffsetRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DaysOffsetRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DaysOffsetRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysOffsetRuleImpl_copyFrom" "', argument " "1"" of type '" "DaysOffsetRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DaysOffsetRuleImpl_copyFrom" "', argument " "2"" of type '" "DaysOffsetRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DaysOffsetRuleImpl_copyFrom" "', argument " "2"" of type '" "DaysOffsetRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2);
      arg2 = const_cast< DaysOffsetRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< DaysOffsetRule * >(reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (DaysOffsetRule *) &DaysOffsetRule_copyFrom(arg1,(DaysOffsetRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (DaysOffsetRule *) &DaysOffsetRule_copyFrom(arg1,(DaysOffsetRule const &)*arg2);  in DaysOffsetRule::copyFrom(DaysOffsetRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DaysOffsetRule > *smartresult = new boost::shared_ptr<  DaysOffsetRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysOffsetRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  DaysOffsetRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DaysOffsetRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysOffsetRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = DaysOffsetRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = DaysOffsetRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in DaysOffsetRule::DaysOffsetRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  DaysOffsetRule > *smartresult = result ? new boost::shared_ptr<  DaysOffsetRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysOffsetRuleImpl_setOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *arg1 = (DaysOffsetRule *) 0 ;
  Days *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DaysOffsetRule > tempshared1 ;
  boost::shared_ptr< DaysOffsetRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DaysOffsetRuleImpl_setOffset",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysOffsetRuleImpl_setOffset" "', argument " "1"" of type '" "DaysOffsetRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Days,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DaysOffsetRuleImpl_setOffset" "', argument " "2"" of type '" "Days const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DaysOffsetRuleImpl_setOffset" "', argument " "2"" of type '" "Days const &""'"); 
  }
  arg2 = reinterpret_cast< Days * >(argp2);
  {
    try {
      (arg1)->setOffset((Days const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setOffset((Days const &)*arg2);  in DaysOffsetRule::setOffset(Days const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysOffsetRuleImpl_getOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *arg1 = (DaysOffsetRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DaysOffsetRule const > tempshared1 ;
  boost::shared_ptr< DaysOffsetRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Days *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DaysOffsetRuleImpl_getOffset",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysOffsetRuleImpl_getOffset" "', argument " "1"" of type '" "DaysOffsetRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Days *) &((DaysOffsetRule const *)arg1)->getOffset();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Days *) &((DaysOffsetRule const *)arg1)->getOffset();  in DaysOffsetRule::getOffset() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Days, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DaysOffsetRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *arg1 = (DaysOffsetRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DaysOffsetRule const > tempshared1 ;
  boost::shared_ptr< DaysOffsetRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DaysOffsetRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DaysOffsetRuleImpl_calcDate" "', argument " "1"" of type '" "DaysOffsetRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DaysOffsetRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DaysOffsetRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((DaysOffsetRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((DaysOffsetRule const *)arg1)->calcDate((Year const &)*arg2);  in DaysOffsetRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DaysOffsetRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DaysOffsetRule *arg1 = (DaysOffsetRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< DaysOffsetRule > tempshared1 ;
  boost::shared_ptr< DaysOffsetRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DaysOffsetRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DaysOffsetRuleImpl" "', argument " "1"" of type '" "DaysOffsetRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  DaysOffsetRule > * >(argp1);
      arg1 = const_cast< DaysOffsetRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DaysOffsetRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_DaysOffsetRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FirstDayAtOrBeforeRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FirstDayAtOrBeforeRuleImpl")) SWIG_fail;
  {
    try {
      result = (FirstDayAtOrBeforeRule *)new FirstDayAtOrBeforeRule();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (FirstDayAtOrBeforeRule *)new FirstDayAtOrBeforeRule();  in FirstDayAtOrBeforeRule::FirstDayAtOrBeforeRule(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  FirstDayAtOrBeforeRule > *smartresult = result ? new boost::shared_ptr<  FirstDayAtOrBeforeRule >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  FirstDayAtOrBeforeRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayAtOrBeforeRuleImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl___eq__" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayAtOrBeforeRuleImpl___eq__" "', argument " "2"" of type '" "FirstDayAtOrBeforeRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayAtOrBeforeRuleImpl___eq__" "', argument " "2"" of type '" "FirstDayAtOrBeforeRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2);
      arg2 = const_cast< FirstDayAtOrBeforeRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< FirstDayAtOrBeforeRule * >(reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((FirstDayAtOrBeforeRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((FirstDayAtOrBeforeRule const &)*arg2);  in FirstDayAtOrBeforeRule::operator ==(FirstDayAtOrBeforeRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  FirstDayAtOrBeforeRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayAtOrBeforeRuleImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl___ne__" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayAtOrBeforeRuleImpl___ne__" "', argument " "2"" of type '" "FirstDayAtOrBeforeRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayAtOrBeforeRuleImpl___ne__" "', argument " "2"" of type '" "FirstDayAtOrBeforeRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2);
      arg2 = const_cast< FirstDayAtOrBeforeRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< FirstDayAtOrBeforeRule * >(reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((FirstDayAtOrBeforeRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((FirstDayAtOrBeforeRule const &)*arg2);  in FirstDayAtOrBeforeRule::operator !=(FirstDayAtOrBeforeRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  FirstDayAtOrBeforeRule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FirstDayAtOrBeforeRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayAtOrBeforeRuleImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl_copyFrom" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayAtOrBeforeRuleImpl_copyFrom" "', argument " "2"" of type '" "FirstDayAtOrBeforeRule const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayAtOrBeforeRuleImpl_copyFrom" "', argument " "2"" of type '" "FirstDayAtOrBeforeRule const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2);
      arg2 = const_cast< FirstDayAtOrBeforeRule * >(tempshared2.get());
    } else {
      arg2 = const_cast< FirstDayAtOrBeforeRule * >(reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp2)->get());
    }
  }
  {
    try {
      result = (FirstDayAtOrBeforeRule *) &FirstDayAtOrBeforeRule_copyFrom(arg1,(FirstDayAtOrBeforeRule const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (FirstDayAtOrBeforeRule *) &FirstDayAtOrBeforeRule_copyFrom(arg1,(FirstDayAtOrBeforeRule const &)*arg2);  in FirstDayAtOrBeforeRule::copyFrom(FirstDayAtOrBeforeRule const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  FirstDayAtOrBeforeRule > *smartresult = new boost::shared_ptr<  FirstDayAtOrBeforeRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CalendarRuleSharedPtr tempshared1 ;
  PyObject * obj0 = 0 ;
  FirstDayAtOrBeforeRuleSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FirstDayAtOrBeforeRuleImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl_downCast" "', argument " "1"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = FirstDayAtOrBeforeRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = FirstDayAtOrBeforeRule_downCast((boost::shared_ptr< CalendarRule > const &)*arg1);  in FirstDayAtOrBeforeRule::FirstDayAtOrBeforeRule_downCast(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  FirstDayAtOrBeforeRule > *smartresult = result ? new boost::shared_ptr<  FirstDayAtOrBeforeRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl_setWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayAtOrBeforeRuleImpl_setWeekDay",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl_setWeekDay" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayAtOrBeforeRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayAtOrBeforeRuleImpl_setWeekDay" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      FirstDayAtOrBeforeRule_setWeekDay(arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing FirstDayAtOrBeforeRule_setWeekDay(arg1,(std::string const &)*arg2);  in FirstDayAtOrBeforeRule::setWeekDay(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl_getWeekDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FirstDayAtOrBeforeRuleImpl_getWeekDay",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl_getWeekDay" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = FirstDayAtOrBeforeRule_getWeekDay((FirstDayAtOrBeforeRule const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = FirstDayAtOrBeforeRule_getWeekDay((FirstDayAtOrBeforeRule const *)arg1);  in FirstDayAtOrBeforeRule::getWeekDay() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl_setStartAtFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  Bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayAtOrBeforeRuleImpl_setStartAtFlag",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl_setStartAtFlag" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirstDayAtOrBeforeRuleImpl_setStartAtFlag" "', argument " "2"" of type '" "Bool""'");
  } 
  arg2 = static_cast< Bool >(val2);
  {
    try {
      (arg1)->setStartAtFlag(arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setStartAtFlag(arg2);  in FirstDayAtOrBeforeRule::setStartAtFlag(Bool const); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl_getStartAtFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FirstDayAtOrBeforeRuleImpl_getStartAtFlag",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl_getStartAtFlag" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((FirstDayAtOrBeforeRule const *)arg1)->getStartAtFlag();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((FirstDayAtOrBeforeRule const *)arg1)->getStartAtFlag();  in FirstDayAtOrBeforeRule::getStartAtFlag() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FirstDayAtOrBeforeRuleImpl_calcDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FirstDayAtOrBeforeRuleImpl_calcDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirstDayAtOrBeforeRuleImpl_calcDate" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FirstDayAtOrBeforeRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FirstDayAtOrBeforeRuleImpl_calcDate" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((FirstDayAtOrBeforeRule const *)arg1)->calcDate((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((FirstDayAtOrBeforeRule const *)arg1)->calcDate((Year const &)*arg2);  in FirstDayAtOrBeforeRule::calcDate(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FirstDayAtOrBeforeRuleImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FirstDayAtOrBeforeRule *arg1 = (FirstDayAtOrBeforeRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > tempshared1 ;
  boost::shared_ptr< FirstDayAtOrBeforeRule > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FirstDayAtOrBeforeRuleImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FirstDayAtOrBeforeRuleImpl" "', argument " "1"" of type '" "FirstDayAtOrBeforeRule *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FirstDayAtOrBeforeRule > * >(argp1);
      arg1 = const_cast< FirstDayAtOrBeforeRule * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FirstDayAtOrBeforeRuleImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalendarImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CalendarImpl")) SWIG_fail;
  {
    try {
      result = (Calendar *)new Calendar();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Calendar *)new Calendar();  in Calendar::Calendar(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  Calendar > *smartresult = result ? new boost::shared_ptr<  Calendar >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_Calendar_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalendarImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalendarImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalendarImpl" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (void)arg1; delete smartarg1;  in Calendar::Calendar(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  Calendar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< Calendar const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Calendar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_copyFrom" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_Calendar_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl_copyFrom" "', argument " "2"" of type '" "Calendar const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarImpl_copyFrom" "', argument " "2"" of type '" "Calendar const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2);
      arg2 = const_cast< Calendar * >(tempshared2.get());
    } else {
      arg2 = const_cast< Calendar * >(reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Calendar *) &Calendar_copyFrom(arg1,(Calendar const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Calendar *) &Calendar_copyFrom(arg1,(Calendar const &)*arg2);  in Calendar::copyFrom(Calendar const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  Calendar > *smartresult = new boost::shared_ptr<  Calendar >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_Calendar_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar const > tempshared1 ;
  boost::shared_ptr< Calendar const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarImpl_className",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_className" "', argument " "1"" of type '" "Calendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = Calendar_className((Calendar const *)arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = Calendar_className((Calendar const *)arg1);  in Calendar::className() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  Calendar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< Calendar const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl___eq__" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_Calendar_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl___eq__" "', argument " "2"" of type '" "Calendar const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarImpl___eq__" "', argument " "2"" of type '" "Calendar const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2);
      arg2 = const_cast< Calendar * >(tempshared2.get());
    } else {
      arg2 = const_cast< Calendar * >(reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator ==((Calendar const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator ==((Calendar const &)*arg2);  in Calendar::operator ==(Calendar const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  Calendar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< Calendar const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl___ne__" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_Calendar_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl___ne__" "', argument " "2"" of type '" "Calendar const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarImpl___ne__" "', argument " "2"" of type '" "Calendar const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2);
      arg2 = const_cast< Calendar * >(tempshared2.get());
    } else {
      arg2 = const_cast< Calendar * >(reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp2)->get());
    }
  }
  {
    try {
      result = (Bool)(arg1)->operator !=((Calendar const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)(arg1)->operator !=((Calendar const &)*arg2);  in Calendar::operator !=(Calendar const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_getCalendarName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar const > tempshared1 ;
  boost::shared_ptr< Calendar const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarImpl_getCalendarName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_getCalendarName" "', argument " "1"" of type '" "Calendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((Calendar const *)arg1)->getCalendarName();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((Calendar const *)arg1)->getCalendarName();  in Calendar::getCalendarName() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_setCalendarName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl_setCalendarName",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_setCalendarName" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl_setCalendarName" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarImpl_setCalendarName" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setCalendarName((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setCalendarName((String const &)*arg2);  in Calendar::setCalendarName(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_addRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  CalendarRuleSharedPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  CalendarRuleSharedPtr tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl_addRule",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_addRule" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl_addRule" "', argument " "2"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp2);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->addRule((CalendarRuleSharedPtr const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->addRule((CalendarRuleSharedPtr const &)*arg2);  in Calendar::addRule(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_removeRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl_removeRule",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_removeRule" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl_removeRule" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarImpl_removeRule" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->removeRule((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->removeRule((String const &)*arg2);  in Calendar::removeRule(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_findRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar const > tempshared1 ;
  boost::shared_ptr< Calendar const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CalendarRule *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl_findRule",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_findRule" "', argument " "1"" of type '" "Calendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl_findRule" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarImpl_findRule" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (CalendarRule *) &((Calendar const *)arg1)->findRule((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (CalendarRule *) &((Calendar const *)arg1)->findRule((String const &)*arg2);  in Calendar::findRule(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr< const CalendarRule > *smartresult = new boost::shared_ptr< const CalendarRule >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_rules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar > tempshared1 ;
  boost::shared_ptr< Calendar > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  CalendarRules result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarImpl_rules",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_rules" "', argument " "1"" of type '" "Calendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = Calendar_rules(arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = Calendar_rules(arg1);  in Calendar::rules(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new CalendarRules(static_cast< const CalendarRules& >(result))), SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_isEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar const > tempshared1 ;
  boost::shared_ptr< Calendar const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarImpl_isEmpty",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_isEmpty" "', argument " "1"" of type '" "Calendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((Calendar const *)arg1)->isEmpty();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Calendar const *)arg1)->isEmpty();  in Calendar::isEmpty() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar const > tempshared1 ;
  boost::shared_ptr< Calendar const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarImpl_size",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_size" "', argument " "1"" of type '" "Calendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((Calendar const *)arg1)->size();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((Calendar const *)arg1)->size();  in Calendar::size() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarImpl_ruleExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Calendar *arg1 = (Calendar *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< Calendar const > tempshared1 ;
  boost::shared_ptr< Calendar const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarImpl_ruleExists",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarImpl_ruleExists" "', argument " "1"" of type '" "Calendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const Calendar > * >(argp1);
      arg1 = const_cast< Calendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarImpl_ruleExists" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarImpl_ruleExists" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Bool)((Calendar const *)arg1)->ruleExists((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((Calendar const *)arg1)->ruleExists((String const &)*arg2);  in Calendar::ruleExists(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *CalendarImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_Calendar_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BusinessCalendarImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BusinessCalendarImpl")) SWIG_fail;
  {
    try {
      result = (BusinessCalendar *)new BusinessCalendar();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (BusinessCalendar *)new BusinessCalendar();  in BusinessCalendar::BusinessCalendar(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  BusinessCalendar > *smartresult = result ? new boost::shared_ptr<  BusinessCalendar >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  BusinessCalendar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar > tempshared1 ;
  boost::shared_ptr< BusinessCalendar > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BusinessCalendar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_copyFrom",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_copyFrom" "', argument " "1"" of type '" "BusinessCalendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_copyFrom" "', argument " "2"" of type '" "BusinessCalendar const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_copyFrom" "', argument " "2"" of type '" "BusinessCalendar const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp2);
      arg2 = const_cast< BusinessCalendar * >(tempshared2.get());
    } else {
      arg2 = const_cast< BusinessCalendar * >(reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp2)->get());
    }
  }
  {
    try {
      result = (BusinessCalendar *) &BusinessCalendar_copyFrom(arg1,(BusinessCalendar const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (BusinessCalendar *) &BusinessCalendar_copyFrom(arg1,(BusinessCalendar const &)*arg2);  in BusinessCalendar::copyFrom(BusinessCalendar const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  BusinessCalendar > *smartresult = new boost::shared_ptr<  BusinessCalendar >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_downCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarSharedPtr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BusinessCalendarSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BusinessCalendarImpl_downCast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_Calendar_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_downCast" "', argument " "1"" of type '" "CalendarSharedPtr const""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< CalendarSharedPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< CalendarSharedPtr * >(argp1);
  }
  {
    try {
      result = BusinessCalendar_downCast(arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = BusinessCalendar_downCast(arg1);  in BusinessCalendar::BusinessCalendar_downCast(CalendarSharedPtr const); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  BusinessCalendar > *smartresult = result ? new boost::shared_ptr<  BusinessCalendar >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_isBusinessDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_isBusinessDay",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_isBusinessDay" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_isBusinessDay" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_isBusinessDay" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((BusinessCalendar const *)arg1)->isBusinessDay((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((BusinessCalendar const *)arg1)->isBusinessDay((Date const &)*arg2);  in BusinessCalendar::isBusinessDay(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_isHoliday(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_isHoliday",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_isHoliday" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_isHoliday" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_isHoliday" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((BusinessCalendar const *)arg1)->isHoliday((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((BusinessCalendar const *)arg1)->isHoliday((Date const &)*arg2);  in BusinessCalendar::isHoliday(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_isEndOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_isEndOfMonth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_isEndOfMonth" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_isEndOfMonth" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_isEndOfMonth" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)((BusinessCalendar const *)arg1)->isEndOfMonth((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((BusinessCalendar const *)arg1)->isEndOfMonth((Date const &)*arg2);  in BusinessCalendar::isEndOfMonth(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_endOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Date result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_endOfMonth",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_endOfMonth" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_endOfMonth" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_endOfMonth" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = ((BusinessCalendar const *)arg1)->endOfMonth((Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((BusinessCalendar const *)arg1)->endOfMonth((Date const &)*arg2);  in BusinessCalendar::endOfMonth(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new Date(static_cast< const Date& >(result))), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_isWeekend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_isWeekend",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_isWeekend" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_isWeekend" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_isWeekend" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Bool)BusinessCalendar_isWeekend((BusinessCalendar const *)arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)BusinessCalendar_isWeekend((BusinessCalendar const *)arg1,(std::string const &)*arg2);  in BusinessCalendar::isWeekend(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_isWeekendForYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BusinessCalendarImpl_isWeekendForYear",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_isWeekendForYear" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_isWeekendForYear" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_isWeekendForYear" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BusinessCalendarImpl_isWeekendForYear" "', argument " "3"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_isWeekendForYear" "', argument " "3"" of type '" "String const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (Bool)BusinessCalendar_isWeekendForYear((BusinessCalendar const *)arg1,(Date const &)*arg2,(std::string const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)BusinessCalendar_isWeekendForYear((BusinessCalendar const *)arg1,(Date const &)*arg2,(std::string const &)*arg3);  in BusinessCalendar::isWeekendForYear(Date const &,String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_isWeekendForDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_isWeekendForDate",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_isWeekendForDate" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_isWeekendForDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_isWeekendForDate" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  {
    try {
      result = (Bool)BusinessCalendar_isWeekendForDate((BusinessCalendar const *)arg1,(Date const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)BusinessCalendar_isWeekendForDate((BusinessCalendar const *)arg1,(Date const &)*arg2);  in BusinessCalendar::isWeekendForDate(Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_addRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  CalendarRuleSharedPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar > tempshared1 ;
  boost::shared_ptr< BusinessCalendar > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  CalendarRuleSharedPtr tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_addRule",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_addRule" "', argument " "1"" of type '" "BusinessCalendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_addRule" "', argument " "2"" of type '" "CalendarRuleSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< CalendarRuleSharedPtr * >(argp2);
      delete reinterpret_cast< CalendarRuleSharedPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< CalendarRuleSharedPtr * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->addRule((CalendarRuleSharedPtr const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->addRule((CalendarRuleSharedPtr const &)*arg2);  in BusinessCalendar::addRule(CalendarRuleSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_removeRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar > tempshared1 ;
  boost::shared_ptr< BusinessCalendar > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_removeRule",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_removeRule" "', argument " "1"" of type '" "BusinessCalendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_removeRule" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_removeRule" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->removeRule((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->removeRule((String const &)*arg2);  in BusinessCalendar::removeRule(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  BusinessCalendar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BusinessCalendar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_add",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_add" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_add" "', argument " "2"" of type '" "BusinessCalendar const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_add" "', argument " "2"" of type '" "BusinessCalendar const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp2);
      arg2 = const_cast< BusinessCalendar * >(tempshared2.get());
    } else {
      arg2 = const_cast< BusinessCalendar * >(reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp2)->get());
    }
  }
  {
    try {
      result = ((BusinessCalendar const *)arg1)->add((BusinessCalendar const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((BusinessCalendar const *)arg1)->add((BusinessCalendar const &)*arg2);  in BusinessCalendar::add(BusinessCalendar const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  BusinessCalendar > *smartresult = new boost::shared_ptr<  BusinessCalendar >(new BusinessCalendar((BusinessCalendar &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Calendar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BusinessCalendarImpl_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_clone" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Calendar *)((BusinessCalendar const *)arg1)->clone();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Calendar *)((BusinessCalendar const *)arg1)->clone();  in BusinessCalendar::clone() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  Calendar > *smartresult = result ? new boost::shared_ptr<  Calendar >(result SWIG_NO_NULL_DELETER_0) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_Calendar_t, 0 | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_businessDays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  Date *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BusinessCalendarImpl_businessDays",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_businessDays" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_businessDays" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_businessDays" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BusinessCalendarImpl_businessDays" "', argument " "3"" of type '" "Date const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_businessDays" "', argument " "3"" of type '" "Date const &""'"); 
  }
  arg3 = reinterpret_cast< Date * >(argp3);
  {
    try {
      result = ((BusinessCalendar const *)arg1)->businessDays((Date const &)*arg2,(Date const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((BusinessCalendar const *)arg1)->businessDays((Date const &)*arg2,(Date const &)*arg3);  in BusinessCalendar::businessDays(Date const &,Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_holidays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  Date *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BusinessCalendarImpl_holidays",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_holidays" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_holidays" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_holidays" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BusinessCalendarImpl_holidays" "', argument " "3"" of type '" "Date const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_holidays" "', argument " "3"" of type '" "Date const &""'"); 
  }
  arg3 = reinterpret_cast< Date * >(argp3);
  {
    try {
      result = ((BusinessCalendar const *)arg1)->holidays((Date const &)*arg2,(Date const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((BusinessCalendar const *)arg1)->holidays((Date const &)*arg2,(Date const &)*arg3);  in BusinessCalendar::holidays(Date const &,Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_weekends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  Date *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BusinessCalendarImpl_weekends",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_weekends" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_weekends" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_weekends" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BusinessCalendarImpl_weekends" "', argument " "3"" of type '" "Date const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_weekends" "', argument " "3"" of type '" "Date const &""'"); 
  }
  arg3 = reinterpret_cast< Date * >(argp3);
  {
    try {
      result = ((BusinessCalendar const *)arg1)->weekends((Date const &)*arg2,(Date const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((BusinessCalendar const *)arg1)->weekends((Date const &)*arg2,(Date const &)*arg3);  in BusinessCalendar::weekends(Date const &,Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_holidaysAndWeekends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Date *arg2 = 0 ;
  Date *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BusinessCalendarImpl_holidaysAndWeekends",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_holidaysAndWeekends" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_holidaysAndWeekends" "', argument " "2"" of type '" "Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_holidaysAndWeekends" "', argument " "2"" of type '" "Date const &""'"); 
  }
  arg2 = reinterpret_cast< Date * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BusinessCalendarImpl_holidaysAndWeekends" "', argument " "3"" of type '" "Date const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_holidaysAndWeekends" "', argument " "3"" of type '" "Date const &""'"); 
  }
  arg3 = reinterpret_cast< Date * >(argp3);
  {
    try {
      result = ((BusinessCalendar const *)arg1)->holidaysAndWeekends((Date const &)*arg2,(Date const &)*arg3);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((BusinessCalendar const *)arg1)->holidaysAndWeekends((Date const &)*arg2,(Date const &)*arg3);  in BusinessCalendar::holidaysAndWeekends(Date const &,Date const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_holidaysForYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_holidaysForYear",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_holidaysForYear" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_holidaysForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_holidaysForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = ((BusinessCalendar const *)arg1)->holidaysForYear((Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((BusinessCalendar const *)arg1)->holidaysForYear((Year const &)*arg2);  in BusinessCalendar::holidaysForYear(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BusinessCalendarImpl_weekendsForYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  Year *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar const > tempshared1 ;
  boost::shared_ptr< BusinessCalendar const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SetDate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BusinessCalendarImpl_weekendsForYear",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusinessCalendarImpl_weekendsForYear" "', argument " "1"" of type '" "BusinessCalendar const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Year,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BusinessCalendarImpl_weekendsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BusinessCalendarImpl_weekendsForYear" "', argument " "2"" of type '" "Year const &""'"); 
  }
  arg2 = reinterpret_cast< Year * >(argp2);
  {
    try {
      result = BusinessCalendar_weekendsForYear((BusinessCalendar const *)arg1,(Year const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = BusinessCalendar_weekendsForYear((BusinessCalendar const *)arg1,(Year const &)*arg2);  in BusinessCalendar::weekendsForYear(Year const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetDate(static_cast< const SetDate& >(result))), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BusinessCalendarImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BusinessCalendar *arg1 = (BusinessCalendar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< BusinessCalendar > tempshared1 ;
  boost::shared_ptr< BusinessCalendar > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BusinessCalendarImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BusinessCalendarImpl" "', argument " "1"" of type '" "BusinessCalendar *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  BusinessCalendar > * >(argp1);
      arg1 = const_cast< BusinessCalendar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BusinessCalendarImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_BusinessCalendar_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalendarCacheImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CalendarCacheImpl")) SWIG_fail;
  {
    try {
      result = (CalendarCache *)new CalendarCache();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (CalendarCache *)new CalendarCache();  in CalendarCache::CalendarCache(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  CalendarCache > *smartresult = result ? new boost::shared_ptr<  CalendarCache >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_getCacheName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared1 ;
  boost::shared_ptr< CalendarCache const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarCacheImpl_getCacheName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_getCacheName" "', argument " "1"" of type '" "CalendarCache const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((CalendarCache const *)arg1)->getCacheName();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((CalendarCache const *)arg1)->getCacheName();  in CalendarCache::getCacheName() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_setCacheName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache > tempshared1 ;
  boost::shared_ptr< CalendarCache > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarCacheImpl_setCacheName",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_setCacheName" "', argument " "1"" of type '" "CalendarCache *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarCacheImpl_setCacheName" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarCacheImpl_setCacheName" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setCacheName((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->setCacheName((String const &)*arg2);  in CalendarCache::setCacheName(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  CalendarSharedPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache > tempshared1 ;
  boost::shared_ptr< CalendarCache > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  CalendarSharedPtr tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarCacheImpl_add",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_add" "', argument " "1"" of type '" "CalendarCache *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_Calendar_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarCacheImpl_add" "', argument " "2"" of type '" "CalendarSharedPtr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< CalendarSharedPtr * >(argp2);
      delete reinterpret_cast< CalendarSharedPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< CalendarSharedPtr * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->add((CalendarSharedPtr const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->add((CalendarSharedPtr const &)*arg2);  in CalendarCache::add(CalendarSharedPtr const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache > tempshared1 ;
  boost::shared_ptr< CalendarCache > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarCacheImpl_remove",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_remove" "', argument " "1"" of type '" "CalendarCache *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarCacheImpl_remove" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarCacheImpl_remove" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->remove((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->remove((String const &)*arg2);  in CalendarCache::remove(String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared1 ;
  boost::shared_ptr< CalendarCache const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CalendarSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarCacheImpl_find",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_find" "', argument " "1"" of type '" "CalendarCache const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarCacheImpl_find" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarCacheImpl_find" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((CalendarCache const *)arg1)->find((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((CalendarCache const *)arg1)->find((String const &)*arg2);  in CalendarCache::find(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  Calendar > *smartresult = result ? new boost::shared_ptr<  Calendar >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_Calendar_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_isEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared1 ;
  boost::shared_ptr< CalendarCache const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarCacheImpl_isEmpty",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_isEmpty" "', argument " "1"" of type '" "CalendarCache const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (Bool)((CalendarCache const *)arg1)->isEmpty();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((CalendarCache const *)arg1)->isEmpty();  in CalendarCache::isEmpty() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared1 ;
  boost::shared_ptr< CalendarCache const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarCacheImpl_size",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_size" "', argument " "1"" of type '" "CalendarCache const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((CalendarCache const *)arg1)->size();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((CalendarCache const *)arg1)->size();  in CalendarCache::size() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_calendarExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared1 ;
  boost::shared_ptr< CalendarCache const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarCacheImpl_calendarExists",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_calendarExists" "', argument " "1"" of type '" "CalendarCache const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarCacheImpl_calendarExists" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarCacheImpl_calendarExists" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Bool)((CalendarCache const *)arg1)->calendarExists((String const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = (Bool)((CalendarCache const *)arg1)->calendarExists((String const &)*arg2);  in CalendarCache::calendarExists(String const &) const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  CalendarCache *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache > tempshared1 ;
  boost::shared_ptr< CalendarCache > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarCacheImpl_merge",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_merge" "', argument " "1"" of type '" "CalendarCache *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarCacheImpl_merge" "', argument " "2"" of type '" "CalendarCache const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarCacheImpl_merge" "', argument " "2"" of type '" "CalendarCache const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp2);
      arg2 = const_cast< CalendarCache * >(tempshared2.get());
    } else {
      arg2 = const_cast< CalendarCache * >(reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp2)->get());
    }
  }
  {
    try {
      (arg1)->merge((CalendarCache const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing (arg1)->merge((CalendarCache const &)*arg2);  in CalendarCache::merge(CalendarCache const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared1 ;
  boost::shared_ptr< CalendarCache const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  CalendarMap::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarCacheImpl_begin",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_begin" "', argument " "1"" of type '" "CalendarCache const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((CalendarCache const *)arg1)->begin();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((CalendarCache const *)arg1)->begin();  in CalendarCache::begin() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new CalendarMap::const_iterator(static_cast< const CalendarMap::const_iterator& >(result))), SWIGTYPE_p_CalendarMap__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache const > tempshared1 ;
  boost::shared_ptr< CalendarCache const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  CalendarMap::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarCacheImpl_end",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_end" "', argument " "1"" of type '" "CalendarCache const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((CalendarCache const *)arg1)->end();
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = ((CalendarCache const *)arg1)->end();  in CalendarCache::end() const; details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new CalendarMap::const_iterator(static_cast< const CalendarMap::const_iterator& >(result))), SWIGTYPE_p_CalendarMap__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarCacheImpl_calendarNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache > tempshared1 ;
  boost::shared_ptr< CalendarCache > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SetString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarCacheImpl_calendarNames",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarCacheImpl_calendarNames" "', argument " "1"" of type '" "CalendarCache *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = CalendarCache_calendarNames(arg1);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = CalendarCache_calendarNames(arg1);  in CalendarCache::calendarNames(); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new SetString(static_cast< const SetString& >(result))), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalendarCacheImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarCache *arg1 = (CalendarCache *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< CalendarCache > tempshared1 ;
  boost::shared_ptr< CalendarCache > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalendarCacheImpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalendarCacheImpl" "', argument " "1"" of type '" "CalendarCache *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  CalendarCache > * >(argp1);
      arg1 = const_cast< CalendarCache * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalendarCacheImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DataLoaderImpl_loadFromXmlFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  String *arg1 = 0 ;
  String *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CalendarCacheSharedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataLoaderImpl_loadFromXmlFile",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataLoaderImpl_loadFromXmlFile" "', argument " "1"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataLoaderImpl_loadFromXmlFile" "', argument " "1"" of type '" "String const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataLoaderImpl_loadFromXmlFile" "', argument " "2"" of type '" "String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataLoaderImpl_loadFromXmlFile" "', argument " "2"" of type '" "String const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = DataLoader::loadFromXmlFile((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const BaseException& ex) {
      char buffer[4096];
      sprintf (buffer, "Exception when performing result = DataLoader::loadFromXmlFile((std::string const &)*arg1,(std::string const &)*arg2);  in DataLoader::loadFromXmlFile(String const &,String const &); details: %s", ex.what());
      SWIG_exception(SWIG_RuntimeError, buffer);
      /*
      		CalendarException *ecopy = new CalendarException(buffer);
      		PyObject *err = SWIG_NewPointerObj(ecopy, SWIGTYPE_p_CalendarException, 1);
      		PyErr_SetObject(SWIG_Python_ExceptionType(SWIGTYPE_p_CalendarException), err);
      		SWIG_fail;
      		*/
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    boost::shared_ptr<  CalendarCache > *smartresult = result ? new boost::shared_ptr<  CalendarCache >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarCache_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataLoaderImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DataLoader *arg1 = (DataLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DataLoaderImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DataLoader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataLoaderImpl" "', argument " "1"" of type '" "DataLoader *""'"); 
  }
  arg1 = reinterpret_cast< DataLoader * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataLoaderImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DataLoader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorDateImpl_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_iterator" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_Date_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___nonzero__" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (bool)std_vector_Sl_Date_Sg____nonzero__((std::vector< Date > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___bool__" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (bool)std_vector_Sl_Date_Sg____bool__((std::vector< Date > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___len__" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = std_vector_Sl_Date_Sg____len__((std::vector< Date > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_pop" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  try {
    result = std_vector_Sl_Date_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Date >::value_type(static_cast< const std::vector< Date >::value_type& >(result))), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::difference_type arg2 ;
  std::vector< Date >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Date,std::allocator< Date > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___getslice__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl___getslice__" "', argument " "2"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDateImpl___getslice__" "', argument " "3"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Date >::difference_type >(val3);
  try {
    result = (std::vector< Date,std::allocator< Date > > *)std_vector_Sl_Date_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::difference_type arg2 ;
  std::vector< Date >::difference_type arg3 ;
  std::vector< Date,std::allocator< Date > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorDateImpl___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___setslice__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl___setslice__" "', argument " "2"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDateImpl___setslice__" "', argument " "3"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Date >::difference_type >(val3);
  {
    std::vector<Date,std::allocator< Date > > *ptr = (std::vector<Date,std::allocator< Date > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorDateImpl___setslice__" "', argument " "4"" of type '" "std::vector< Date,std::allocator< Date > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl___setslice__" "', argument " "4"" of type '" "std::vector< Date,std::allocator< Date > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Date_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< Date,std::allocator< Date > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::difference_type arg2 ;
  std::vector< Date >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___setslice__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl___setslice__" "', argument " "2"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDateImpl___setslice__" "', argument " "3"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Date >::difference_type >(val3);
  try {
    std_vector_Sl_Date_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorDateImpl___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<Date,std::allocator< Date > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorDateImpl___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorDateImpl___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::__setslice__(std::vector< Date >::difference_type,std::vector< Date >::difference_type,std::vector< Date,std::allocator< Date > > const &)\n"
    "    std::vector< Date >::__setslice__(std::vector< Date >::difference_type,std::vector< Date >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::difference_type arg2 ;
  std::vector< Date >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___delslice__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl___delslice__" "', argument " "2"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDateImpl___delslice__" "', argument " "3"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Date >::difference_type >(val3);
  try {
    std_vector_Sl_Date_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___delitem__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl___delitem__" "', argument " "2"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::difference_type >(val2);
  try {
    std_vector_Sl_Date_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Date,std::allocator< Date > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___getitem__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< Date,std::allocator< Date > > *)std_vector_Sl_Date_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Date,std::allocator< Date > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___setitem__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<Date,std::allocator< Date > > *ptr = (std::vector<Date,std::allocator< Date > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDateImpl___setitem__" "', argument " "3"" of type '" "std::vector< Date,std::allocator< Date > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl___setitem__" "', argument " "3"" of type '" "std::vector< Date,std::allocator< Date > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_Date_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Date,std::allocator< Date > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___setitem__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_Date_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___delitem__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_Date_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorDateImpl___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDateImpl___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorDateImpl___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::__delitem__(std::vector< Date >::difference_type)\n"
    "    std::vector< Date >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Date >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___getitem__" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl___getitem__" "', argument " "2"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::difference_type >(val2);
  try {
    result = (std::vector< Date >::value_type *) &std_vector_Sl_Date_Sg____getitem____SWIG_1((std::vector< Date > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorDateImpl___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDateImpl___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorDateImpl___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::__getitem__(PySliceObject *)\n"
    "    std::vector< Date >::__getitem__(std::vector< Date >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::difference_type arg2 ;
  std::vector< Date >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl___setitem__" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl___setitem__" "', argument " "2"" of type '" "std::vector< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDateImpl___setitem__" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl___setitem__" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Date >::value_type * >(argp3);
  try {
    std_vector_Sl_Date_Sg____setitem____SWIG_2(arg1,arg2,(Date const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorDateImpl___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<Date,std::allocator< Date > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorDateImpl___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Date, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorDateImpl___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorDateImpl___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::__setitem__(PySliceObject *,std::vector< Date,std::allocator< Date > > const &)\n"
    "    std::vector< Date >::__setitem__(PySliceObject *)\n"
    "    std::vector< Date >::__setitem__(std::vector< Date >::difference_type,std::vector< Date >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_append" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDateImpl_append" "', argument " "2"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl_append" "', argument " "2"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Date >::value_type * >(argp2);
  std_vector_Sl_Date_Sg__append(arg1,(Date const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDateImpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorDateImpl")) SWIG_fail;
  result = (std::vector< Date > *)new std::vector< Date >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDateImpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Date > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorDateImpl",&obj0)) SWIG_fail;
  {
    std::vector<Date,std::allocator< Date > > *ptr = (std::vector<Date,std::allocator< Date > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDateImpl" "', argument " "1"" of type '" "std::vector< Date > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDateImpl" "', argument " "1"" of type '" "std::vector< Date > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Date > *)new std::vector< Date >((std::vector< Date > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_empty" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (bool)((std::vector< Date > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_size" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = ((std::vector< Date > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_clear" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_swap" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDateImpl_swap" "', argument " "2"" of type '" "std::vector< Date > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl_swap" "', argument " "2"" of type '" "std::vector< Date > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Date > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Date > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_get_allocator" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = ((std::vector< Date > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Date >::allocator_type(static_cast< const std::vector< Date >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_Date_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_begin" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_end" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_rbegin" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Date >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_rend" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Date >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDateImpl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorDateImpl",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDateImpl" "', argument " "1"" of type '" "std::vector< Date >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Date >::size_type >(val1);
  result = (std::vector< Date > *)new std::vector< Date >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_pop_back" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_resize" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl_resize" "', argument " "2"" of type '" "std::vector< Date >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_erase" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_erase" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_erase" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::iterator arg2 ;
  std::vector< Date >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_erase" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_erase" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_erase" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_erase" "', argument " "3"" of type '" "std::vector< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_erase" "', argument " "3"" of type '" "std::vector< Date >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorDateImpl_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorDateImpl_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorDateImpl_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::erase(std::vector< Date >::iterator)\n"
    "    std::vector< Date >::erase(std::vector< Date >::iterator,std::vector< Date >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorDateImpl__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date >::size_type arg1 ;
  std::vector< Date >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Date > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorDateImpl",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDateImpl" "', argument " "1"" of type '" "std::vector< Date >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Date >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorDateImpl" "', argument " "2"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDateImpl" "', argument " "2"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Date >::value_type * >(argp2);
  result = (std::vector< Date > *)new std::vector< Date >(arg1,(std::vector< Date >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDateImpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorDateImpl__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorDateImpl__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorDateImpl__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Date, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorDateImpl__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorDateImpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::vector()\n"
    "    std::vector< Date >::vector(std::vector< Date > const &)\n"
    "    std::vector< Date >::vector(std::vector< Date >::size_type)\n"
    "    std::vector< Date >::vector(std::vector< Date >::size_type,std::vector< Date >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_push_back" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDateImpl_push_back" "', argument " "2"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl_push_back" "', argument " "2"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Date >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Date >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_front" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (std::vector< Date >::value_type *) &((std::vector< Date > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_back" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = (std::vector< Date >::value_type *) &((std::vector< Date > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::size_type arg2 ;
  std::vector< Date >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_assign" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl_assign" "', argument " "2"" of type '" "std::vector< Date >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDateImpl_assign" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl_assign" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Date >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Date >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::size_type arg2 ;
  std::vector< Date >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_resize" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl_resize" "', argument " "2"" of type '" "std::vector< Date >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDateImpl_resize" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl_resize" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Date >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Date >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDateImpl_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Date, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorDateImpl_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorDateImpl_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::resize(std::vector< Date >::size_type)\n"
    "    std::vector< Date >::resize(std::vector< Date >::size_type,std::vector< Date >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::iterator arg2 ;
  std::vector< Date >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorDateImpl_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_insert" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_insert" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_insert" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDateImpl_insert" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl_insert" "', argument " "3"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Date >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Date >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::iterator arg2 ;
  std::vector< Date >::size_type arg3 ;
  std::vector< Date >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorDateImpl_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_insert" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_insert" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorDateImpl_insert" "', argument " "2"" of type '" "std::vector< Date >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDateImpl_insert" "', argument " "3"" of type '" "std::vector< Date >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Date >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorDateImpl_insert" "', argument " "4"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDateImpl_insert" "', argument " "4"" of type '" "std::vector< Date >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Date >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Date >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Date, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorDateImpl_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Date,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< Date >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Date, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorDateImpl_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorDateImpl_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Date >::insert(std::vector< Date >::iterator,std::vector< Date >::value_type const &)\n"
    "    std::vector< Date >::insert(std::vector< Date >::iterator,std::vector< Date >::size_type,std::vector< Date >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  std::vector< Date >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDateImpl_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_reserve" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDateImpl_reserve" "', argument " "2"" of type '" "std::vector< Date >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Date >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDateImpl_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Date >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDateImpl_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDateImpl_capacity" "', argument " "1"" of type '" "std::vector< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  result = ((std::vector< Date > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorDateImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Date > *arg1 = (std::vector< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorDateImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorDateImpl" "', argument " "1"" of type '" "std::vector< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Date > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorDateImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Date_std__allocatorT_Date_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SetDateImpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< Date > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Date > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetDateImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_Date_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetDateImpl" "', argument " "1"" of type '" "std::less< Date > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetDateImpl" "', argument " "1"" of type '" "std::less< Date > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< Date > * >(argp1);
  result = (std::set< Date > *)new std::set< Date >((std::less< Date > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_iterator" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_Date_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl___nonzero__" "', argument " "1"" of type '" "std::set< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (bool)std_set_Sl_Date_Sg____nonzero__((std::set< Date > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl___bool__" "', argument " "1"" of type '" "std::set< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (bool)std_set_Sl_Date_Sg____bool__((std::set< Date > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Date >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl___len__" "', argument " "1"" of type '" "std::set< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = std_set_Sl_Date_Sg____len__((std::set< Date > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_append" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_append" "', argument " "2"" of type '" "std::set< Date >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_append" "', argument " "2"" of type '" "std::set< Date >::value_type""'");
    } else {
      std::set< Date >::value_type * temp = reinterpret_cast< std::set< Date >::value_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  std_set_Sl_Date_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl___contains__" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl___contains__" "', argument " "2"" of type '" "std::set< Date >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl___contains__" "', argument " "2"" of type '" "std::set< Date >::value_type""'");
    } else {
      std::set< Date >::value_type * temp = reinterpret_cast< std::set< Date >::value_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)std_set_Sl_Date_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< Date >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl___getitem__" "', argument " "1"" of type '" "std::set< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDateImpl___getitem__" "', argument " "2"" of type '" "std::set< Date >::difference_type""'");
  } 
  arg2 = static_cast< std::set< Date >::difference_type >(val2);
  try {
    result = std_set_Sl_Date_Sg____getitem__((std::set< Date > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::set< Date >::value_type(static_cast< const std::set< Date >::value_type& >(result))), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetDateImpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SetDateImpl")) SWIG_fail;
  result = (std::set< Date > *)new std::set< Date >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetDateImpl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< Date > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetDateImpl",&obj0)) SWIG_fail;
  {
    std::set<Date,std::less< Date >,std::allocator< Date > > *ptr = (std::set<Date,std::less< Date >,std::allocator< Date > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetDateImpl" "', argument " "1"" of type '" "std::set< Date > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetDateImpl" "', argument " "1"" of type '" "std::set< Date > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< Date > *)new std::set< Date >((std::set< Date > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetDateImpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SetDateImpl__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_Date_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetDateImpl__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<Date,std::less< Date >,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetDateImpl__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SetDateImpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< Date >::set(std::less< Date > const &)\n"
    "    std::set< Date >::set()\n"
    "    std::set< Date >::set(std::set< Date > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_empty" "', argument " "1"" of type '" "std::set< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (bool)((std::set< Date > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Date >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_size" "', argument " "1"" of type '" "std::set< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = ((std::set< Date > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_clear" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_swap" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_swap" "', argument " "2"" of type '" "std::set< Date > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_swap" "', argument " "2"" of type '" "std::set< Date > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< Date >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_erase" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_erase" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_erase" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date >::key_type * >(argp2);
  result = (arg1)->erase((std::set< Date >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< Date >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_count" "', argument " "1"" of type '" "std::set< Date > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_count" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_count" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date >::key_type * >(argp2);
  result = ((std::set< Date > const *)arg1)->count((std::set< Date >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_begin" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_end" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Date >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_rbegin" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Date >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< Date >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetDateImpl_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_rend" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Date >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_erase" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetDateImpl_erase" "', argument " "2"" of type '" "std::set< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< Date >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetDateImpl_erase" "', argument " "2"" of type '" "std::set< Date >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::iterator arg2 ;
  std::set< Date >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetDateImpl_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_erase" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetDateImpl_erase" "', argument " "2"" of type '" "std::set< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< Date >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetDateImpl_erase" "', argument " "2"" of type '" "std::set< Date >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetDateImpl_erase" "', argument " "3"" of type '" "std::set< Date >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< Date >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< Date >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetDateImpl_erase" "', argument " "3"" of type '" "std::set< Date >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<Date,std::less< Date >,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Date, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SetDateImpl_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<Date,std::less< Date >,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< Date >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SetDateImpl_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<Date,std::less< Date >,std::allocator< Date > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< Date >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< Date >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SetDateImpl_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SetDateImpl_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< Date >::erase(std::set< Date >::key_type const &)\n"
    "    std::set< Date >::erase(std::set< Date >::iterator)\n"
    "    std::set< Date >::erase(std::set< Date >::iterator,std::set< Date >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_find" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_find" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_find" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date >::key_type * >(argp2);
  result = (arg1)->find((std::set< Date >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_lower_bound" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_lower_bound" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_lower_bound" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date >::key_type * >(argp2);
  result = (arg1)->lower_bound((std::set< Date >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< Date >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_upper_bound" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_upper_bound" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_upper_bound" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date >::key_type * >(argp2);
  result = (arg1)->upper_bound((std::set< Date >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< Date >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< Date >::iterator,std::set< Date >::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_equal_range" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_equal_range" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_equal_range" "', argument " "2"" of type '" "std::set< Date >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date >::key_type * >(argp2);
  result = (arg1)->equal_range((std::set< Date >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< Date >::iterator,std::set< Date >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< Date >::iterator,std::set< Date >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetDateImpl_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  std::set< Date >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< Date >::iterator,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetDateImpl_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetDateImpl_insert" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetDateImpl_insert" "', argument " "2"" of type '" "std::set< Date >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetDateImpl_insert" "', argument " "2"" of type '" "std::set< Date >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< Date >::value_type * >(argp2);
  result = (arg1)->insert((std::set< Date >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< Date >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< Date >::iterator,bool > & >(result).second));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SetDateImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< Date > *arg1 = (std::set< Date > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SetDateImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SetDateImpl" "', argument " "1"" of type '" "std::set< Date > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< Date > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SetDateImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SetWeekDayImpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< WeekDay::eWeekDay > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< WeekDay::eWeekDay > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetWeekDayImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_WeekDay__eWeekDay_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetWeekDayImpl" "', argument " "1"" of type '" "std::less< WeekDay::eWeekDay > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetWeekDayImpl" "', argument " "1"" of type '" "std::less< WeekDay::eWeekDay > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< WeekDay::eWeekDay > * >(argp1);
  result = (std::set< WeekDay::eWeekDay > *)new std::set< WeekDay::eWeekDay >((std::less< WeekDay::eWeekDay > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_iterator" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_WeekDay_eWeekDay_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl___nonzero__" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (bool)std_set_Sl_WeekDay_eWeekDay_Sg____nonzero__((std::set< enum WeekDay::eWeekDay > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl___bool__" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (bool)std_set_Sl_WeekDay_eWeekDay_Sg____bool__((std::set< enum WeekDay::eWeekDay > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< enum WeekDay::eWeekDay >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl___len__" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = std_set_Sl_WeekDay_eWeekDay_Sg____len__((std::set< enum WeekDay::eWeekDay > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_append" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_append" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::value_type""'");
  } 
  arg2 = static_cast< std::set< enum WeekDay::eWeekDay >::value_type >(val2);
  std_set_Sl_WeekDay_eWeekDay_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl___contains__" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl___contains__" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::value_type""'");
  } 
  arg2 = static_cast< std::set< enum WeekDay::eWeekDay >::value_type >(val2);
  result = (bool)std_set_Sl_WeekDay_eWeekDay_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< enum WeekDay::eWeekDay >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl___getitem__" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl___getitem__" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::difference_type""'");
  } 
  arg2 = static_cast< std::set< enum WeekDay::eWeekDay >::difference_type >(val2);
  try {
    result = (std::set< enum WeekDay::eWeekDay >::value_type)std_set_Sl_WeekDay_eWeekDay_Sg____getitem__((std::set< enum WeekDay::eWeekDay > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetWeekDayImpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SetWeekDayImpl")) SWIG_fail;
  result = (std::set< WeekDay::eWeekDay > *)new std::set< WeekDay::eWeekDay >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetWeekDayImpl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< WeekDay::eWeekDay > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetWeekDayImpl",&obj0)) SWIG_fail;
  {
    std::set<WeekDay::eWeekDay,std::less< WeekDay::eWeekDay >,std::allocator< WeekDay::eWeekDay > > *ptr = (std::set<WeekDay::eWeekDay,std::less< WeekDay::eWeekDay >,std::allocator< WeekDay::eWeekDay > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetWeekDayImpl" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetWeekDayImpl" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< WeekDay::eWeekDay > *)new std::set< WeekDay::eWeekDay >((std::set< WeekDay::eWeekDay > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetWeekDayImpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SetWeekDayImpl__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_WeekDay__eWeekDay_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetWeekDayImpl__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<WeekDay::eWeekDay,std::less< WeekDay::eWeekDay >,std::allocator< WeekDay::eWeekDay > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetWeekDayImpl__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SetWeekDayImpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< WeekDay::eWeekDay >::set(std::less< WeekDay::eWeekDay > const &)\n"
    "    std::set< WeekDay::eWeekDay >::set()\n"
    "    std::set< WeekDay::eWeekDay >::set(std::set< WeekDay::eWeekDay > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_empty" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (bool)((std::set< WeekDay::eWeekDay > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< enum WeekDay::eWeekDay >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_size" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = ((std::set< WeekDay::eWeekDay > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_clear" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< WeekDay::eWeekDay > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_swap" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetWeekDayImpl_swap" "', argument " "2"" of type '" "std::set< WeekDay::eWeekDay > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetWeekDayImpl_swap" "', argument " "2"" of type '" "std::set< WeekDay::eWeekDay > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum WeekDay::eWeekDay >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< enum WeekDay::eWeekDay >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_erase" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_erase" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum WeekDay::eWeekDay >::key_type >(val2);
    arg2 = &temp2;
  }
  result = (arg1)->erase((std::set< enum WeekDay::eWeekDay >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum WeekDay::eWeekDay >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< enum WeekDay::eWeekDay >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_count" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_count" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum WeekDay::eWeekDay >::key_type >(val2);
    arg2 = &temp2;
  }
  result = ((std::set< WeekDay::eWeekDay > const *)arg1)->count((std::set< enum WeekDay::eWeekDay >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_begin" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum WeekDay::eWeekDay >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_end" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum WeekDay::eWeekDay >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_rbegin" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum WeekDay::eWeekDay >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWeekDayImpl_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_rend" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum WeekDay::eWeekDay >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_erase" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetWeekDayImpl_erase" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetWeekDayImpl_erase" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > arg2 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetWeekDayImpl_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_erase" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetWeekDayImpl_erase" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetWeekDayImpl_erase" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetWeekDayImpl_erase" "', argument " "3"" of type '" "std::set< enum WeekDay::eWeekDay >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetWeekDayImpl_erase" "', argument " "3"" of type '" "std::set< enum WeekDay::eWeekDay >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<WeekDay::eWeekDay,std::less< WeekDay::eWeekDay >,std::allocator< WeekDay::eWeekDay > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SetWeekDayImpl_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<WeekDay::eWeekDay,std::less< WeekDay::eWeekDay >,std::allocator< WeekDay::eWeekDay > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SetWeekDayImpl_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<WeekDay::eWeekDay,std::less< WeekDay::eWeekDay >,std::allocator< WeekDay::eWeekDay > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< enum WeekDay::eWeekDay >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SetWeekDayImpl_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SetWeekDayImpl_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< WeekDay::eWeekDay >::erase(std::set< enum WeekDay::eWeekDay >::key_type const &)\n"
    "    std::set< WeekDay::eWeekDay >::erase(std::set< enum WeekDay::eWeekDay >::iterator)\n"
    "    std::set< WeekDay::eWeekDay >::erase(std::set< enum WeekDay::eWeekDay >::iterator,std::set< enum WeekDay::eWeekDay >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum WeekDay::eWeekDay >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_find" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_find" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum WeekDay::eWeekDay >::key_type >(val2);
    arg2 = &temp2;
  }
  result = (arg1)->find((std::set< enum WeekDay::eWeekDay >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum WeekDay::eWeekDay >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum WeekDay::eWeekDay >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_lower_bound" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_lower_bound" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum WeekDay::eWeekDay >::key_type >(val2);
    arg2 = &temp2;
  }
  result = (arg1)->lower_bound((std::set< enum WeekDay::eWeekDay >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum WeekDay::eWeekDay >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum WeekDay::eWeekDay >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< enum WeekDay::eWeekDay >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_upper_bound" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_upper_bound" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum WeekDay::eWeekDay >::key_type >(val2);
    arg2 = &temp2;
  }
  result = (arg1)->upper_bound((std::set< enum WeekDay::eWeekDay >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum WeekDay::eWeekDay >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum WeekDay::eWeekDay >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< enum WeekDay::eWeekDay >::iterator,std::set< enum WeekDay::eWeekDay >::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_equal_range" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_equal_range" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum WeekDay::eWeekDay >::key_type >(val2);
    arg2 = &temp2;
  }
  result = (arg1)->equal_range((std::set< enum WeekDay::eWeekDay >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< enum WeekDay::eWeekDay >::iterator,std::set< enum WeekDay::eWeekDay >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< enum WeekDay::eWeekDay >::iterator,std::set< enum WeekDay::eWeekDay >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWeekDayImpl_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  std::set< enum WeekDay::eWeekDay >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum WeekDay::eWeekDay >::value_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< enum WeekDay::eWeekDay >::iterator,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetWeekDayImpl_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWeekDayImpl_insert" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetWeekDayImpl_insert" "', argument " "2"" of type '" "std::set< enum WeekDay::eWeekDay >::value_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum WeekDay::eWeekDay >::value_type >(val2);
    arg2 = &temp2;
  }
  result = (arg1)->insert((std::set< enum WeekDay::eWeekDay >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< enum WeekDay::eWeekDay >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< enum WeekDay::eWeekDay >::iterator,bool > & >(result).second));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SetWeekDayImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< WeekDay::eWeekDay > *arg1 = (std::set< WeekDay::eWeekDay > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SetWeekDayImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SetWeekDayImpl" "', argument " "1"" of type '" "std::set< WeekDay::eWeekDay > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< WeekDay::eWeekDay > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SetWeekDayImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SetStringImpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< String > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetStringImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetStringImpl" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetStringImpl" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::set< String > *)new std::set< String >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_iterator" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_String_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl___nonzero__" "', argument " "1"" of type '" "std::set< String > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (bool)std_set_Sl_String_Sg____nonzero__((std::set< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl___bool__" "', argument " "1"" of type '" "std::set< String > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (bool)std_set_Sl_String_Sg____bool__((std::set< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl___len__" "', argument " "1"" of type '" "std::set< String > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = std_set_Sl_String_Sg____len__((std::set< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_append" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SetStringImpl_append" "', argument " "2"" of type '" "std::set< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_String_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl___contains__" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SetStringImpl___contains__" "', argument " "2"" of type '" "std::set< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)std_set_Sl_String_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl___getitem__" "', argument " "1"" of type '" "std::set< String > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetStringImpl___getitem__" "', argument " "2"" of type '" "std::set< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::set< std::string >::difference_type >(val2);
  try {
    result = std_set_Sl_String_Sg____getitem__((std::set< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetStringImpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SetStringImpl")) SWIG_fail;
  result = (std::set< String > *)new std::set< String >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetStringImpl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< String > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetStringImpl",&obj0)) SWIG_fail;
  {
    std::set<std::string,std::less< std::string >,std::allocator< std::string > > *ptr = (std::set<std::string,std::less< std::string >,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetStringImpl" "', argument " "1"" of type '" "std::set< String > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetStringImpl" "', argument " "1"" of type '" "std::set< String > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< String > *)new std::set< String >((std::set< String > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetStringImpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SetStringImpl__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetStringImpl__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetStringImpl__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SetStringImpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< String >::set(std::less< std::string > const &)\n"
    "    std::set< String >::set()\n"
    "    std::set< String >::set(std::set< String > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_empty" "', argument " "1"" of type '" "std::set< String > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (bool)((std::set< String > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_size" "', argument " "1"" of type '" "std::set< String > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = ((std::set< String > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_clear" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< String > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_swap" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_swap" "', argument " "2"" of type '" "std::set< String > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_swap" "', argument " "2"" of type '" "std::set< String > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< String > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_erase" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_erase" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_erase" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_count" "', argument " "1"" of type '" "std::set< String > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_count" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_count" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::set< String > const *)arg1)->count((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_begin" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_end" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_rbegin" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStringImpl_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_rend" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  SwigValueWrapper< std::set< std::string >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_erase" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetStringImpl_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetStringImpl_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  SwigValueWrapper< std::set< std::string >::iterator > arg2 ;
  SwigValueWrapper< std::set< std::string >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetStringImpl_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_erase" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetStringImpl_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetStringImpl_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetStringImpl_erase" "', argument " "3"" of type '" "std::set< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetStringImpl_erase" "', argument " "3"" of type '" "std::set< std::string >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SetStringImpl_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SetStringImpl_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SetStringImpl_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SetStringImpl_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< String >::erase(std::set< std::string >::key_type const &)\n"
    "    std::set< String >::erase(std::set< std::string >::iterator)\n"
    "    std::set< String >::erase(std::set< std::string >::iterator,std::set< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< std::string >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_find" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_find" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_find" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< std::string >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_lower_bound" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_lower_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_lower_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< std::string >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_upper_bound" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_upper_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_upper_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_equal_range" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_equal_range" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_equal_range" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->equal_range((std::set< std::string >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetStringImpl_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  std::set< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< std::string >::iterator,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetStringImpl_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetStringImpl_insert" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetStringImpl_insert" "', argument " "2"" of type '" "std::set< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetStringImpl_insert" "', argument " "2"" of type '" "std::set< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->insert((std::set< std::string >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::string >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< std::string >::iterator,bool > & >(result).second));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SetStringImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< String > *arg1 = (std::set< String > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SetStringImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SetStringImpl" "', argument " "1"" of type '" "std::set< String > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< String > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SetStringImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalendarRulesImpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CalendarRuleSharedPtrLessThan *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalendarRulesImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_CalendarRuleSharedPtrLessThan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalendarRulesImpl" "', argument " "1"" of type '" "CalendarRuleSharedPtrLessThan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalendarRulesImpl" "', argument " "1"" of type '" "CalendarRuleSharedPtrLessThan const &""'"); 
  }
  arg1 = reinterpret_cast< CalendarRuleSharedPtrLessThan * >(argp1);
  result = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *)new std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >((CalendarRuleSharedPtrLessThan const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_iterator" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl___nonzero__" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (bool)std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____nonzero__((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl___bool__" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (bool)std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____bool__((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl___len__" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____len__((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_append" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_append" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type * >(argp2);
  }
  std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl___contains__" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl___contains__" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type * >(argp2);
  }
  result = (bool)std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl___getitem__" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CalendarRulesImpl___getitem__" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::difference_type""'");
  } 
  arg2 = static_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::difference_type >(val2);
  try {
    result = std_set_Sl_CalendarRuleSharedPtr_Sc_CalendarRuleSharedPtrLessThan_Sg____getitem__((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  {
    boost::shared_ptr<  CalendarRule > *smartresult = result ? new boost::shared_ptr<  CalendarRule >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalendarRulesImpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CalendarRulesImpl")) SWIG_fail;
  result = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *)new std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalendarRulesImpl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalendarRulesImpl",&obj0)) SWIG_fail;
  {
    std::set<boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan,std::allocator< boost::shared_ptr< CalendarRule > > > *ptr = (std::set<boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan,std::allocator< boost::shared_ptr< CalendarRule > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalendarRulesImpl" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalendarRulesImpl" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *)new std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >((std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalendarRulesImpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CalendarRulesImpl__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_CalendarRuleSharedPtrLessThan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CalendarRulesImpl__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan,std::allocator< boost::shared_ptr< CalendarRule > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CalendarRulesImpl__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CalendarRulesImpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >::set(CalendarRuleSharedPtrLessThan const &)\n"
    "    std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >::set()\n"
    "    std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >::set(std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_empty" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (bool)((std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_size" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = ((std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_clear" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_swap" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_swap" "', argument " "2"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalendarRulesImpl_swap" "', argument " "2"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_erase" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_erase" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2) : &tempshared2;
    }
  }
  result = (arg1)->erase((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_count" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_count" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2) : &tempshared2;
    }
  }
  result = ((std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > const *)arg1)->count((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_begin" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_end" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_rbegin" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalendarRulesImpl_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_rend" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_erase" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CalendarRulesImpl_erase" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CalendarRulesImpl_erase" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > arg2 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CalendarRulesImpl_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_erase" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CalendarRulesImpl_erase" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CalendarRulesImpl_erase" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CalendarRulesImpl_erase" "', argument " "3"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CalendarRulesImpl_erase" "', argument " "3"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan,std::allocator< boost::shared_ptr< CalendarRule > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CalendarRulesImpl_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan,std::allocator< boost::shared_ptr< CalendarRule > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_CalendarRulesImpl_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan,std::allocator< boost::shared_ptr< CalendarRule > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_CalendarRulesImpl_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CalendarRulesImpl_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >::erase(std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &)\n"
    "    std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >::erase(std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator)\n"
    "    std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan >::erase(std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator,std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_find" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_find" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2) : &tempshared2;
    }
  }
  result = (arg1)->find((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_lower_bound" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_lower_bound" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2) : &tempshared2;
    }
  }
  result = (arg1)->lower_bound((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_upper_bound" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_upper_bound" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2) : &tempshared2;
    }
  }
  result = (arg1)->upper_bound((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator,std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_equal_range" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_equal_range" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type * >(argp2) : &tempshared2;
    }
  }
  result = (arg1)->equal_range((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator,std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator,std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalendarRulesImpl_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalendarRulesImpl_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalendarRulesImpl_insert" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_CalendarRule_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalendarRulesImpl_insert" "', argument " "2"" of type '" "std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type * >(argp2);
      delete reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (arg1)->insert((std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan >::iterator,bool > & >(result).second));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalendarRulesImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *arg1 = (std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalendarRulesImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalendarRulesImpl" "', argument " "1"" of type '" "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalendarRulesImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Enum", _wrap_delete_Enum, METH_VARARGS, NULL},
	 { (char *)"Enum_size", _wrap_Enum_size, METH_VARARGS, NULL},
	 { (char *)"Enum_sizeInt", _wrap_Enum_sizeInt, METH_VARARGS, NULL},
	 { (char *)"Enum_sizeString", _wrap_Enum_sizeString, METH_VARARGS, NULL},
	 { (char *)"Enum_intToString", _wrap_Enum_intToString, METH_VARARGS, NULL},
	 { (char *)"Enum_stringToInt", _wrap_Enum_stringToInt, METH_VARARGS, NULL},
	 { (char *)"Enum_getIntegerValues", _wrap_Enum_getIntegerValues, METH_VARARGS, NULL},
	 { (char *)"Enum_getStringValues", _wrap_Enum_getStringValues, METH_VARARGS, NULL},
	 { (char *)"new_Enum", _wrap_new_Enum, METH_VARARGS, NULL},
	 { (char *)"Enum_swigregister", Enum_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ConstrainedIntegerImpl", _wrap_delete_ConstrainedIntegerImpl, METH_VARARGS, NULL},
	 { (char *)"ConstrainedIntegerImpl_swigregister", ConstrainedIntegerImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HolidayDurationImpl", _wrap_new_HolidayDurationImpl, METH_VARARGS, NULL},
	 { (char *)"HolidayDurationImpl_setValue", _wrap_HolidayDurationImpl_setValue, METH_VARARGS, NULL},
	 { (char *)"HolidayDurationImpl_getValue", _wrap_HolidayDurationImpl_getValue, METH_VARARGS, NULL},
	 { (char *)"delete_HolidayDurationImpl", _wrap_delete_HolidayDurationImpl, METH_VARARGS, NULL},
	 { (char *)"HolidayDurationImpl_swigregister", HolidayDurationImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DatePartImpl", _wrap_delete_DatePartImpl, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl___eq__", _wrap_DatePartImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl___ne__", _wrap_DatePartImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl___lt__", _wrap_DatePartImpl___lt__, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl___le__", _wrap_DatePartImpl___le__, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl___gt__", _wrap_DatePartImpl___gt__, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl___ge__", _wrap_DatePartImpl___ge__, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl_asInteger", _wrap_DatePartImpl_asInteger, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl_add", _wrap_DatePartImpl_add, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl_substract", _wrap_DatePartImpl_substract, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl_setValue", _wrap_DatePartImpl_setValue, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl_getValue", _wrap_DatePartImpl_getValue, METH_VARARGS, NULL},
	 { (char *)"DatePartImpl_swigregister", DatePartImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WeekDayImpl", _wrap_new_WeekDayImpl, METH_VARARGS, NULL},
	 { (char *)"WeekDayImpl_instance", _wrap_WeekDayImpl_instance, METH_VARARGS, NULL},
	 { (char *)"WeekDayImpl_toString", _wrap_WeekDayImpl_toString, METH_VARARGS, NULL},
	 { (char *)"WeekDayImpl_fromString", _wrap_WeekDayImpl_fromString, METH_VARARGS, NULL},
	 { (char *)"WeekDayImpl_fromPartialString", _wrap_WeekDayImpl_fromPartialString, METH_VARARGS, NULL},
	 { (char *)"delete_WeekDayImpl", _wrap_delete_WeekDayImpl, METH_VARARGS, NULL},
	 { (char *)"WeekDayImpl_swigregister", WeekDayImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonthWeekImpl", _wrap_new_MonthWeekImpl, METH_VARARGS, NULL},
	 { (char *)"MonthWeekImpl_instance", _wrap_MonthWeekImpl_instance, METH_VARARGS, NULL},
	 { (char *)"MonthWeekImpl_toString", _wrap_MonthWeekImpl_toString, METH_VARARGS, NULL},
	 { (char *)"MonthWeekImpl_fromString", _wrap_MonthWeekImpl_fromString, METH_VARARGS, NULL},
	 { (char *)"MonthWeekImpl_fromPartialString", _wrap_MonthWeekImpl_fromPartialString, METH_VARARGS, NULL},
	 { (char *)"delete_MonthWeekImpl", _wrap_delete_MonthWeekImpl, METH_VARARGS, NULL},
	 { (char *)"MonthWeekImpl_swigregister", MonthWeekImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"DayImpl_daysBetween", _wrap_DayImpl_daysBetween, METH_VARARGS, NULL},
	 { (char *)"delete_DayImpl", _wrap_delete_DayImpl, METH_VARARGS, NULL},
	 { (char *)"DayImpl_swigregister", DayImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DayOfMonthImpl", _wrap_new_DayOfMonthImpl, METH_VARARGS, NULL},
	 { (char *)"DayOfMonthImpl___iadd__", _wrap_DayOfMonthImpl___iadd__, METH_VARARGS, NULL},
	 { (char *)"DayOfMonthImpl___isub__", _wrap_DayOfMonthImpl___isub__, METH_VARARGS, NULL},
	 { (char *)"DayOfMonthImpl_dayOfMonthMax", _wrap_DayOfMonthImpl_dayOfMonthMax, METH_VARARGS, NULL},
	 { (char *)"DayOfMonthImpl_dayOfMonthMin", _wrap_DayOfMonthImpl_dayOfMonthMin, METH_VARARGS, NULL},
	 { (char *)"delete_DayOfMonthImpl", _wrap_delete_DayOfMonthImpl, METH_VARARGS, NULL},
	 { (char *)"DayOfMonthImpl_swigregister", DayOfMonthImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonthImpl", _wrap_new_MonthImpl, METH_VARARGS, NULL},
	 { (char *)"MonthImpl___iadd__", _wrap_MonthImpl___iadd__, METH_VARARGS, NULL},
	 { (char *)"MonthImpl___isub__", _wrap_MonthImpl___isub__, METH_VARARGS, NULL},
	 { (char *)"MonthImpl_monthsBetween", _wrap_MonthImpl_monthsBetween, METH_VARARGS, NULL},
	 { (char *)"MonthImpl_monthMax", _wrap_MonthImpl_monthMax, METH_VARARGS, NULL},
	 { (char *)"MonthImpl_monthMin", _wrap_MonthImpl_monthMin, METH_VARARGS, NULL},
	 { (char *)"delete_MonthImpl", _wrap_delete_MonthImpl, METH_VARARGS, NULL},
	 { (char *)"MonthImpl_swigregister", MonthImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_YearImpl", _wrap_new_YearImpl, METH_VARARGS, NULL},
	 { (char *)"YearImpl___iadd__", _wrap_YearImpl___iadd__, METH_VARARGS, NULL},
	 { (char *)"YearImpl___isub__", _wrap_YearImpl___isub__, METH_VARARGS, NULL},
	 { (char *)"YearImpl_isLeapYear", _wrap_YearImpl_isLeapYear, METH_VARARGS, NULL},
	 { (char *)"YearImpl_yearsBetween", _wrap_YearImpl_yearsBetween, METH_VARARGS, NULL},
	 { (char *)"YearImpl_yearMax", _wrap_YearImpl_yearMax, METH_VARARGS, NULL},
	 { (char *)"YearImpl_yearMin", _wrap_YearImpl_yearMin, METH_VARARGS, NULL},
	 { (char *)"delete_YearImpl", _wrap_delete_YearImpl, METH_VARARGS, NULL},
	 { (char *)"YearImpl_swigregister", YearImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DaysImpl", _wrap_new_DaysImpl, METH_VARARGS, NULL},
	 { (char *)"DaysImpl___iadd__", _wrap_DaysImpl___iadd__, METH_VARARGS, NULL},
	 { (char *)"DaysImpl___isub__", _wrap_DaysImpl___isub__, METH_VARARGS, NULL},
	 { (char *)"DaysImpl_daysMax", _wrap_DaysImpl_daysMax, METH_VARARGS, NULL},
	 { (char *)"DaysImpl_daysMin", _wrap_DaysImpl_daysMin, METH_VARARGS, NULL},
	 { (char *)"delete_DaysImpl", _wrap_delete_DaysImpl, METH_VARARGS, NULL},
	 { (char *)"DaysImpl_swigregister", DaysImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DateImpl", _wrap_new_DateImpl, METH_VARARGS, NULL},
	 { (char *)"delete_DateImpl", _wrap_delete_DateImpl, METH_VARARGS, NULL},
	 { (char *)"DateImpl_copyFrom", _wrap_DateImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"DateImpl_daysBetween", _wrap_DateImpl_daysBetween, METH_VARARGS, NULL},
	 { (char *)"DateImpl_asInteger", _wrap_DateImpl_asInteger, METH_VARARGS, NULL},
	 { (char *)"DateImpl_yearAsInteger", _wrap_DateImpl_yearAsInteger, METH_VARARGS, NULL},
	 { (char *)"DateImpl_isLeapYear", _wrap_DateImpl_isLeapYear, METH_VARARGS, NULL},
	 { (char *)"DateImpl_monthAsInteger", _wrap_DateImpl_monthAsInteger, METH_VARARGS, NULL},
	 { (char *)"DateImpl_dayOfMonthAsInteger", _wrap_DateImpl_dayOfMonthAsInteger, METH_VARARGS, NULL},
	 { (char *)"DateImpl_weekDayAsString", _wrap_DateImpl_weekDayAsString, METH_VARARGS, NULL},
	 { (char *)"DateImpl_weekNumber", _wrap_DateImpl_weekNumber, METH_VARARGS, NULL},
	 { (char *)"DateImpl_modJulianDay", _wrap_DateImpl_modJulianDay, METH_VARARGS, NULL},
	 { (char *)"DateImpl_julianDay", _wrap_DateImpl_julianDay, METH_VARARGS, NULL},
	 { (char *)"DateImpl___eq__", _wrap_DateImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"DateImpl___ne__", _wrap_DateImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"DateImpl___lt__", _wrap_DateImpl___lt__, METH_VARARGS, NULL},
	 { (char *)"DateImpl___le__", _wrap_DateImpl___le__, METH_VARARGS, NULL},
	 { (char *)"DateImpl___gt__", _wrap_DateImpl___gt__, METH_VARARGS, NULL},
	 { (char *)"DateImpl___ge__", _wrap_DateImpl___ge__, METH_VARARGS, NULL},
	 { (char *)"DateImpl___iadd__", _wrap_DateImpl___iadd__, METH_VARARGS, NULL},
	 { (char *)"DateImpl_addDay", _wrap_DateImpl_addDay, METH_VARARGS, NULL},
	 { (char *)"DateImpl_addWeek", _wrap_DateImpl_addWeek, METH_VARARGS, NULL},
	 { (char *)"DateImpl_addMonth", _wrap_DateImpl_addMonth, METH_VARARGS, NULL},
	 { (char *)"DateImpl_addYear", _wrap_DateImpl_addYear, METH_VARARGS, NULL},
	 { (char *)"DateImpl___isub__", _wrap_DateImpl___isub__, METH_VARARGS, NULL},
	 { (char *)"DateImpl_subtractDay", _wrap_DateImpl_subtractDay, METH_VARARGS, NULL},
	 { (char *)"DateImpl_subtractWeek", _wrap_DateImpl_subtractWeek, METH_VARARGS, NULL},
	 { (char *)"DateImpl_subtractMonth", _wrap_DateImpl_subtractMonth, METH_VARARGS, NULL},
	 { (char *)"DateImpl_subtractYear", _wrap_DateImpl_subtractYear, METH_VARARGS, NULL},
	 { (char *)"DateImpl_maxDate", _wrap_DateImpl_maxDate, METH_VARARGS, NULL},
	 { (char *)"DateImpl_minDate", _wrap_DateImpl_minDate, METH_VARARGS, NULL},
	 { (char *)"DateImpl_swigregister", DateImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalendarRuleImpl", _wrap_new_CalendarRuleImpl, METH_VARARGS, NULL},
	 { (char *)"delete_CalendarRuleImpl", _wrap_delete_CalendarRuleImpl, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_createCalendarRuleSmartPtr", _wrap_CalendarRuleImpl_createCalendarRuleSmartPtr, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_copyFrom", _wrap_CalendarRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_className", _wrap_CalendarRuleImpl_className, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl___eq__", _wrap_CalendarRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl___ne__", _wrap_CalendarRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_setRuleName", _wrap_CalendarRuleImpl_setRuleName, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_setHolidayName", _wrap_CalendarRuleImpl_setHolidayName, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_setEnabledFlag", _wrap_CalendarRuleImpl_setEnabledFlag, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_setStartEffectiveDate", _wrap_CalendarRuleImpl_setStartEffectiveDate, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_setEndEffectiveDate", _wrap_CalendarRuleImpl_setEndEffectiveDate, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_getRuleName", _wrap_CalendarRuleImpl_getRuleName, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_getHolidayName", _wrap_CalendarRuleImpl_getHolidayName, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_isEnabled", _wrap_CalendarRuleImpl_isEnabled, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_getCanCalcWeekendFlag", _wrap_CalendarRuleImpl_getCanCalcWeekendFlag, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_getCanCalcDateFlag", _wrap_CalendarRuleImpl_getCanCalcDateFlag, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_getStartEffectiveDate", _wrap_CalendarRuleImpl_getStartEffectiveDate, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_getEndEffectiveDate", _wrap_CalendarRuleImpl_getEndEffectiveDate, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_getEnabledFlag", _wrap_CalendarRuleImpl_getEnabledFlag, METH_VARARGS, NULL},
	 { (char *)"CalendarRuleImpl_swigregister", CalendarRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WeekendRuleImpl", _wrap_new_WeekendRuleImpl, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl___eq__", _wrap_WeekendRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl___ne__", _wrap_WeekendRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_downCast", _wrap_WeekendRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_weekendDaysAsStringSet", _wrap_WeekendRuleImpl_weekendDaysAsStringSet, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_addDay", _wrap_WeekendRuleImpl_addDay, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_removeDay", _wrap_WeekendRuleImpl_removeDay, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_weekendsForYear", _wrap_WeekendRuleImpl_weekendsForYear, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_isWeekend", _wrap_WeekendRuleImpl_isWeekend, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_isWeekendForYear", _wrap_WeekendRuleImpl_isWeekendForYear, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_size", _wrap_WeekendRuleImpl_size, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_isEmpty", _wrap_WeekendRuleImpl_isEmpty, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_clone", _wrap_WeekendRuleImpl_clone, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_copyFrom", _wrap_WeekendRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"delete_WeekendRuleImpl", _wrap_delete_WeekendRuleImpl, METH_VARARGS, NULL},
	 { (char *)"WeekendRuleImpl_swigregister", WeekendRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DateRuleImpl", _wrap_new_DateRuleImpl, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl___eq__", _wrap_DateRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl___ne__", _wrap_DateRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_setWeekendRule", _wrap_DateRuleImpl_setWeekendRule, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_setHolidayDuration", _wrap_DateRuleImpl_setHolidayDuration, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_setIgnoreFridayMonthEndFlag", _wrap_DateRuleImpl_setIgnoreFridayMonthEndFlag, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_setAddNextYearFlag", _wrap_DateRuleImpl_setAddNextYearFlag, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_setAddPriorYearFlag", _wrap_DateRuleImpl_setAddPriorYearFlag, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_setWeekendAdjustment", _wrap_DateRuleImpl_setWeekendAdjustment, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_getWeekendAdjustment", _wrap_DateRuleImpl_getWeekendAdjustment, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_weekendDaysAsStringSet", _wrap_DateRuleImpl_weekendDaysAsStringSet, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_getWeekendRule", _wrap_DateRuleImpl_getWeekendRule, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_getHolidayDuration", _wrap_DateRuleImpl_getHolidayDuration, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_getIgnoreFridayMonthEndFlag", _wrap_DateRuleImpl_getIgnoreFridayMonthEndFlag, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_getAddNextYearFlag", _wrap_DateRuleImpl_getAddNextYearFlag, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_getAddPriorYearFlag", _wrap_DateRuleImpl_getAddPriorYearFlag, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_calcDate", _wrap_DateRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_skipDate", _wrap_DateRuleImpl_skipDate, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_setExceptionsForYear", _wrap_DateRuleImpl_setExceptionsForYear, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_getExceptionsForYear", _wrap_DateRuleImpl_getExceptionsForYear, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_copyFrom", _wrap_DateRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"delete_DateRuleImpl", _wrap_delete_DateRuleImpl, METH_VARARGS, NULL},
	 { (char *)"DateRuleImpl_swigregister", DateRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpecificDateRuleImpl", _wrap_new_SpecificDateRuleImpl, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl___eq__", _wrap_SpecificDateRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl___ne__", _wrap_SpecificDateRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl_copyFrom", _wrap_SpecificDateRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl_downCast", _wrap_SpecificDateRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl_setSpecifiedDate", _wrap_SpecificDateRuleImpl_setSpecifiedDate, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl_getSpecifiedDate", _wrap_SpecificDateRuleImpl_getSpecifiedDate, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl_calcDate", _wrap_SpecificDateRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"delete_SpecificDateRuleImpl", _wrap_delete_SpecificDateRuleImpl, METH_VARARGS, NULL},
	 { (char *)"SpecificDateRuleImpl_swigregister", SpecificDateRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonthDayRuleImpl", _wrap_new_MonthDayRuleImpl, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl___eq__", _wrap_MonthDayRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl___ne__", _wrap_MonthDayRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_copyFrom", _wrap_MonthDayRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_downCast", _wrap_MonthDayRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_setMonth", _wrap_MonthDayRuleImpl_setMonth, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_getMonth", _wrap_MonthDayRuleImpl_getMonth, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_setDayOfMonth", _wrap_MonthDayRuleImpl_setDayOfMonth, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_getDayOfMonth", _wrap_MonthDayRuleImpl_getDayOfMonth, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_calcDate", _wrap_MonthDayRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"delete_MonthDayRuleImpl", _wrap_delete_MonthDayRuleImpl, METH_VARARGS, NULL},
	 { (char *)"MonthDayRuleImpl_swigregister", MonthDayRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonthWeekDayRuleImpl", _wrap_new_MonthWeekDayRuleImpl, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl___eq__", _wrap_MonthWeekDayRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl___ne__", _wrap_MonthWeekDayRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_copyFrom", _wrap_MonthWeekDayRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_downCast", _wrap_MonthWeekDayRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_setMonth", _wrap_MonthWeekDayRuleImpl_setMonth, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_getMonth", _wrap_MonthWeekDayRuleImpl_getMonth, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_setMonthWeek", _wrap_MonthWeekDayRuleImpl_setMonthWeek, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_getMonthWeek", _wrap_MonthWeekDayRuleImpl_getMonthWeek, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_setWeekDay", _wrap_MonthWeekDayRuleImpl_setWeekDay, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_getWeekDay", _wrap_MonthWeekDayRuleImpl_getWeekDay, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_calcDate", _wrap_MonthWeekDayRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"delete_MonthWeekDayRuleImpl", _wrap_delete_MonthWeekDayRuleImpl, METH_VARARGS, NULL},
	 { (char *)"MonthWeekDayRuleImpl_swigregister", MonthWeekDayRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LastDayMonthRuleImpl", _wrap_new_LastDayMonthRuleImpl, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl___eq__", _wrap_LastDayMonthRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl___ne__", _wrap_LastDayMonthRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_copyFrom", _wrap_LastDayMonthRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_downCast", _wrap_LastDayMonthRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_setMonth", _wrap_LastDayMonthRuleImpl_setMonth, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_getMonth", _wrap_LastDayMonthRuleImpl_getMonth, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_setWeekDay", _wrap_LastDayMonthRuleImpl_setWeekDay, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_getWeekDay", _wrap_LastDayMonthRuleImpl_getWeekDay, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_calcDate", _wrap_LastDayMonthRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"delete_LastDayMonthRuleImpl", _wrap_delete_LastDayMonthRuleImpl, METH_VARARGS, NULL},
	 { (char *)"LastDayMonthRuleImpl_swigregister", LastDayMonthRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FirstDayMonthRuleImpl", _wrap_new_FirstDayMonthRuleImpl, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl___eq__", _wrap_FirstDayMonthRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl___ne__", _wrap_FirstDayMonthRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_copyFrom", _wrap_FirstDayMonthRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_downCast", _wrap_FirstDayMonthRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_setMonth", _wrap_FirstDayMonthRuleImpl_setMonth, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_getMonth", _wrap_FirstDayMonthRuleImpl_getMonth, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_setWeekDay", _wrap_FirstDayMonthRuleImpl_setWeekDay, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_getWeekDay", _wrap_FirstDayMonthRuleImpl_getWeekDay, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_calcDate", _wrap_FirstDayMonthRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"delete_FirstDayMonthRuleImpl", _wrap_delete_FirstDayMonthRuleImpl, METH_VARARGS, NULL},
	 { (char *)"FirstDayMonthRuleImpl_swigregister", FirstDayMonthRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DerivedRuleImpl", _wrap_new_DerivedRuleImpl, METH_VARARGS, NULL},
	 { (char *)"DerivedRuleImpl___eq__", _wrap_DerivedRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"DerivedRuleImpl___ne__", _wrap_DerivedRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"DerivedRuleImpl_copyFrom", _wrap_DerivedRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"DerivedRuleImpl_setUnderlying", _wrap_DerivedRuleImpl_setUnderlying, METH_VARARGS, NULL},
	 { (char *)"DerivedRuleImpl_getUnderlying", _wrap_DerivedRuleImpl_getUnderlying, METH_VARARGS, NULL},
	 { (char *)"delete_DerivedRuleImpl", _wrap_delete_DerivedRuleImpl, METH_VARARGS, NULL},
	 { (char *)"DerivedRuleImpl_swigregister", DerivedRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DaysOffsetRuleImpl", _wrap_new_DaysOffsetRuleImpl, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl___eq__", _wrap_DaysOffsetRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl___ne__", _wrap_DaysOffsetRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl_copyFrom", _wrap_DaysOffsetRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl_downCast", _wrap_DaysOffsetRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl_setOffset", _wrap_DaysOffsetRuleImpl_setOffset, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl_getOffset", _wrap_DaysOffsetRuleImpl_getOffset, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl_calcDate", _wrap_DaysOffsetRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"delete_DaysOffsetRuleImpl", _wrap_delete_DaysOffsetRuleImpl, METH_VARARGS, NULL},
	 { (char *)"DaysOffsetRuleImpl_swigregister", DaysOffsetRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FirstDayAtOrBeforeRuleImpl", _wrap_new_FirstDayAtOrBeforeRuleImpl, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl___eq__", _wrap_FirstDayAtOrBeforeRuleImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl___ne__", _wrap_FirstDayAtOrBeforeRuleImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_copyFrom", _wrap_FirstDayAtOrBeforeRuleImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_downCast", _wrap_FirstDayAtOrBeforeRuleImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_setWeekDay", _wrap_FirstDayAtOrBeforeRuleImpl_setWeekDay, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_getWeekDay", _wrap_FirstDayAtOrBeforeRuleImpl_getWeekDay, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_setStartAtFlag", _wrap_FirstDayAtOrBeforeRuleImpl_setStartAtFlag, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_getStartAtFlag", _wrap_FirstDayAtOrBeforeRuleImpl_getStartAtFlag, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_calcDate", _wrap_FirstDayAtOrBeforeRuleImpl_calcDate, METH_VARARGS, NULL},
	 { (char *)"delete_FirstDayAtOrBeforeRuleImpl", _wrap_delete_FirstDayAtOrBeforeRuleImpl, METH_VARARGS, NULL},
	 { (char *)"FirstDayAtOrBeforeRuleImpl_swigregister", FirstDayAtOrBeforeRuleImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalendarImpl", _wrap_new_CalendarImpl, METH_VARARGS, NULL},
	 { (char *)"delete_CalendarImpl", _wrap_delete_CalendarImpl, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_copyFrom", _wrap_CalendarImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_className", _wrap_CalendarImpl_className, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl___eq__", _wrap_CalendarImpl___eq__, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl___ne__", _wrap_CalendarImpl___ne__, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_getCalendarName", _wrap_CalendarImpl_getCalendarName, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_setCalendarName", _wrap_CalendarImpl_setCalendarName, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_addRule", _wrap_CalendarImpl_addRule, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_removeRule", _wrap_CalendarImpl_removeRule, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_findRule", _wrap_CalendarImpl_findRule, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_rules", _wrap_CalendarImpl_rules, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_isEmpty", _wrap_CalendarImpl_isEmpty, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_size", _wrap_CalendarImpl_size, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_ruleExists", _wrap_CalendarImpl_ruleExists, METH_VARARGS, NULL},
	 { (char *)"CalendarImpl_swigregister", CalendarImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BusinessCalendarImpl", _wrap_new_BusinessCalendarImpl, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_copyFrom", _wrap_BusinessCalendarImpl_copyFrom, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_downCast", _wrap_BusinessCalendarImpl_downCast, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_isBusinessDay", _wrap_BusinessCalendarImpl_isBusinessDay, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_isHoliday", _wrap_BusinessCalendarImpl_isHoliday, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_isEndOfMonth", _wrap_BusinessCalendarImpl_isEndOfMonth, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_endOfMonth", _wrap_BusinessCalendarImpl_endOfMonth, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_isWeekend", _wrap_BusinessCalendarImpl_isWeekend, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_isWeekendForYear", _wrap_BusinessCalendarImpl_isWeekendForYear, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_isWeekendForDate", _wrap_BusinessCalendarImpl_isWeekendForDate, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_addRule", _wrap_BusinessCalendarImpl_addRule, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_removeRule", _wrap_BusinessCalendarImpl_removeRule, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_add", _wrap_BusinessCalendarImpl_add, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_clone", _wrap_BusinessCalendarImpl_clone, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_businessDays", _wrap_BusinessCalendarImpl_businessDays, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_holidays", _wrap_BusinessCalendarImpl_holidays, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_weekends", _wrap_BusinessCalendarImpl_weekends, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_holidaysAndWeekends", _wrap_BusinessCalendarImpl_holidaysAndWeekends, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_holidaysForYear", _wrap_BusinessCalendarImpl_holidaysForYear, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_weekendsForYear", _wrap_BusinessCalendarImpl_weekendsForYear, METH_VARARGS, NULL},
	 { (char *)"delete_BusinessCalendarImpl", _wrap_delete_BusinessCalendarImpl, METH_VARARGS, NULL},
	 { (char *)"BusinessCalendarImpl_swigregister", BusinessCalendarImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalendarCacheImpl", _wrap_new_CalendarCacheImpl, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_getCacheName", _wrap_CalendarCacheImpl_getCacheName, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_setCacheName", _wrap_CalendarCacheImpl_setCacheName, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_add", _wrap_CalendarCacheImpl_add, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_remove", _wrap_CalendarCacheImpl_remove, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_find", _wrap_CalendarCacheImpl_find, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_isEmpty", _wrap_CalendarCacheImpl_isEmpty, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_size", _wrap_CalendarCacheImpl_size, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_calendarExists", _wrap_CalendarCacheImpl_calendarExists, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_merge", _wrap_CalendarCacheImpl_merge, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_begin", _wrap_CalendarCacheImpl_begin, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_end", _wrap_CalendarCacheImpl_end, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_calendarNames", _wrap_CalendarCacheImpl_calendarNames, METH_VARARGS, NULL},
	 { (char *)"delete_CalendarCacheImpl", _wrap_delete_CalendarCacheImpl, METH_VARARGS, NULL},
	 { (char *)"CalendarCacheImpl_swigregister", CalendarCacheImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"DataLoaderImpl_loadFromXmlFile", _wrap_DataLoaderImpl_loadFromXmlFile, METH_VARARGS, NULL},
	 { (char *)"delete_DataLoaderImpl", _wrap_delete_DataLoaderImpl, METH_VARARGS, NULL},
	 { (char *)"DataLoaderImpl_swigregister", DataLoaderImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_iterator", _wrap_VectorDateImpl_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___nonzero__", _wrap_VectorDateImpl___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___bool__", _wrap_VectorDateImpl___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___len__", _wrap_VectorDateImpl___len__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_pop", _wrap_VectorDateImpl_pop, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___getslice__", _wrap_VectorDateImpl___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___setslice__", _wrap_VectorDateImpl___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___delslice__", _wrap_VectorDateImpl___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___delitem__", _wrap_VectorDateImpl___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___getitem__", _wrap_VectorDateImpl___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl___setitem__", _wrap_VectorDateImpl___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_append", _wrap_VectorDateImpl_append, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_empty", _wrap_VectorDateImpl_empty, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_size", _wrap_VectorDateImpl_size, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_clear", _wrap_VectorDateImpl_clear, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_swap", _wrap_VectorDateImpl_swap, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_get_allocator", _wrap_VectorDateImpl_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_begin", _wrap_VectorDateImpl_begin, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_end", _wrap_VectorDateImpl_end, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_rbegin", _wrap_VectorDateImpl_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_rend", _wrap_VectorDateImpl_rend, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_pop_back", _wrap_VectorDateImpl_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_erase", _wrap_VectorDateImpl_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorDateImpl", _wrap_new_VectorDateImpl, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_push_back", _wrap_VectorDateImpl_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_front", _wrap_VectorDateImpl_front, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_back", _wrap_VectorDateImpl_back, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_assign", _wrap_VectorDateImpl_assign, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_resize", _wrap_VectorDateImpl_resize, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_insert", _wrap_VectorDateImpl_insert, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_reserve", _wrap_VectorDateImpl_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_capacity", _wrap_VectorDateImpl_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorDateImpl", _wrap_delete_VectorDateImpl, METH_VARARGS, NULL},
	 { (char *)"VectorDateImpl_swigregister", VectorDateImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_iterator", _wrap_SetDateImpl_iterator, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl___nonzero__", _wrap_SetDateImpl___nonzero__, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl___bool__", _wrap_SetDateImpl___bool__, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl___len__", _wrap_SetDateImpl___len__, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_append", _wrap_SetDateImpl_append, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl___contains__", _wrap_SetDateImpl___contains__, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl___getitem__", _wrap_SetDateImpl___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_SetDateImpl", _wrap_new_SetDateImpl, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_empty", _wrap_SetDateImpl_empty, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_size", _wrap_SetDateImpl_size, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_clear", _wrap_SetDateImpl_clear, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_swap", _wrap_SetDateImpl_swap, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_count", _wrap_SetDateImpl_count, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_begin", _wrap_SetDateImpl_begin, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_end", _wrap_SetDateImpl_end, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_rbegin", _wrap_SetDateImpl_rbegin, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_rend", _wrap_SetDateImpl_rend, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_erase", _wrap_SetDateImpl_erase, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_find", _wrap_SetDateImpl_find, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_lower_bound", _wrap_SetDateImpl_lower_bound, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_upper_bound", _wrap_SetDateImpl_upper_bound, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_equal_range", _wrap_SetDateImpl_equal_range, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_insert", _wrap_SetDateImpl_insert, METH_VARARGS, NULL},
	 { (char *)"delete_SetDateImpl", _wrap_delete_SetDateImpl, METH_VARARGS, NULL},
	 { (char *)"SetDateImpl_swigregister", SetDateImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_iterator", _wrap_SetWeekDayImpl_iterator, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl___nonzero__", _wrap_SetWeekDayImpl___nonzero__, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl___bool__", _wrap_SetWeekDayImpl___bool__, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl___len__", _wrap_SetWeekDayImpl___len__, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_append", _wrap_SetWeekDayImpl_append, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl___contains__", _wrap_SetWeekDayImpl___contains__, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl___getitem__", _wrap_SetWeekDayImpl___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_SetWeekDayImpl", _wrap_new_SetWeekDayImpl, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_empty", _wrap_SetWeekDayImpl_empty, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_size", _wrap_SetWeekDayImpl_size, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_clear", _wrap_SetWeekDayImpl_clear, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_swap", _wrap_SetWeekDayImpl_swap, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_count", _wrap_SetWeekDayImpl_count, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_begin", _wrap_SetWeekDayImpl_begin, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_end", _wrap_SetWeekDayImpl_end, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_rbegin", _wrap_SetWeekDayImpl_rbegin, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_rend", _wrap_SetWeekDayImpl_rend, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_erase", _wrap_SetWeekDayImpl_erase, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_find", _wrap_SetWeekDayImpl_find, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_lower_bound", _wrap_SetWeekDayImpl_lower_bound, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_upper_bound", _wrap_SetWeekDayImpl_upper_bound, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_equal_range", _wrap_SetWeekDayImpl_equal_range, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_insert", _wrap_SetWeekDayImpl_insert, METH_VARARGS, NULL},
	 { (char *)"delete_SetWeekDayImpl", _wrap_delete_SetWeekDayImpl, METH_VARARGS, NULL},
	 { (char *)"SetWeekDayImpl_swigregister", SetWeekDayImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_iterator", _wrap_SetStringImpl_iterator, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl___nonzero__", _wrap_SetStringImpl___nonzero__, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl___bool__", _wrap_SetStringImpl___bool__, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl___len__", _wrap_SetStringImpl___len__, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_append", _wrap_SetStringImpl_append, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl___contains__", _wrap_SetStringImpl___contains__, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl___getitem__", _wrap_SetStringImpl___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_SetStringImpl", _wrap_new_SetStringImpl, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_empty", _wrap_SetStringImpl_empty, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_size", _wrap_SetStringImpl_size, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_clear", _wrap_SetStringImpl_clear, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_swap", _wrap_SetStringImpl_swap, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_count", _wrap_SetStringImpl_count, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_begin", _wrap_SetStringImpl_begin, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_end", _wrap_SetStringImpl_end, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_rbegin", _wrap_SetStringImpl_rbegin, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_rend", _wrap_SetStringImpl_rend, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_erase", _wrap_SetStringImpl_erase, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_find", _wrap_SetStringImpl_find, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_lower_bound", _wrap_SetStringImpl_lower_bound, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_upper_bound", _wrap_SetStringImpl_upper_bound, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_equal_range", _wrap_SetStringImpl_equal_range, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_insert", _wrap_SetStringImpl_insert, METH_VARARGS, NULL},
	 { (char *)"delete_SetStringImpl", _wrap_delete_SetStringImpl, METH_VARARGS, NULL},
	 { (char *)"SetStringImpl_swigregister", SetStringImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_iterator", _wrap_CalendarRulesImpl_iterator, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl___nonzero__", _wrap_CalendarRulesImpl___nonzero__, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl___bool__", _wrap_CalendarRulesImpl___bool__, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl___len__", _wrap_CalendarRulesImpl___len__, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_append", _wrap_CalendarRulesImpl_append, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl___contains__", _wrap_CalendarRulesImpl___contains__, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl___getitem__", _wrap_CalendarRulesImpl___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_CalendarRulesImpl", _wrap_new_CalendarRulesImpl, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_empty", _wrap_CalendarRulesImpl_empty, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_size", _wrap_CalendarRulesImpl_size, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_clear", _wrap_CalendarRulesImpl_clear, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_swap", _wrap_CalendarRulesImpl_swap, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_count", _wrap_CalendarRulesImpl_count, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_begin", _wrap_CalendarRulesImpl_begin, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_end", _wrap_CalendarRulesImpl_end, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_rbegin", _wrap_CalendarRulesImpl_rbegin, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_rend", _wrap_CalendarRulesImpl_rend, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_erase", _wrap_CalendarRulesImpl_erase, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_find", _wrap_CalendarRulesImpl_find, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_lower_bound", _wrap_CalendarRulesImpl_lower_bound, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_upper_bound", _wrap_CalendarRulesImpl_upper_bound, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_equal_range", _wrap_CalendarRulesImpl_equal_range, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_insert", _wrap_CalendarRulesImpl_insert, METH_VARARGS, NULL},
	 { (char *)"delete_CalendarRulesImpl", _wrap_delete_CalendarRulesImpl, METH_VARARGS, NULL},
	 { (char *)"CalendarRulesImpl_swigregister", CalendarRulesImpl_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DaysTo_p_Day(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Day *)  ((Days *) x));
}
static void *_p_DayOfMonthTo_p_Day(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Day *)  ((DayOfMonth *) x));
}
static void *_p_DaysTo_p_DatePart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DatePart *) (Day *) ((Days *) x));
}
static void *_p_DayTo_p_DatePart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DatePart *)  ((Day *) x));
}
static void *_p_DayOfMonthTo_p_DatePart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DatePart *) (Day *) ((DayOfMonth *) x));
}
static void *_p_YearTo_p_DatePart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DatePart *)  ((Year *) x));
}
static void *_p_MonthTo_p_DatePart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DatePart *)  ((Month *) x));
}
static void *_p_DaysOffsetRuleTo_p_DerivedRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DerivedRule *)  ((DaysOffsetRule *) x));
}
static void *_p_FirstDayAtOrBeforeRuleTo_p_DerivedRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DerivedRule *)  ((FirstDayAtOrBeforeRule *) x));
}
static void *_p_DerivedRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *) ((DerivedRule *) x));
}
static void *_p_DaysOffsetRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *)(DerivedRule *) ((DaysOffsetRule *) x));
}
static void *_p_FirstDayAtOrBeforeRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *)(DerivedRule *) ((FirstDayAtOrBeforeRule *) x));
}
static void *_p_WeekendRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *)  ((WeekendRule *) x));
}
static void *_p_LastDayMonthRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *) ((LastDayMonthRule *) x));
}
static void *_p_FirstDayMonthRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *) ((FirstDayMonthRule *) x));
}
static void *_p_DateRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *)  ((DateRule *) x));
}
static void *_p_SpecificDateRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *) ((SpecificDateRule *) x));
}
static void *_p_MonthDayRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *) ((MonthDayRule *) x));
}
static void *_p_MonthWeekDayRuleTo_p_CalendarRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CalendarRule *) (DateRule *) ((MonthWeekDayRule *) x));
}
static void *_p_boost__shared_ptrT_DaysOffsetRule_tTo_p_boost__shared_ptrT_DerivedRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DerivedRule >(*(boost::shared_ptr< DaysOffsetRule > *)x);
}
static void *_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_tTo_p_boost__shared_ptrT_DerivedRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DerivedRule >(*(boost::shared_ptr< FirstDayAtOrBeforeRule > *)x);
}
static void *_p_boost__shared_ptrT_WeekendRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< WeekendRule > *)x);
}
static void *_p_boost__shared_ptrT_LastDayMonthRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< LastDayMonthRule > *)x);
}
static void *_p_boost__shared_ptrT_FirstDayMonthRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< FirstDayMonthRule > *)x);
}
static void *_p_boost__shared_ptrT_DerivedRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< DerivedRule > *)x);
}
static void *_p_boost__shared_ptrT_DaysOffsetRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< DaysOffsetRule > *)x);
}
static void *_p_boost__shared_ptrT_DateRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< DateRule > *)x);
}
static void *_p_boost__shared_ptrT_SpecificDateRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< SpecificDateRule > *)x);
}
static void *_p_boost__shared_ptrT_MonthDayRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< MonthDayRule > *)x);
}
static void *_p_boost__shared_ptrT_MonthWeekDayRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< MonthWeekDayRule > *)x);
}
static void *_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_tTo_p_boost__shared_ptrT_CalendarRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< CalendarRule >(*(boost::shared_ptr< FirstDayAtOrBeforeRule > *)x);
}
static void *_p_DerivedRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *)  ((DerivedRule *) x));
}
static void *_p_DaysOffsetRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *) (DerivedRule *) ((DaysOffsetRule *) x));
}
static void *_p_FirstDayAtOrBeforeRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *) (DerivedRule *) ((FirstDayAtOrBeforeRule *) x));
}
static void *_p_LastDayMonthRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *)  ((LastDayMonthRule *) x));
}
static void *_p_FirstDayMonthRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *)  ((FirstDayMonthRule *) x));
}
static void *_p_SpecificDateRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *)  ((SpecificDateRule *) x));
}
static void *_p_MonthDayRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *)  ((MonthDayRule *) x));
}
static void *_p_MonthWeekDayRuleTo_p_DateRule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DateRule *)  ((MonthWeekDayRule *) x));
}
static void *_p_BusinessCalendarTo_p_Calendar(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Calendar *)  ((BusinessCalendar *) x));
}
static void *_p_boost__shared_ptrT_BusinessCalendar_tTo_p_boost__shared_ptrT_Calendar_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< Calendar >(*(boost::shared_ptr< BusinessCalendar > *)x);
}
static void *_p_boost__shared_ptrT_LastDayMonthRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< LastDayMonthRule > *)x);
}
static void *_p_boost__shared_ptrT_FirstDayMonthRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< FirstDayMonthRule > *)x);
}
static void *_p_boost__shared_ptrT_DerivedRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< DerivedRule > *)x);
}
static void *_p_boost__shared_ptrT_DaysOffsetRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< DaysOffsetRule > *)x);
}
static void *_p_boost__shared_ptrT_SpecificDateRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< SpecificDateRule > *)x);
}
static void *_p_boost__shared_ptrT_MonthDayRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< MonthDayRule > *)x);
}
static void *_p_boost__shared_ptrT_MonthWeekDayRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< MonthWeekDayRule > *)x);
}
static void *_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_tTo_p_boost__shared_ptrT_DateRule_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< DateRule >(*(boost::shared_ptr< FirstDayAtOrBeforeRule > *)x);
}
static void *_p_HolidayDurationTo_p_ConstrainedInteger(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ConstrainedInteger *)  ((HolidayDuration *) x));
}
static void *_p_WeekDayTo_p_Enum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Enum *)  ((WeekDay *) x));
}
static void *_p_MonthWeekTo_p_Enum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Enum *)  ((MonthWeek *) x));
}
static swig_type_info _swigt__p_BusinessCalendar = {"_p_BusinessCalendar", "BusinessCalendar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Calendar = {"_p_Calendar", "Calendar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CalendarCache = {"_p_CalendarCache", "CalendarCache *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CalendarMap__const_iterator = {"_p_CalendarMap__const_iterator", "CalendarMap::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CalendarRule = {"_p_CalendarRule", "CalendarRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CalendarRuleSharedPtrLessThan = {"_p_CalendarRuleSharedPtrLessThan", "CalendarRuleSharedPtrLessThan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstrainedInteger = {"_p_ConstrainedInteger", "ConstrainedInteger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataLoader = {"_p_DataLoader", "DataLoader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Date = {"_p_Date", "std::set< Date >::key_type *|std::vector< Date >::value_type *|std::set< Date >::value_type *|Date *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DatePart = {"_p_DatePart", "DatePart *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DateRule = {"_p_DateRule", "DateRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Day = {"_p_Day", "Day *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DayOfMonth = {"_p_DayOfMonth", "DayOfMonth *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Days = {"_p_Days", "Days *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DaysOffsetRule = {"_p_DaysOffsetRule", "DaysOffsetRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DerivedRule = {"_p_DerivedRule", "DerivedRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Enum = {"_p_Enum", "Enum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FirstDayAtOrBeforeRule = {"_p_FirstDayAtOrBeforeRule", "FirstDayAtOrBeforeRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FirstDayMonthRule = {"_p_FirstDayMonthRule", "FirstDayMonthRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HolidayDuration = {"_p_HolidayDuration", "HolidayDuration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LastDayMonthRule = {"_p_LastDayMonthRule", "LastDayMonthRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Month = {"_p_Month", "Month *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MonthDayRule = {"_p_MonthDayRule", "MonthDayRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MonthWeek = {"_p_MonthWeek", "MonthWeek *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MonthWeekDayRule = {"_p_MonthWeekDayRule", "MonthWeekDayRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MonthWeek__eMonthWeek = {"_p_MonthWeek__eMonthWeek", "MonthWeek::eMonthWeek *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpecificDateRule = {"_p_SpecificDateRule", "SpecificDateRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorInteger = {"_p_VectorInteger", "VectorInteger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorString = {"_p_VectorString", "VectorString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WeekDay = {"_p_WeekDay", "WeekDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WeekendRule = {"_p_WeekendRule", "WeekendRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Year = {"_p_Year", "Year *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "Bool *|bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_BusinessCalendar_t = {"_p_boost__shared_ptrT_BusinessCalendar_t", "boost::shared_ptr< BusinessCalendar > *|BusinessCalendarSharedPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_CalendarCache_t = {"_p_boost__shared_ptrT_CalendarCache_t", "CalendarCacheSharedPtr *|boost::shared_ptr< CalendarCache > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_CalendarRule_t = {"_p_boost__shared_ptrT_CalendarRule_t", "CalendarRuleSharedPtr *|boost::shared_ptr< CalendarRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_Calendar_t = {"_p_boost__shared_ptrT_Calendar_t", "boost::shared_ptr< Calendar > *|CalendarSharedPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_DateRule_t = {"_p_boost__shared_ptrT_DateRule_t", "DateRuleSharedPtr *|boost::shared_ptr< DateRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_DaysOffsetRule_t = {"_p_boost__shared_ptrT_DaysOffsetRule_t", "DaysOffsetRuleSharedPtr *|boost::shared_ptr< DaysOffsetRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_DerivedRule_t = {"_p_boost__shared_ptrT_DerivedRule_t", "DerivedRuleSharedPtr *|boost::shared_ptr< DerivedRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t = {"_p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t", "FirstDayAtOrBeforeRuleSharedPtr *|boost::shared_ptr< FirstDayAtOrBeforeRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_FirstDayMonthRule_t = {"_p_boost__shared_ptrT_FirstDayMonthRule_t", "FirstDayMonthRuleSharedPtr *|boost::shared_ptr< FirstDayMonthRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_LastDayMonthRule_t = {"_p_boost__shared_ptrT_LastDayMonthRule_t", "LastDayMonthRuleSharedPtr *|boost::shared_ptr< LastDayMonthRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_MonthDayRule_t = {"_p_boost__shared_ptrT_MonthDayRule_t", "MonthDayRuleSharedPtr *|boost::shared_ptr< MonthDayRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_MonthWeekDayRule_t = {"_p_boost__shared_ptrT_MonthWeekDayRule_t", "MonthWeekDayRuleSharedPtr *|boost::shared_ptr< MonthWeekDayRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_SpecificDateRule_t = {"_p_boost__shared_ptrT_SpecificDateRule_t", "SpecificDateRuleSharedPtr *|boost::shared_ptr< SpecificDateRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_WeekendRule_t = {"_p_boost__shared_ptrT_WeekendRule_t", "WeekendRuleSharedPtr *|boost::shared_ptr< WeekendRule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eWeekDay = {"_p_eWeekDay", "eWeekDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eWeekOfMonth = {"_p_eWeekOfMonth", "eWeekOfMonth *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Integer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|BigInteger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "Size *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Date_t = {"_p_std__allocatorT_Date_t", "std::allocator< Date > *|std::vector< Date >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_Date_t = {"_p_std__lessT_Date_t", "std::less< Date > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_WeekDay__eWeekDay_t = {"_p_std__lessT_WeekDay__eWeekDay_t", "std::less< enum WeekDay::eWeekDay > *|std::less< WeekDay::eWeekDay > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t = {"_p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t", "std::set< Date > *|SetDate *|std::set< Date,std::less< Date >,std::allocator< Date > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t = {"_p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t", "std::set< enum WeekDay::eWeekDay,std::less< enum WeekDay::eWeekDay >,std::allocator< enum WeekDay::eWeekDay > > *|std::set< enum WeekDay::eWeekDay > *|std::set< WeekDay::eWeekDay > *|SetWeekDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t = {"_p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t", "std::set< CalendarRuleSharedPtr,CalendarRuleSharedPtrLessThan > *|CalendarRules *|std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan > *|std::set< boost::shared_ptr< CalendarRule >,CalendarRuleSharedPtrLessThan,std::allocator< boost::shared_ptr< CalendarRule > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t = {"_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t", "std::set< std::string,std::less< std::string >,std::allocator< std::string > > *|std::set< std::string > *|std::set< String > *|SetString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Date_std__allocatorT_Date_t_t = {"_p_std__vectorT_Date_std__allocatorT_Date_t_t", "std::vector< Date > *|std::vector< Date,std::allocator< Date > > *|VectorDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__Tp__Alloc_t", "std::vector< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BusinessCalendar,
  &_swigt__p_Calendar,
  &_swigt__p_CalendarCache,
  &_swigt__p_CalendarMap__const_iterator,
  &_swigt__p_CalendarRule,
  &_swigt__p_CalendarRuleSharedPtrLessThan,
  &_swigt__p_ConstrainedInteger,
  &_swigt__p_DataLoader,
  &_swigt__p_Date,
  &_swigt__p_DatePart,
  &_swigt__p_DateRule,
  &_swigt__p_Day,
  &_swigt__p_DayOfMonth,
  &_swigt__p_Days,
  &_swigt__p_DaysOffsetRule,
  &_swigt__p_DerivedRule,
  &_swigt__p_Enum,
  &_swigt__p_FirstDayAtOrBeforeRule,
  &_swigt__p_FirstDayMonthRule,
  &_swigt__p_HolidayDuration,
  &_swigt__p_LastDayMonthRule,
  &_swigt__p_Month,
  &_swigt__p_MonthDayRule,
  &_swigt__p_MonthWeek,
  &_swigt__p_MonthWeekDayRule,
  &_swigt__p_MonthWeek__eMonthWeek,
  &_swigt__p_SpecificDateRule,
  &_swigt__p_VectorInteger,
  &_swigt__p_VectorString,
  &_swigt__p_WeekDay,
  &_swigt__p_WeekendRule,
  &_swigt__p_Year,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_boost__shared_ptrT_BusinessCalendar_t,
  &_swigt__p_boost__shared_ptrT_CalendarCache_t,
  &_swigt__p_boost__shared_ptrT_CalendarRule_t,
  &_swigt__p_boost__shared_ptrT_Calendar_t,
  &_swigt__p_boost__shared_ptrT_DateRule_t,
  &_swigt__p_boost__shared_ptrT_DaysOffsetRule_t,
  &_swigt__p_boost__shared_ptrT_DerivedRule_t,
  &_swigt__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t,
  &_swigt__p_boost__shared_ptrT_FirstDayMonthRule_t,
  &_swigt__p_boost__shared_ptrT_LastDayMonthRule_t,
  &_swigt__p_boost__shared_ptrT_MonthDayRule_t,
  &_swigt__p_boost__shared_ptrT_MonthWeekDayRule_t,
  &_swigt__p_boost__shared_ptrT_SpecificDateRule_t,
  &_swigt__p_boost__shared_ptrT_WeekendRule_t,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_eWeekDay,
  &_swigt__p_eWeekOfMonth,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_Date_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_Date_t,
  &_swigt__p_std__lessT_WeekDay__eWeekDay_t,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t,
  &_swigt__p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t,
  &_swigt__p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t,
  &_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Date_std__allocatorT_Date_t_t,
  &_swigt__p_std__vectorT__Tp__Alloc_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_BusinessCalendar[] = {  {&_swigt__p_BusinessCalendar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Calendar[] = {  {&_swigt__p_Calendar, 0, 0, 0},  {&_swigt__p_BusinessCalendar, _p_BusinessCalendarTo_p_Calendar, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CalendarCache[] = {  {&_swigt__p_CalendarCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CalendarMap__const_iterator[] = {  {&_swigt__p_CalendarMap__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CalendarRule[] = {  {&_swigt__p_DerivedRule, _p_DerivedRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_DaysOffsetRule, _p_DaysOffsetRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_FirstDayAtOrBeforeRule, _p_FirstDayAtOrBeforeRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_WeekendRule, _p_WeekendRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_LastDayMonthRule, _p_LastDayMonthRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_FirstDayMonthRule, _p_FirstDayMonthRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_DateRule, _p_DateRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_SpecificDateRule, _p_SpecificDateRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_CalendarRule, 0, 0, 0},  {&_swigt__p_MonthDayRule, _p_MonthDayRuleTo_p_CalendarRule, 0, 0},  {&_swigt__p_MonthWeekDayRule, _p_MonthWeekDayRuleTo_p_CalendarRule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CalendarRuleSharedPtrLessThan[] = {  {&_swigt__p_CalendarRuleSharedPtrLessThan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstrainedInteger[] = {  {&_swigt__p_ConstrainedInteger, 0, 0, 0},  {&_swigt__p_HolidayDuration, _p_HolidayDurationTo_p_ConstrainedInteger, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataLoader[] = {  {&_swigt__p_DataLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Date[] = {  {&_swigt__p_Date, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DatePart[] = {  {&_swigt__p_DayOfMonth, _p_DayOfMonthTo_p_DatePart, 0, 0},  {&_swigt__p_Year, _p_YearTo_p_DatePart, 0, 0},  {&_swigt__p_DatePart, 0, 0, 0},  {&_swigt__p_Month, _p_MonthTo_p_DatePart, 0, 0},  {&_swigt__p_Day, _p_DayTo_p_DatePart, 0, 0},  {&_swigt__p_Days, _p_DaysTo_p_DatePart, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DateRule[] = {  {&_swigt__p_DerivedRule, _p_DerivedRuleTo_p_DateRule, 0, 0},  {&_swigt__p_DaysOffsetRule, _p_DaysOffsetRuleTo_p_DateRule, 0, 0},  {&_swigt__p_FirstDayAtOrBeforeRule, _p_FirstDayAtOrBeforeRuleTo_p_DateRule, 0, 0},  {&_swigt__p_LastDayMonthRule, _p_LastDayMonthRuleTo_p_DateRule, 0, 0},  {&_swigt__p_FirstDayMonthRule, _p_FirstDayMonthRuleTo_p_DateRule, 0, 0},  {&_swigt__p_DateRule, 0, 0, 0},  {&_swigt__p_SpecificDateRule, _p_SpecificDateRuleTo_p_DateRule, 0, 0},  {&_swigt__p_MonthDayRule, _p_MonthDayRuleTo_p_DateRule, 0, 0},  {&_swigt__p_MonthWeekDayRule, _p_MonthWeekDayRuleTo_p_DateRule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Day[] = {  {&_swigt__p_DayOfMonth, _p_DayOfMonthTo_p_Day, 0, 0},  {&_swigt__p_Day, 0, 0, 0},  {&_swigt__p_Days, _p_DaysTo_p_Day, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DayOfMonth[] = {  {&_swigt__p_DayOfMonth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Days[] = {  {&_swigt__p_Days, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DaysOffsetRule[] = {  {&_swigt__p_DaysOffsetRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DerivedRule[] = {  {&_swigt__p_DerivedRule, 0, 0, 0},  {&_swigt__p_DaysOffsetRule, _p_DaysOffsetRuleTo_p_DerivedRule, 0, 0},  {&_swigt__p_FirstDayAtOrBeforeRule, _p_FirstDayAtOrBeforeRuleTo_p_DerivedRule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Enum[] = {  {&_swigt__p_Enum, 0, 0, 0},  {&_swigt__p_WeekDay, _p_WeekDayTo_p_Enum, 0, 0},  {&_swigt__p_MonthWeek, _p_MonthWeekTo_p_Enum, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FirstDayAtOrBeforeRule[] = {  {&_swigt__p_FirstDayAtOrBeforeRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FirstDayMonthRule[] = {  {&_swigt__p_FirstDayMonthRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HolidayDuration[] = {  {&_swigt__p_HolidayDuration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LastDayMonthRule[] = {  {&_swigt__p_LastDayMonthRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Month[] = {  {&_swigt__p_Month, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonthDayRule[] = {  {&_swigt__p_MonthDayRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonthWeek[] = {  {&_swigt__p_MonthWeek, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonthWeekDayRule[] = {  {&_swigt__p_MonthWeekDayRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonthWeek__eMonthWeek[] = {  {&_swigt__p_MonthWeek__eMonthWeek, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpecificDateRule[] = {  {&_swigt__p_SpecificDateRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorInteger[] = {  {&_swigt__p_VectorInteger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorString[] = {  {&_swigt__p_VectorString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WeekDay[] = {  {&_swigt__p_WeekDay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WeekendRule[] = {  {&_swigt__p_WeekendRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Year[] = {  {&_swigt__p_Year, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_BusinessCalendar_t[] = {  {&_swigt__p_boost__shared_ptrT_BusinessCalendar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_CalendarCache_t[] = {  {&_swigt__p_boost__shared_ptrT_CalendarCache_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_CalendarRule_t[] = {  {&_swigt__p_boost__shared_ptrT_CalendarRule_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_WeekendRule_t, _p_boost__shared_ptrT_WeekendRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_LastDayMonthRule_t, _p_boost__shared_ptrT_LastDayMonthRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_FirstDayMonthRule_t, _p_boost__shared_ptrT_FirstDayMonthRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_DerivedRule_t, _p_boost__shared_ptrT_DerivedRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_DaysOffsetRule_t, _p_boost__shared_ptrT_DaysOffsetRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, _p_boost__shared_ptrT_FirstDayAtOrBeforeRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_DateRule_t, _p_boost__shared_ptrT_DateRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_SpecificDateRule_t, _p_boost__shared_ptrT_SpecificDateRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_MonthDayRule_t, _p_boost__shared_ptrT_MonthDayRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_MonthWeekDayRule_t, _p_boost__shared_ptrT_MonthWeekDayRule_tTo_p_boost__shared_ptrT_CalendarRule_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_Calendar_t[] = {  {&_swigt__p_boost__shared_ptrT_Calendar_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_BusinessCalendar_t, _p_boost__shared_ptrT_BusinessCalendar_tTo_p_boost__shared_ptrT_Calendar_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_DateRule_t[] = {  {&_swigt__p_boost__shared_ptrT_LastDayMonthRule_t, _p_boost__shared_ptrT_LastDayMonthRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_FirstDayMonthRule_t, _p_boost__shared_ptrT_FirstDayMonthRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_DerivedRule_t, _p_boost__shared_ptrT_DerivedRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_DaysOffsetRule_t, _p_boost__shared_ptrT_DaysOffsetRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_DateRule_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, _p_boost__shared_ptrT_FirstDayAtOrBeforeRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_SpecificDateRule_t, _p_boost__shared_ptrT_SpecificDateRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_MonthDayRule_t, _p_boost__shared_ptrT_MonthDayRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_MonthWeekDayRule_t, _p_boost__shared_ptrT_MonthWeekDayRule_tTo_p_boost__shared_ptrT_DateRule_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_DaysOffsetRule_t[] = {  {&_swigt__p_boost__shared_ptrT_DaysOffsetRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_DerivedRule_t[] = {  {&_swigt__p_boost__shared_ptrT_DerivedRule_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_DaysOffsetRule_t, _p_boost__shared_ptrT_DaysOffsetRule_tTo_p_boost__shared_ptrT_DerivedRule_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, _p_boost__shared_ptrT_FirstDayAtOrBeforeRule_tTo_p_boost__shared_ptrT_DerivedRule_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t[] = {  {&_swigt__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_FirstDayMonthRule_t[] = {  {&_swigt__p_boost__shared_ptrT_FirstDayMonthRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_LastDayMonthRule_t[] = {  {&_swigt__p_boost__shared_ptrT_LastDayMonthRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_MonthDayRule_t[] = {  {&_swigt__p_boost__shared_ptrT_MonthDayRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_MonthWeekDayRule_t[] = {  {&_swigt__p_boost__shared_ptrT_MonthWeekDayRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_SpecificDateRule_t[] = {  {&_swigt__p_boost__shared_ptrT_SpecificDateRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_WeekendRule_t[] = {  {&_swigt__p_boost__shared_ptrT_WeekendRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eWeekDay[] = {  {&_swigt__p_eWeekDay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eWeekOfMonth[] = {  {&_swigt__p_eWeekOfMonth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Date_t[] = {  {&_swigt__p_std__allocatorT_Date_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_Date_t[] = {  {&_swigt__p_std__lessT_Date_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_WeekDay__eWeekDay_t[] = {  {&_swigt__p_std__lessT_WeekDay__eWeekDay_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t[] = {  {&_swigt__p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t[] = {  {&_swigt__p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t[] = {  {&_swigt__p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Date_std__allocatorT_Date_t_t[] = {  {&_swigt__p_std__vectorT_Date_std__allocatorT_Date_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BusinessCalendar,
  _swigc__p_Calendar,
  _swigc__p_CalendarCache,
  _swigc__p_CalendarMap__const_iterator,
  _swigc__p_CalendarRule,
  _swigc__p_CalendarRuleSharedPtrLessThan,
  _swigc__p_ConstrainedInteger,
  _swigc__p_DataLoader,
  _swigc__p_Date,
  _swigc__p_DatePart,
  _swigc__p_DateRule,
  _swigc__p_Day,
  _swigc__p_DayOfMonth,
  _swigc__p_Days,
  _swigc__p_DaysOffsetRule,
  _swigc__p_DerivedRule,
  _swigc__p_Enum,
  _swigc__p_FirstDayAtOrBeforeRule,
  _swigc__p_FirstDayMonthRule,
  _swigc__p_HolidayDuration,
  _swigc__p_LastDayMonthRule,
  _swigc__p_Month,
  _swigc__p_MonthDayRule,
  _swigc__p_MonthWeek,
  _swigc__p_MonthWeekDayRule,
  _swigc__p_MonthWeek__eMonthWeek,
  _swigc__p_SpecificDateRule,
  _swigc__p_VectorInteger,
  _swigc__p_VectorString,
  _swigc__p_WeekDay,
  _swigc__p_WeekendRule,
  _swigc__p_Year,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_boost__shared_ptrT_BusinessCalendar_t,
  _swigc__p_boost__shared_ptrT_CalendarCache_t,
  _swigc__p_boost__shared_ptrT_CalendarRule_t,
  _swigc__p_boost__shared_ptrT_Calendar_t,
  _swigc__p_boost__shared_ptrT_DateRule_t,
  _swigc__p_boost__shared_ptrT_DaysOffsetRule_t,
  _swigc__p_boost__shared_ptrT_DerivedRule_t,
  _swigc__p_boost__shared_ptrT_FirstDayAtOrBeforeRule_t,
  _swigc__p_boost__shared_ptrT_FirstDayMonthRule_t,
  _swigc__p_boost__shared_ptrT_LastDayMonthRule_t,
  _swigc__p_boost__shared_ptrT_MonthDayRule_t,
  _swigc__p_boost__shared_ptrT_MonthWeekDayRule_t,
  _swigc__p_boost__shared_ptrT_SpecificDateRule_t,
  _swigc__p_boost__shared_ptrT_WeekendRule_t,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_eWeekDay,
  _swigc__p_eWeekOfMonth,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_p_PyObject,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_Date_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_Date_t,
  _swigc__p_std__lessT_WeekDay__eWeekDay_t,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__setT_Date_std__lessT_Date_t_std__allocatorT_Date_t_t,
  _swigc__p_std__setT_WeekDay__eWeekDay_std__lessT_WeekDay__eWeekDay_t_std__allocatorT_WeekDay__eWeekDay_t_t,
  _swigc__p_std__setT_boost__shared_ptrT_CalendarRule_t_CalendarRuleSharedPtrLessThan_std__allocatorT_boost__shared_ptrT_CalendarRule_t_t_t,
  _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Date_std__allocatorT_Date_t_t,
  _swigc__p_std__vectorT__Tp__Alloc_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "WeekDayImpl_Sunday",SWIG_From_int(static_cast< int >(WeekDay::Sunday)));
  SWIG_Python_SetConstant(d, "WeekDayImpl_Monday",SWIG_From_int(static_cast< int >(WeekDay::Monday)));
  SWIG_Python_SetConstant(d, "WeekDayImpl_Tuesday",SWIG_From_int(static_cast< int >(WeekDay::Tuesday)));
  SWIG_Python_SetConstant(d, "WeekDayImpl_Wednesday",SWIG_From_int(static_cast< int >(WeekDay::Wednesday)));
  SWIG_Python_SetConstant(d, "WeekDayImpl_Thursday",SWIG_From_int(static_cast< int >(WeekDay::Thursday)));
  SWIG_Python_SetConstant(d, "WeekDayImpl_Friday",SWIG_From_int(static_cast< int >(WeekDay::Friday)));
  SWIG_Python_SetConstant(d, "WeekDayImpl_Saturday",SWIG_From_int(static_cast< int >(WeekDay::Saturday)));
  SWIG_Python_SetConstant(d, "MonthWeekImpl_First",SWIG_From_int(static_cast< int >(MonthWeek::First)));
  SWIG_Python_SetConstant(d, "MonthWeekImpl_Second",SWIG_From_int(static_cast< int >(MonthWeek::Second)));
  SWIG_Python_SetConstant(d, "MonthWeekImpl_Third",SWIG_From_int(static_cast< int >(MonthWeek::Third)));
  SWIG_Python_SetConstant(d, "MonthWeekImpl_Fourth",SWIG_From_int(static_cast< int >(MonthWeek::Fourth)));
  SWIG_Python_SetConstant(d, "MonthWeekImpl_Fifth",SWIG_From_int(static_cast< int >(MonthWeek::Fifth)));
  
  
  
  // pCalendarException = PyErr_NewException("_calendar_impl.CalendarException", NULL, NULL);
  //Py_INCREF(pCalendarException);
  //PyModule_AddObject(m, "CalendarException", pCalendarException);
  
  
  ondalear::logging::log4cppimpl::Log4cppComponentManager::bootstrap();
  ondalear::xml::xercesimpl::XercesComponentManager::bootstrap();
  ondalear::constrained::boostimpl::BoostConstrainingTypeComponentManager::bootstrap();
  ondalear::datetime::boostimpl::BoostDateTimeComponentManager::bootstrap();
  
  LoggingConfig config;
  config.setDefaults();
  LoggingConfigurator& configurator = LoggingConfigurator::instance();
  configurator.initialize();
  configurator.apply(config);
  
  XMLConfigurator::instance().initialize();
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

