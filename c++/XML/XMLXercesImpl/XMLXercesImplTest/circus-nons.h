#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace XMLXercesImplTest {
    using namespace System;
    ref class animalList;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"animalList"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class animalList : public ::System::Data::DataSet {
        public : ref class animalDataTable;
        public : ref class veterinarianDataTable;
        public : ref class trainerDataTable;
        public : ref class animalRow;
        public : ref class veterinarianRow;
        public : ref class trainerRow;
        public : ref class animalRowChangeEvent;
        public : ref class veterinarianRowChangeEvent;
        public : ref class trainerRowChangeEvent;
        
        private: XMLXercesImplTest::animalList::animalDataTable^  tableanimal;
        
        private: XMLXercesImplTest::animalList::veterinarianDataTable^  tableveterinarian;
        
        private: XMLXercesImplTest::animalList::trainerDataTable^  tabletrainer;
        
        private: ::System::Data::DataRelation^  relationanimal_veterinarian;
        
        private: ::System::Data::DataRelation^  relationanimal_trainer;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void animalRowChangeEventHandler(::System::Object^  sender, XMLXercesImplTest::animalList::animalRowChangeEvent^  e);
        
        public : delegate System::Void veterinarianRowChangeEventHandler(::System::Object^  sender, XMLXercesImplTest::animalList::veterinarianRowChangeEvent^  e);
        
        public : delegate System::Void trainerRowChangeEventHandler(::System::Object^  sender, XMLXercesImplTest::animalList::trainerRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        animalList();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        animalList(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XMLXercesImplTest::animalList::animalDataTable^  animal {
            XMLXercesImplTest::animalList::animalDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XMLXercesImplTest::animalList::veterinarianDataTable^  veterinarian {
            XMLXercesImplTest::animalList::veterinarianDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XMLXercesImplTest::animalList::trainerDataTable^  trainer {
            XMLXercesImplTest::animalList::trainerDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeanimal();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeveterinarian();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializetrainer();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class animalDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnspecies;
            
            private: ::System::Data::DataColumn^  columndateOfBirth;
            
            private: ::System::Data::DataColumn^  columnanimal_Id;
            
            public: event XMLXercesImplTest::animalList::animalRowChangeEventHandler^  animalRowChanging;
            
            public: event XMLXercesImplTest::animalList::animalRowChangeEventHandler^  animalRowChanged;
            
            public: event XMLXercesImplTest::animalList::animalRowChangeEventHandler^  animalRowDeleting;
            
            public: event XMLXercesImplTest::animalList::animalRowChangeEventHandler^  animalRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            animalDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            animalDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            animalDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  speciesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  dateOfBirthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  animal_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::animalRow^  default [::System::Int32 ] {
                XMLXercesImplTest::animalList::animalRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddanimalRow(XMLXercesImplTest::animalList::animalRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            XMLXercesImplTest::animalList::animalRow^  AddanimalRow(System::String^  name, System::String^  species, System::DateTime dateOfBirth);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            XMLXercesImplTest::animalList::animalRow^  NewanimalRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveanimalRow(XMLXercesImplTest::animalList::animalRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class veterinarianDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnphone;
            
            private: ::System::Data::DataColumn^  columnanimal_Id;
            
            public: event XMLXercesImplTest::animalList::veterinarianRowChangeEventHandler^  veterinarianRowChanging;
            
            public: event XMLXercesImplTest::animalList::veterinarianRowChangeEventHandler^  veterinarianRowChanged;
            
            public: event XMLXercesImplTest::animalList::veterinarianRowChangeEventHandler^  veterinarianRowDeleting;
            
            public: event XMLXercesImplTest::animalList::veterinarianRowChangeEventHandler^  veterinarianRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            veterinarianDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            veterinarianDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            veterinarianDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  phoneColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  animal_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::veterinarianRow^  default [::System::Int32 ] {
                XMLXercesImplTest::animalList::veterinarianRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddveterinarianRow(XMLXercesImplTest::animalList::veterinarianRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            XMLXercesImplTest::animalList::veterinarianRow^  AddveterinarianRow(System::String^  name, System::String^  phone, 
                        XMLXercesImplTest::animalList::animalRow^  parentanimalRowByanimal_veterinarian);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            XMLXercesImplTest::animalList::veterinarianRow^  NewveterinarianRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveveterinarianRow(XMLXercesImplTest::animalList::veterinarianRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class trainerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnphone;
            
            private: ::System::Data::DataColumn^  columnanimal_Id;
            
            public: event XMLXercesImplTest::animalList::trainerRowChangeEventHandler^  trainerRowChanging;
            
            public: event XMLXercesImplTest::animalList::trainerRowChangeEventHandler^  trainerRowChanged;
            
            public: event XMLXercesImplTest::animalList::trainerRowChangeEventHandler^  trainerRowDeleting;
            
            public: event XMLXercesImplTest::animalList::trainerRowChangeEventHandler^  trainerRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            trainerDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            trainerDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            trainerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  phoneColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  animal_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::trainerRow^  default [::System::Int32 ] {
                XMLXercesImplTest::animalList::trainerRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddtrainerRow(XMLXercesImplTest::animalList::trainerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            XMLXercesImplTest::animalList::trainerRow^  AddtrainerRow(System::String^  name, System::String^  phone, XMLXercesImplTest::animalList::animalRow^  parentanimalRowByanimal_trainer);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            XMLXercesImplTest::animalList::trainerRow^  NewtrainerRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovetrainerRow(XMLXercesImplTest::animalList::trainerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class animalRow : public ::System::Data::DataRow {
            
            private: XMLXercesImplTest::animalList::animalDataTable^  tableanimal;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            animalRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  species {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime dateOfBirth {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 animal_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< XMLXercesImplTest::animalList::veterinarianRow^  >^  GetveterinarianRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< XMLXercesImplTest::animalList::trainerRow^  >^  GettrainerRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class veterinarianRow : public ::System::Data::DataRow {
            
            private: XMLXercesImplTest::animalList::veterinarianDataTable^  tableveterinarian;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            veterinarianRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  phone {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 animal_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::animalRow^  animalRow {
                XMLXercesImplTest::animalList::animalRow^  get();
                System::Void set(XMLXercesImplTest::animalList::animalRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsphoneNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetphoneNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isanimal_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setanimal_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class trainerRow : public ::System::Data::DataRow {
            
            private: XMLXercesImplTest::animalList::trainerDataTable^  tabletrainer;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            trainerRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  phone {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 animal_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::animalRow^  animalRow {
                XMLXercesImplTest::animalList::animalRow^  get();
                System::Void set(XMLXercesImplTest::animalList::animalRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsphoneNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetphoneNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isanimal_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setanimal_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class animalRowChangeEvent : public ::System::EventArgs {
            
            private: XMLXercesImplTest::animalList::animalRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            animalRowChangeEvent(XMLXercesImplTest::animalList::animalRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::animalRow^  Row {
                XMLXercesImplTest::animalList::animalRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class veterinarianRowChangeEvent : public ::System::EventArgs {
            
            private: XMLXercesImplTest::animalList::veterinarianRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            veterinarianRowChangeEvent(XMLXercesImplTest::animalList::veterinarianRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::veterinarianRow^  Row {
                XMLXercesImplTest::animalList::veterinarianRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class trainerRowChangeEvent : public ::System::EventArgs {
            
            private: XMLXercesImplTest::animalList::trainerRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            trainerRowChangeEvent(XMLXercesImplTest::animalList::trainerRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property XMLXercesImplTest::animalList::trainerRow^  Row {
                XMLXercesImplTest::animalList::trainerRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace XMLXercesImplTest {
    
    
    inline animalList::animalList() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &XMLXercesImplTest::animalList::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline animalList::animalList(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &XMLXercesImplTest::animalList::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"animal"] != nullptr) {
                __super::Tables->Add((gcnew XMLXercesImplTest::animalList::animalDataTable(ds->Tables[L"animal"])));
            }
            if (ds->Tables[L"veterinarian"] != nullptr) {
                __super::Tables->Add((gcnew XMLXercesImplTest::animalList::veterinarianDataTable(ds->Tables[L"veterinarian"])));
            }
            if (ds->Tables[L"trainer"] != nullptr) {
                __super::Tables->Add((gcnew XMLXercesImplTest::animalList::trainerDataTable(ds->Tables[L"trainer"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &XMLXercesImplTest::animalList::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline XMLXercesImplTest::animalList::animalDataTable^  animalList::animal::get() {
        return this->tableanimal;
    }
    
    inline XMLXercesImplTest::animalList::veterinarianDataTable^  animalList::veterinarian::get() {
        return this->tableveterinarian;
    }
    
    inline XMLXercesImplTest::animalList::trainerDataTable^  animalList::trainer::get() {
        return this->tabletrainer;
    }
    
    inline ::System::Data::SchemaSerializationMode animalList::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void animalList::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  animalList::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  animalList::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void animalList::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  animalList::Clone() {
        XMLXercesImplTest::animalList^  cln = (cli::safe_cast<XMLXercesImplTest::animalList^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean animalList::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean animalList::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void animalList::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"animal"] != nullptr) {
                __super::Tables->Add((gcnew XMLXercesImplTest::animalList::animalDataTable(ds->Tables[L"animal"])));
            }
            if (ds->Tables[L"veterinarian"] != nullptr) {
                __super::Tables->Add((gcnew XMLXercesImplTest::animalList::veterinarianDataTable(ds->Tables[L"veterinarian"])));
            }
            if (ds->Tables[L"trainer"] != nullptr) {
                __super::Tables->Add((gcnew XMLXercesImplTest::animalList::trainerDataTable(ds->Tables[L"trainer"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  animalList::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void animalList::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void animalList::InitVars(::System::Boolean initTable) {
        this->tableanimal = (cli::safe_cast<XMLXercesImplTest::animalList::animalDataTable^  >(__super::Tables[L"animal"]));
        if (initTable == true) {
            if (this->tableanimal != nullptr) {
                this->tableanimal->InitVars();
            }
        }
        this->tableveterinarian = (cli::safe_cast<XMLXercesImplTest::animalList::veterinarianDataTable^  >(__super::Tables[L"veterinarian"]));
        if (initTable == true) {
            if (this->tableveterinarian != nullptr) {
                this->tableveterinarian->InitVars();
            }
        }
        this->tabletrainer = (cli::safe_cast<XMLXercesImplTest::animalList::trainerDataTable^  >(__super::Tables[L"trainer"]));
        if (initTable == true) {
            if (this->tabletrainer != nullptr) {
                this->tabletrainer->InitVars();
            }
        }
        this->relationanimal_veterinarian = this->Relations[L"animal_veterinarian"];
        this->relationanimal_trainer = this->Relations[L"animal_trainer"];
    }
    
    inline ::System::Void animalList::InitClass() {
        this->DataSetName = L"animalList";
        this->Prefix = L"";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableanimal = (gcnew XMLXercesImplTest::animalList::animalDataTable());
        __super::Tables->Add(this->tableanimal);
        this->tableveterinarian = (gcnew XMLXercesImplTest::animalList::veterinarianDataTable());
        __super::Tables->Add(this->tableveterinarian);
        this->tabletrainer = (gcnew XMLXercesImplTest::animalList::trainerDataTable());
        __super::Tables->Add(this->tabletrainer);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"animal_veterinarian", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimal->animal_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableveterinarian->animal_IdColumn}));
        this->tableveterinarian->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"animal_trainer", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimal->animal_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletrainer->animal_IdColumn}));
        this->tabletrainer->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationanimal_veterinarian = (gcnew ::System::Data::DataRelation(L"animal_veterinarian", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimal->animal_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableveterinarian->animal_IdColumn}, false));
        this->relationanimal_veterinarian->Nested = true;
        this->Relations->Add(this->relationanimal_veterinarian);
        this->relationanimal_trainer = (gcnew ::System::Data::DataRelation(L"animal_trainer", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimal->animal_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletrainer->animal_IdColumn}, false));
        this->relationanimal_trainer->Nested = true;
        this->Relations->Add(this->relationanimal_trainer);
    }
    
    inline ::System::Boolean animalList::ShouldSerializeanimal() {
        return false;
    }
    
    inline ::System::Boolean animalList::ShouldSerializeveterinarian() {
        return false;
    }
    
    inline ::System::Boolean animalList::ShouldSerializetrainer() {
        return false;
    }
    
    inline ::System::Void animalList::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  animalList::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        XMLXercesImplTest::animalList^  ds = (gcnew XMLXercesImplTest::animalList());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline animalList::animalDataTable::animalDataTable() {
        this->TableName = L"animal";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline animalList::animalDataTable::animalDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline animalList::animalDataTable::animalDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  animalList::animalDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  animalList::animalDataTable::speciesColumn::get() {
        return this->columnspecies;
    }
    
    inline ::System::Data::DataColumn^  animalList::animalDataTable::dateOfBirthColumn::get() {
        return this->columndateOfBirth;
    }
    
    inline ::System::Data::DataColumn^  animalList::animalDataTable::animal_IdColumn::get() {
        return this->columnanimal_Id;
    }
    
    inline ::System::Int32 animalList::animalDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XMLXercesImplTest::animalList::animalRow^  animalList::animalDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void animalList::animalDataTable::AddanimalRow(XMLXercesImplTest::animalList::animalRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XMLXercesImplTest::animalList::animalRow^  animalList::animalDataTable::AddanimalRow(System::String^  name, System::String^  species, 
                System::DateTime dateOfBirth) {
        XMLXercesImplTest::animalList::animalRow^  rowanimalRow = (cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {name, species, dateOfBirth, 
            nullptr};
        rowanimalRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowanimalRow);
        return rowanimalRow;
    }
    
    inline ::System::Collections::IEnumerator^  animalList::animalDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  animalList::animalDataTable::Clone() {
        XMLXercesImplTest::animalList::animalDataTable^  cln = (cli::safe_cast<XMLXercesImplTest::animalList::animalDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  animalList::animalDataTable::CreateInstance() {
        return (gcnew XMLXercesImplTest::animalList::animalDataTable());
    }
    
    inline ::System::Void animalList::animalDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnspecies = __super::Columns[L"species"];
        this->columndateOfBirth = __super::Columns[L"dateOfBirth"];
        this->columnanimal_Id = __super::Columns[L"animal_Id"];
    }
    
    inline ::System::Void animalList::animalDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnname);
        this->columnspecies = (gcnew ::System::Data::DataColumn(L"species", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnspecies);
        this->columndateOfBirth = (gcnew ::System::Data::DataColumn(L"dateOfBirth", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columndateOfBirth);
        this->columnanimal_Id = (gcnew ::System::Data::DataColumn(L"animal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnanimal_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnanimal_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnspecies->AllowDBNull = false;
        this->columndateOfBirth->AllowDBNull = false;
        this->columnanimal_Id->AutoIncrement = true;
        this->columnanimal_Id->AllowDBNull = false;
        this->columnanimal_Id->Unique = true;
    }
    
    inline XMLXercesImplTest::animalList::animalRow^  animalList::animalDataTable::NewanimalRow() {
        return (cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  animalList::animalDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XMLXercesImplTest::animalList::animalRow(builder));
    }
    
    inline ::System::Type^  animalList::animalDataTable::GetRowType() {
        return XMLXercesImplTest::animalList::animalRow::typeid;
    }
    
    inline ::System::Void animalList::animalDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->animalRowChanged(this, (gcnew XMLXercesImplTest::animalList::animalRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::animalDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->animalRowChanging(this, (gcnew XMLXercesImplTest::animalList::animalRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::animalDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->animalRowDeleted(this, (gcnew XMLXercesImplTest::animalList::animalRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::animalDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->animalRowDeleting(this, (gcnew XMLXercesImplTest::animalList::animalRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::animalDataTable::RemoveanimalRow(XMLXercesImplTest::animalList::animalRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  animalList::animalDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XMLXercesImplTest::animalList^  ds = (gcnew XMLXercesImplTest::animalList());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"animalDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline animalList::veterinarianDataTable::veterinarianDataTable() {
        this->TableName = L"veterinarian";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline animalList::veterinarianDataTable::veterinarianDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline animalList::veterinarianDataTable::veterinarianDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  animalList::veterinarianDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  animalList::veterinarianDataTable::phoneColumn::get() {
        return this->columnphone;
    }
    
    inline ::System::Data::DataColumn^  animalList::veterinarianDataTable::animal_IdColumn::get() {
        return this->columnanimal_Id;
    }
    
    inline ::System::Int32 animalList::veterinarianDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XMLXercesImplTest::animalList::veterinarianRow^  animalList::veterinarianDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XMLXercesImplTest::animalList::veterinarianRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void animalList::veterinarianDataTable::AddveterinarianRow(XMLXercesImplTest::animalList::veterinarianRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XMLXercesImplTest::animalList::veterinarianRow^  animalList::veterinarianDataTable::AddveterinarianRow(System::String^  name, 
                System::String^  phone, XMLXercesImplTest::animalList::animalRow^  parentanimalRowByanimal_veterinarian) {
        XMLXercesImplTest::animalList::veterinarianRow^  rowveterinarianRow = (cli::safe_cast<XMLXercesImplTest::animalList::veterinarianRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, phone, nullptr};
        if (parentanimalRowByanimal_veterinarian != nullptr) {
            columnValuesArray[2] = parentanimalRowByanimal_veterinarian[3];
        }
        rowveterinarianRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowveterinarianRow);
        return rowveterinarianRow;
    }
    
    inline ::System::Collections::IEnumerator^  animalList::veterinarianDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  animalList::veterinarianDataTable::Clone() {
        XMLXercesImplTest::animalList::veterinarianDataTable^  cln = (cli::safe_cast<XMLXercesImplTest::animalList::veterinarianDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  animalList::veterinarianDataTable::CreateInstance() {
        return (gcnew XMLXercesImplTest::animalList::veterinarianDataTable());
    }
    
    inline ::System::Void animalList::veterinarianDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnphone = __super::Columns[L"phone"];
        this->columnanimal_Id = __super::Columns[L"animal_Id"];
    }
    
    inline ::System::Void animalList::veterinarianDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnphone = (gcnew ::System::Data::DataColumn(L"phone", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnphone);
        this->columnanimal_Id = (gcnew ::System::Data::DataColumn(L"animal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnanimal_Id);
        this->columnname->Namespace = L"";
        this->columnphone->Namespace = L"";
    }
    
    inline XMLXercesImplTest::animalList::veterinarianRow^  animalList::veterinarianDataTable::NewveterinarianRow() {
        return (cli::safe_cast<XMLXercesImplTest::animalList::veterinarianRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  animalList::veterinarianDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XMLXercesImplTest::animalList::veterinarianRow(builder));
    }
    
    inline ::System::Type^  animalList::veterinarianDataTable::GetRowType() {
        return XMLXercesImplTest::animalList::veterinarianRow::typeid;
    }
    
    inline ::System::Void animalList::veterinarianDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->veterinarianRowChanged(this, (gcnew XMLXercesImplTest::animalList::veterinarianRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::veterinarianRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::veterinarianDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->veterinarianRowChanging(this, (gcnew XMLXercesImplTest::animalList::veterinarianRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::veterinarianRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::veterinarianDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->veterinarianRowDeleted(this, (gcnew XMLXercesImplTest::animalList::veterinarianRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::veterinarianRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::veterinarianDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->veterinarianRowDeleting(this, (gcnew XMLXercesImplTest::animalList::veterinarianRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::veterinarianRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::veterinarianDataTable::RemoveveterinarianRow(XMLXercesImplTest::animalList::veterinarianRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  animalList::veterinarianDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XMLXercesImplTest::animalList^  ds = (gcnew XMLXercesImplTest::animalList());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"veterinarianDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline animalList::trainerDataTable::trainerDataTable() {
        this->TableName = L"trainer";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline animalList::trainerDataTable::trainerDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline animalList::trainerDataTable::trainerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  animalList::trainerDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  animalList::trainerDataTable::phoneColumn::get() {
        return this->columnphone;
    }
    
    inline ::System::Data::DataColumn^  animalList::trainerDataTable::animal_IdColumn::get() {
        return this->columnanimal_Id;
    }
    
    inline ::System::Int32 animalList::trainerDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XMLXercesImplTest::animalList::trainerRow^  animalList::trainerDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XMLXercesImplTest::animalList::trainerRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void animalList::trainerDataTable::AddtrainerRow(XMLXercesImplTest::animalList::trainerRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XMLXercesImplTest::animalList::trainerRow^  animalList::trainerDataTable::AddtrainerRow(System::String^  name, 
                System::String^  phone, XMLXercesImplTest::animalList::animalRow^  parentanimalRowByanimal_trainer) {
        XMLXercesImplTest::animalList::trainerRow^  rowtrainerRow = (cli::safe_cast<XMLXercesImplTest::animalList::trainerRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, phone, nullptr};
        if (parentanimalRowByanimal_trainer != nullptr) {
            columnValuesArray[2] = parentanimalRowByanimal_trainer[3];
        }
        rowtrainerRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowtrainerRow);
        return rowtrainerRow;
    }
    
    inline ::System::Collections::IEnumerator^  animalList::trainerDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  animalList::trainerDataTable::Clone() {
        XMLXercesImplTest::animalList::trainerDataTable^  cln = (cli::safe_cast<XMLXercesImplTest::animalList::trainerDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  animalList::trainerDataTable::CreateInstance() {
        return (gcnew XMLXercesImplTest::animalList::trainerDataTable());
    }
    
    inline ::System::Void animalList::trainerDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnphone = __super::Columns[L"phone"];
        this->columnanimal_Id = __super::Columns[L"animal_Id"];
    }
    
    inline ::System::Void animalList::trainerDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnphone = (gcnew ::System::Data::DataColumn(L"phone", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnphone);
        this->columnanimal_Id = (gcnew ::System::Data::DataColumn(L"animal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnanimal_Id);
        this->columnname->Namespace = L"";
        this->columnphone->Namespace = L"";
    }
    
    inline XMLXercesImplTest::animalList::trainerRow^  animalList::trainerDataTable::NewtrainerRow() {
        return (cli::safe_cast<XMLXercesImplTest::animalList::trainerRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  animalList::trainerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XMLXercesImplTest::animalList::trainerRow(builder));
    }
    
    inline ::System::Type^  animalList::trainerDataTable::GetRowType() {
        return XMLXercesImplTest::animalList::trainerRow::typeid;
    }
    
    inline ::System::Void animalList::trainerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->trainerRowChanged(this, (gcnew XMLXercesImplTest::animalList::trainerRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::trainerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::trainerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->trainerRowChanging(this, (gcnew XMLXercesImplTest::animalList::trainerRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::trainerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::trainerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->trainerRowDeleted(this, (gcnew XMLXercesImplTest::animalList::trainerRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::trainerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::trainerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->trainerRowDeleting(this, (gcnew XMLXercesImplTest::animalList::trainerRowChangeEvent((cli::safe_cast<XMLXercesImplTest::animalList::trainerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void animalList::trainerDataTable::RemovetrainerRow(XMLXercesImplTest::animalList::trainerRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  animalList::trainerDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XMLXercesImplTest::animalList^  ds = (gcnew XMLXercesImplTest::animalList());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"trainerDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline animalList::animalRow::animalRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableanimal = (cli::safe_cast<XMLXercesImplTest::animalList::animalDataTable^  >(this->Table));
    }
    
    inline System::String^  animalList::animalRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableanimal->nameColumn]));
    }
    inline System::Void animalList::animalRow::name::set(System::String^  value) {
        this[this->tableanimal->nameColumn] = value;
    }
    
    inline System::String^  animalList::animalRow::species::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableanimal->speciesColumn]));
    }
    inline System::Void animalList::animalRow::species::set(System::String^  value) {
        this[this->tableanimal->speciesColumn] = value;
    }
    
    inline System::DateTime animalList::animalRow::dateOfBirth::get() {
        return (cli::safe_cast<::System::DateTime >(this[this->tableanimal->dateOfBirthColumn]));
    }
    inline System::Void animalList::animalRow::dateOfBirth::set(System::DateTime value) {
        this[this->tableanimal->dateOfBirthColumn] = value;
    }
    
    inline System::Int32 animalList::animalRow::animal_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableanimal->animal_IdColumn]));
    }
    inline System::Void animalList::animalRow::animal_Id::set(System::Int32 value) {
        this[this->tableanimal->animal_IdColumn] = value;
    }
    
    inline cli::array< XMLXercesImplTest::animalList::veterinarianRow^  >^  animalList::animalRow::GetveterinarianRows() {
        if (this->Table->ChildRelations[L"animal_veterinarian"] == nullptr) {
            return gcnew cli::array< XMLXercesImplTest::animalList::veterinarianRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XMLXercesImplTest::animalList::veterinarianRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"animal_veterinarian"])));
        }
    }
    
    inline cli::array< XMLXercesImplTest::animalList::trainerRow^  >^  animalList::animalRow::GettrainerRows() {
        if (this->Table->ChildRelations[L"animal_trainer"] == nullptr) {
            return gcnew cli::array< XMLXercesImplTest::animalList::trainerRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XMLXercesImplTest::animalList::trainerRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"animal_trainer"])));
        }
    }
    
    
    inline animalList::veterinarianRow::veterinarianRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableveterinarian = (cli::safe_cast<XMLXercesImplTest::animalList::veterinarianDataTable^  >(this->Table));
    }
    
    inline System::String^  animalList::veterinarianRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableveterinarian->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'veterinarian\' is DBNull.", 
                e));
        }
    }
    inline System::Void animalList::veterinarianRow::name::set(System::String^  value) {
        this[this->tableveterinarian->nameColumn] = value;
    }
    
    inline System::String^  animalList::veterinarianRow::phone::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableveterinarian->phoneColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'phone\' in table \'veterinarian\' is DBNull.", 
                e));
        }
    }
    inline System::Void animalList::veterinarianRow::phone::set(System::String^  value) {
        this[this->tableveterinarian->phoneColumn] = value;
    }
    
    inline System::Int32 animalList::veterinarianRow::animal_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableveterinarian->animal_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'animal_Id\' in table \'veterinarian\' is DBNull.", 
                e));
        }
    }
    inline System::Void animalList::veterinarianRow::animal_Id::set(System::Int32 value) {
        this[this->tableveterinarian->animal_IdColumn] = value;
    }
    
    inline XMLXercesImplTest::animalList::animalRow^  animalList::veterinarianRow::animalRow::get() {
        return (cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"animal_veterinarian"])));
    }
    inline System::Void animalList::veterinarianRow::animalRow::set(XMLXercesImplTest::animalList::animalRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"animal_veterinarian"]);
    }
    
    inline ::System::Boolean animalList::veterinarianRow::IsnameNull() {
        return this->IsNull(this->tableveterinarian->nameColumn);
    }
    
    inline ::System::Void animalList::veterinarianRow::SetnameNull() {
        this[this->tableveterinarian->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean animalList::veterinarianRow::IsphoneNull() {
        return this->IsNull(this->tableveterinarian->phoneColumn);
    }
    
    inline ::System::Void animalList::veterinarianRow::SetphoneNull() {
        this[this->tableveterinarian->phoneColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean animalList::veterinarianRow::Isanimal_IdNull() {
        return this->IsNull(this->tableveterinarian->animal_IdColumn);
    }
    
    inline ::System::Void animalList::veterinarianRow::Setanimal_IdNull() {
        this[this->tableveterinarian->animal_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline animalList::trainerRow::trainerRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabletrainer = (cli::safe_cast<XMLXercesImplTest::animalList::trainerDataTable^  >(this->Table));
    }
    
    inline System::String^  animalList::trainerRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletrainer->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'trainer\' is DBNull.", 
                e));
        }
    }
    inline System::Void animalList::trainerRow::name::set(System::String^  value) {
        this[this->tabletrainer->nameColumn] = value;
    }
    
    inline System::String^  animalList::trainerRow::phone::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletrainer->phoneColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'phone\' in table \'trainer\' is DBNull.", 
                e));
        }
    }
    inline System::Void animalList::trainerRow::phone::set(System::String^  value) {
        this[this->tabletrainer->phoneColumn] = value;
    }
    
    inline System::Int32 animalList::trainerRow::animal_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletrainer->animal_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'animal_Id\' in table \'trainer\' is DBNull.", 
                e));
        }
    }
    inline System::Void animalList::trainerRow::animal_Id::set(System::Int32 value) {
        this[this->tabletrainer->animal_IdColumn] = value;
    }
    
    inline XMLXercesImplTest::animalList::animalRow^  animalList::trainerRow::animalRow::get() {
        return (cli::safe_cast<XMLXercesImplTest::animalList::animalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"animal_trainer"])));
    }
    inline System::Void animalList::trainerRow::animalRow::set(XMLXercesImplTest::animalList::animalRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"animal_trainer"]);
    }
    
    inline ::System::Boolean animalList::trainerRow::IsnameNull() {
        return this->IsNull(this->tabletrainer->nameColumn);
    }
    
    inline ::System::Void animalList::trainerRow::SetnameNull() {
        this[this->tabletrainer->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean animalList::trainerRow::IsphoneNull() {
        return this->IsNull(this->tabletrainer->phoneColumn);
    }
    
    inline ::System::Void animalList::trainerRow::SetphoneNull() {
        this[this->tabletrainer->phoneColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean animalList::trainerRow::Isanimal_IdNull() {
        return this->IsNull(this->tabletrainer->animal_IdColumn);
    }
    
    inline ::System::Void animalList::trainerRow::Setanimal_IdNull() {
        this[this->tabletrainer->animal_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline animalList::animalRowChangeEvent::animalRowChangeEvent(XMLXercesImplTest::animalList::animalRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XMLXercesImplTest::animalList::animalRow^  animalList::animalRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction animalList::animalRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline animalList::veterinarianRowChangeEvent::veterinarianRowChangeEvent(XMLXercesImplTest::animalList::veterinarianRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XMLXercesImplTest::animalList::veterinarianRow^  animalList::veterinarianRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction animalList::veterinarianRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline animalList::trainerRowChangeEvent::trainerRowChangeEvent(XMLXercesImplTest::animalList::trainerRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XMLXercesImplTest::animalList::trainerRow^  animalList::trainerRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction animalList::trainerRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
